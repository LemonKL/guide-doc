<header class="article-header">
<h1 class="article-title">外部化配置</h1>
</header>
<div class="article-entry">
<p>本文实际是 《Dubbo 源码分析 &mdash;&mdash; 集成 Spring Boot》文章。考虑到和 Dubbo 配置比较相关，所以改成这个标题。</p>
<ul>
<li>重点是&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-Externalized/">「4. dubbo-spring-boot-autoconfigure 源码」</a>&nbsp;小节。</li>
<li>选择性看&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-Externalized/">「5. dubbo-spring-boot-actuator 源码」</a>&nbsp;小节。</li>
</ul>
<h1 id="1-概述">1. 概述</h1>
<p>本文，我们来分享&nbsp;<a href="https://github.com/apache/incubator-dubbo-spring-boot-project" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/apache/incubator-dubbo-spring-boot-project</a>&nbsp;项目的源码解析，看看 Dubbo 是如何集成到 Spring Boot 中的。</p>
<p>在阅读本文之前，希望胖友能够先熟读&nbsp;<a href="https://github.com/apache/incubator-dubbo-spring-boot-project/blob/master/README_CN.md" target="_blank" rel="external nofollow noopener noreferrer">中文文档</a>&nbsp;。最好呢，当然不强制，可以操练下每个 Demo 。</p>
<h1 id="2-调试环境搭建">2. 调试环境搭建</h1>
<p>在读源码之前，我们当然是先把调试环境搭建起来。</p>
<h2 id="2-1-依赖工具">2.1 依赖工具</h2>
<ul>
<li>JDK ：1.8+</li>
<li>Maven</li>
<li>IntelliJ IDEA</li>
</ul>
<h2 id="2-2-源码拉取">2.2 源码拉取</h2>
<p>从官方仓库&nbsp;<a href="https://github.com/apache/incubator-dubbo-spring-boot-project" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/apache/incubator-dubbo-spring-boot-project</a>&nbsp;<code>Fork</code>&nbsp;出属于自己的仓库。为什么要&nbsp;<code>Fork</code>&nbsp;？既然开始阅读、调试源码，我们可能会写一些注释，有了自己的仓库，可以进行自由的提交。😈</p>
<p>使用 IntelliJ IDEA 从 Fork 出来的仓库拉取代码。拉取完成后，Maven 会下载依赖包，可能会花费一些时间，耐心等待下。</p>
<hr />
<p>在等待的过程中，我来简单说下，搭建调试环境的过程：</p>
<ol>
<li>启动 Dubbo Provider</li>
<li>启动 Dubbo Consumer</li>
</ol>
<p>考虑到方便，我们直接使用&nbsp;<code>dubbo-registry-zookeeper-samples</code>&nbsp;项目提供的示例。</p>
<p>😈 另外，本文使用的&nbsp;<code>incubator-dubbo-spring-boot-project</code>&nbsp;版本是&nbsp;<code>0.2.1</code>&nbsp;。</p>
<h2 id="2-3-启动-Dubbo-Provider">2.3 启动 Dubbo Provider</h2>
<p>右键运行&nbsp;<code>dubbo-registry-zookeeper-samples</code>&nbsp;项目下的&nbsp;<code>provider-sample</code>&nbsp;的 DubboRegistryZooKeeperProviderBootstrap 的&nbsp;<code>#main(String[] args)</code>&nbsp;方法，Provider 就启动完成了。输出日志如下图：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/01.jpg" alt="日志" /></p>
<p>这个示例比较有意思的是，提供了 EmbeddedZooKeeper 类，用于启动<strong>内嵌</strong>的 Zookeeper 。</p>
<h2 id="2-4-启动-Dubbo-Consumer">2.4 启动 Dubbo Consumer</h2>
<p>右键运行&nbsp;<code>dubbo-registry-zookeeper-samples</code>&nbsp;项目下的&nbsp;<code>consumer-sample</code>&nbsp;的 DubboRegistryZooKeeperConsumerBootstrap 的&nbsp;<code>#main(String[] args)</code>&nbsp;方法，Consumer 就启动完成了。输出日志如下图：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/02.jpg" alt="日志" /></p>
<p>因为 DubboRegistryZooKeeperConsumerBootstrap 的 Spring Boot 启动调用如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboRegistryZooKeeperConsumerBootstrap.java</span></span><br /><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br /><br /><span class="line"><span class="meta">@Reference</span>(version = <span class="string">"${demo.service.version}"</span>)</span><br /><span class="line"><span class="keyword">private</span> DemoService demoService;</span><br /><br /><span class="line"><span class="meta">@Bean</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> ApplicationRunner <span class="title">runner</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> args -&gt; logger.info(demoService.sayHello(<span class="string">"mercyblitz"</span>)); <span class="comment">// 发起调用</span></span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br /><span class="line">    SpringApplication.run(DubboRegistryZooKeeperConsumerBootstrap.class) <span class="comment">// 启动</span></span><br /><span class="line">            .close(); <span class="comment">// &lt;X&gt; 关闭</span></span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>&lt;X&gt;</code>&nbsp;处，所以在发起一次 Dubbo 调用之后，会直接关闭 Spring Boot 应用。因此，JVM 进程就直接结束了。</li>
</ul>
<h1 id="3-项目结构一览">3. 项目结构一览</h1>
<p>本文主要分享&nbsp;<code>incubator-dubbo-spring-boot-project</code>&nbsp;的&nbsp;<strong>项目结构</strong>。<br />希望通过本文能让胖友对&nbsp;<code>incubator-dubbo-spring-boot-project</code>&nbsp;的整体项目有个简单的了解。</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/03.jpg" alt="项目结构一览" /></p>
<h2 id="3-1-代码统计">3.1 代码统计</h2>
<p>这里先分享一个小技巧。笔者在开始源码学习时，会首先了解项目的代码量。</p>
<p><strong>第一种方式</strong>，使用&nbsp;<a href="https://plugins.jetbrains.com/plugin/4509-statistic" target="_blank" rel="external nofollow noopener noreferrer">IDEA Statistic</a>&nbsp;插件，统计整体代码量。</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/04.jpg" alt="Statistic 统计代码量" /></p>
<p>我们可以粗略的看到，总的代码量在 2000 行。这其中还包括单元测试，示例等等代码。<br />所以，不慌，一点不慌~</p>
<p><strong>第二种方式</strong>，使用&nbsp;<a href="http://blog.csdn.net/yhhwatl/article/details/52623879" target="_blank" rel="external nofollow noopener noreferrer">Shell 脚本命令逐个 Maven 模块统计</a>&nbsp;。</p>
<p>一般情况下，笔者使用&nbsp;<code>find . -name "*.java"|xargs cat|grep -v -e ^$ -e ^\s*\/\/.*$|wc -l</code>&nbsp;。这个命令只过滤了<strong>部分注释</strong>，所以相比&nbsp;<a href="https://plugins.jetbrains.com/plugin/4509-statistic" target="_blank" rel="external nofollow noopener noreferrer">IDEA Statistic</a>&nbsp;会<strong>偏多</strong>。</p>
<p>当然，考虑到准确性，胖友需要手动&nbsp;<code>cd</code>&nbsp;到每个 Maven 项目的&nbsp;<code>src/main/java</code>&nbsp;目录下，以达到排除单元测试的代码量。</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/05.jpg" alt="Shell 脚本统计代码量" /></p>
<p>统计完后，是不是更加不慌了。哈哈哈哈。</p>
<h2 id="3-2-dubbo-spring-boot-parent-模块">3.2 dubbo-spring-boot-parent 模块</h2>
<p><code>dubbo-spring-boot-parent</code>&nbsp;模块，无具体代码，作为其它项目的 Maven Parent 项目，例如定义了依赖版本号。</p>
<h2 id="3-3-dubbo-spring-boot-starter-模块">3.3 dubbo-spring-boot-starter 模块</h2>
<p><code>dubbo-spring-boot-starter</code>&nbsp;模块，无具体代码，作为 Spring Boot Dubbo Starter 模块。其&nbsp;<code>pom.xml</code>的代码如下：</p>
<figure class="highlight xml">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br /><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br /><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br /><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br /><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br /><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>${revision}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br /><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../dubbo-spring-boot-parent<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br /><br /><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Dubbo Spring Boot Starter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Dubbo Spring Boot Starter<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br /><br /><br /><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br /><span class="line">        <span class="comment">&lt;!-- Spring Boot dependencies --&gt;</span></span><br /><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br /><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br /><br /><span class="line">        <span class="comment">&lt;!-- ZK --&gt;</span></span><br /><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br /><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br /><br /><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br /><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br /><br /><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br /><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${revision}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br /><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br /><br /><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br /><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="3-4-dubbo-spring-boot-distribution-模块">3.4 dubbo-spring-boot-distribution 模块</h2>
<p><code>dubbo-spring-boot-distribution</code>&nbsp;模块，无具体代码，用于 Spring Boot Dubbo 使用&nbsp;<a href="https://www.jianshu.com/p/14bcb17b99e0" target="_blank" rel="external nofollow noopener noreferrer"><code>maven-assembly-plugin</code></a>&nbsp;插件，打包出我们后续使用的&nbsp;<a href="https://github.com/apache/incubator-dubbo-spring-boot-project/releases" target="_blank" rel="external nofollow noopener noreferrer">Releases</a>&nbsp;。</p>
<h2 id="3-5-dubbo-spring-boot-autoconfigure-模块">3.5 dubbo-spring-boot-autoconfigure 模块</h2>
<p><code>dubbo-spring-boot-autoconfigure</code>&nbsp;模块，754 行代码，提供了 Spring Boot Dubbo 的自动配置（AutoConfigure）的具体实现。</p>
<h2 id="3-6-dubbo-spring-boot-actuator-模块">3.6 dubbo-spring-boot-actuator 模块</h2>
<p><code>dubbo-spring-boot-actuator</code>&nbsp;模块，782 行代码，提供了 Spring Boot Dubbo 的 Actuator 的具体实现。</p>
<blockquote>
<p>Spring Boot Actuator 的关键特性，是在应用程序里提供众多 HTTP 接口，通过它们了解应用程序运行时的内部状况。</p>
</blockquote>
<h2 id="3-7-dubbo-spring-boot-samples-模块">3.7 dubbo-spring-boot-samples 模块</h2>
<p><code>dubbo-spring-boot-samples</code>&nbsp;模块，708 行代码，提供了四个示例。比较重点可以看的是两个：</p>
<ul>
<li><code>dubbo-registry-zookeeper-samples</code>&nbsp;模块，提供基于 Zookeeper 作为注册中心的使用示例。</li>
<li><code>externalized-configuration-samples</code>&nbsp;模块，提供了外部化配置的示例。</li>
</ul>
<h2 id="3-8-小结">3.8 小结</h2>
<p>貌似也没啥好小结的。想要偷懒的话，只要看&nbsp;<code>dubbo-spring-boot-autoconfigure</code>&nbsp;模块，一共是 754 行代码。哈哈哈~</p>
<p>当然，真的要深入的话，还是要看&nbsp;<a href="https://github.com/apache/incubator-dubbo" target="_blank" rel="external nofollow noopener noreferrer">Dubbo</a>&nbsp;本身的代码的。</p>
<h1 id="4-dubbo-spring-boot-autoconfigure-源码">4.&nbsp;<code>dubbo-spring-boot-autoconfigure</code>&nbsp;源码</h1>
<p><code>dubbo-spring-boot-autoconfigure</code>&nbsp;模块，所有类如下图：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/06.jpg" alt="&#96;dubbo-spring-boot-autoconfigure&#96; 模块" /></p>
<blockquote>
<p>如下开始，是&nbsp;<code>autoconfigure</code>&nbsp;包下。</p>
</blockquote>
<h2 id="4-1-DubboAutoConfiguration">4.1 DubboAutoConfiguration</h2>
<p><code>com.alibaba.boot.dubbo.autoconfigure.DubboAutoConfiguration</code>&nbsp;，Dubbo 自动配置类。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboAutoConfiguration.java</span></span><br /><br /><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br /><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = DUBBO_PREFIX, name = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>, havingValue = <span class="string">"true"</span>) <span class="comment">// 要求配置了 "dubbo.enabled=true" 或者，"dubbo.enabled" 未配置</span></span><br /><span class="line"><span class="meta">@ConditionalOnClass</span>(AbstractConfig.class) <span class="comment">// AbstractConfig 类存在的时候，即用于判断有 Dubbo 库</span></span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboAutoConfiguration</span> </span>{</span><br /><br /><span class="line">    <span class="comment">// ... 省略其它代码</span></span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>类上的每个注解的作用，请看其后的注释。</li>
</ul>
<h3 id="4-1-1-serviceAnnotationBeanPostProcessor">4.1.1 serviceAnnotationBeanPostProcessor</h3>
<p><code>#serviceAnnotationBeanPostProcessor()</code>&nbsp;方法，创建 ServiceAnnotationBeanPostProcessor Bean 对象。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboAutoConfiguration.java</span></span><br /><br /><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = BASE_PACKAGES_PROPERTY_NAME) <span class="comment">// 配置了 "dubbo.scan.base-package" 属性，即要扫描 Dubbo 注解的包</span></span><br /><span class="line"><span class="meta">@ConditionalOnClass</span>(ConfigurationPropertySources.class) <span class="comment">// 有 Spring Boot 配置加载的功能</span></span><br /><span class="line"><span class="meta">@Bean</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> ServiceAnnotationBeanPostProcessor <span class="title">serviceAnnotationBeanPostProcessor</span><span class="params">(Environment environment)</span> </span>{</span><br /><span class="line">    <span class="comment">// &lt;1&gt; 获得 "dubbo.scan.base-package" 属性</span></span><br /><span class="line">    Set&lt;String&gt; packagesToScan = environment.getProperty(BASE_PACKAGES_PROPERTY_NAME, Set.class, emptySet());</span><br /><span class="line">    <span class="comment">// &lt;2&gt; 创建 ServiceAnnotationBeanPostProcessor 对象</span></span><br /><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServiceAnnotationBeanPostProcessor(packagesToScan);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>&lt;1&gt;</code>&nbsp;处，获得&nbsp;<code>"dubbo.scan.base-package"</code>&nbsp;属性，即要扫描 Dubbo 注解的包。</li>
<li><code>&lt;2&gt;</code>&nbsp;处，创建 ServiceAnnotationBeanPostProcessor 对象。后续，ServiceAnnotationBeanPostProcessor 会扫描&nbsp;<code>packagesToScan</code>&nbsp;包的 Dubbo&nbsp;<code>@Service</code>&nbsp;注解，创建对应的 Dubbo Service Bean 对象们。
<ul>
<li>ServiceAnnotationBeanPostProcessor 属于 Dubbo 项目本身，所以本文就不解析逻。</li>
</ul>
</li>
</ul>
<h3 id="4-1-2-referenceAnnotationBeanPostProcessor">4.1.2 referenceAnnotationBeanPostProcessor</h3>
<p><code>#referenceAnnotationBeanPostProcessor()</code>&nbsp;方法，创建 Bean 名字为&nbsp;<code>"referenceAnnotationBeanPostProcessor"</code>&nbsp;的 ReferenceAnnotationBeanPostProcessor Bean 对象。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboAutoConfiguration.java</span></span><br /><br /><span class="line"><span class="meta">@ConditionalOnMissingBean</span> <span class="comment">// 不存在 ReferenceAnnotationBeanPostProcessor Bean 的时候</span></span><br /><span class="line"><span class="meta">@Bean</span>(name = ReferenceAnnotationBeanPostProcessor.BEAN_NAME) <span class="comment">// Bean 的名字是 referenceAnnotationBeanPostProcessor</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> ReferenceAnnotationBeanPostProcessor <span class="title">referenceAnnotationBeanPostProcessor</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReferenceAnnotationBeanPostProcessor();</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>后续，ReferenceAnnotationBeanPostProcessor 会扫描 Dubbo&nbsp;<code>@Reference</code>&nbsp;注解，创建对应的 Dubbo Service Bean 对象们。
<ul>
<li>ReferenceAnnotationBeanPostProcessor 属于 Dubbo 项目本身，所以本文就不解析逻。</li>
</ul>
</li>
</ul>
<h3 id="4-1-3-relaxedDubboConfigBinder">4.1.3 relaxedDubboConfigBinder</h3>
<p><code>#relaxedDubboConfigBinder()</code>&nbsp;方法，创建 RelaxedDubboConfigBinder Bean 对象。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboAutoConfiguration.java</span></span><br /><br /><span class="line"><span class="meta">@ConditionalOnClass</span>(Binder.class) <span class="comment">// 存在 Binder 类的时候</span></span><br /><span class="line"><span class="meta">@Bean</span></span><br /><span class="line"><span class="meta">@Scope</span>(scopeName = SCOPE_PROTOTYPE) <span class="comment">// 多例</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> RelaxedDubboConfigBinder <span class="title">relaxedDubboConfigBinder</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RelaxedDubboConfigBinder();</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>RelaxedDubboConfigBinder ，用于将具体的属性，设置到相应的 AbstractConfig 对象中。</li>
<li>为什么&nbsp;<code>@Scope(scopeName = SCOPE_PROTOTYPE)</code>&nbsp;注解是<strong>多例</strong>呢？因为有多个 AbstractConfig 对象呀~</li>
<li>详细的解析，见&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-Externalized/">「4.2 RelaxedDubboConfigBinder」</a>&nbsp;。</li>
</ul>
<h3 id="4-1-4-XXXDubboConfigConfiguration">4.1.4 XXXDubboConfigConfiguration</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboAutoConfiguration.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Single Dubbo Config Configuration</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@see</span> EnableDubboConfig</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@see</span> DubboConfigConfiguration.Single</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="meta">@EnableDubboConfig</span></span><br /><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDubboConfigConfiguration</span> </span>{</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Multiple Dubbo Config Configuration , equals <span class="doctag">@EnableDubboConfig</span>.multiple() == &lt;code&gt;true&lt;/code&gt;</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@see</span> EnableDubboConfig</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@see</span> DubboConfigConfiguration.Multiple</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = MULTIPLE_CONFIG_PROPERTY_NAME, havingValue = <span class="string">"true"</span>) <span class="comment">// 要求配置 "dubbo.config.multiple=true" 。默认情况下，Dubbo 自带 "dubbo.config.multiple=true"</span></span><br /><span class="line"><span class="meta">@EnableDubboConfig</span>(multiple = <span class="keyword">true</span>)</span><br /><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleDubboConfigConfiguration</span> </span>{</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>关于&nbsp;<code>@EnableDubboConfig</code>&nbsp;注解的介绍，可以看看&nbsp;<a href="https://segmentfault.com/a/1190000012661402#articleHeader4" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 新编程模型之外部化配置 &mdash;&mdash;&nbsp;<code>@EnableDubboConfig</code>》</a>&nbsp;。</li>
<li>
<p>SingleDubboConfigConfiguration 对应&nbsp;<code>@EnableDubboConfig(multiple = false)</code>&nbsp;。</p>
<ul>
<li>无任何条件，所以会创建。</li>
<li>
<p>引入了单个 Dubbo 配置绑定 Bean 的配置。即配置文件如下属性：</p>
<figure class="highlight plain">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">dubbo.application</span><br /><span class="line">dubbo.module</span><br /><span class="line">dubbo.registry</span><br /><span class="line">dubbo.protocol</span><br /><span class="line">dubbo.monitor</span><br /><span class="line">dubbo.provider</span><br /><span class="line">dubbo.consumer</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>~</li>
</ul>
</li>
</ul>
</li>
<li>
<p>MultipleDubboConfigConfiguration 对应&nbsp;<code>@EnableDubboConfig(multiple = true)</code>&nbsp;。</p>
<ul>
<li>要求配置&nbsp;<code>"dubbo.config.multiple=true"</code>&nbsp;。默认情况下，Dubbo 自带&nbsp;<code>"dubbo.config.multiple=true"</code>&nbsp;，所以也会创建。</li>
<li>
<p>引入了多个 Dubbo 配置绑定 Bean 的配置。即配置文件如下属性：</p>
<figure class="highlight plain">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">dubbo.applications</span><br /><span class="line">dubbo.modules</span><br /><span class="line">dubbo.registries</span><br /><span class="line">dubbo.protocols</span><br /><span class="line">dubbo.monitors</span><br /><span class="line">dubbo.providers</span><br /><span class="line">dubbo.consumers</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>~</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-2-RelaxedDubboConfigBinder">4.2 RelaxedDubboConfigBinder</h2>
<p><code>com.alibaba.boot.dubbo.autoconfigure.RelaxedDubboConfigBinder</code>&nbsp;，继承 AbstractDubboConfigBinder 抽象类，负责将 Spring Boot 的配置属性，注入到 Dubbo AbstractConfig 配置对象中。代码 如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// RelaxedDubboConfigBinder.java</span></span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="keyword">public</span> &lt;C extends AbstractConfig&gt; <span class="function"><span class="keyword">void</span> <span class="title">bind</span><span class="params">(String prefix, C dubboConfig)</span> </span>{</span><br /><span class="line">    <span class="comment">// &lt;1.1&gt; 获得 PropertySource 数组</span></span><br /><span class="line">    Iterable&lt;PropertySource&lt;?&gt;&gt; propertySources = getPropertySources();</span><br /><span class="line">    <span class="comment">// Converts ConfigurationPropertySources</span></span><br /><span class="line">    <span class="comment">// &lt;1.2&gt; 转换成 ConfigurationPropertySource 数组</span></span><br /><span class="line">    Iterable&lt;ConfigurationPropertySource&gt; configurationPropertySources = from(propertySources);</span><br /><br /><span class="line">    <span class="comment">// Wrap Bindable from DubboConfig instance</span></span><br /><span class="line">    <span class="comment">// &lt;2&gt; 将 dubboConfig 包装成 Bindable 对象</span></span><br /><span class="line">    Bindable&lt;C&gt; bindable = Bindable.ofInstance(dubboConfig);</span><br /><br /><span class="line">    <span class="comment">// &lt;3.1&gt; 创建 Binder 对象</span></span><br /><span class="line">    Binder binder = <span class="keyword">new</span> Binder(configurationPropertySources, <span class="keyword">new</span> PropertySourcesPlaceholdersResolver(propertySources));</span><br /><span class="line">    <span class="comment">// Get BindHandler</span></span><br /><span class="line">    <span class="comment">// &lt;3.2&gt; 获得 BindHandler 对象</span></span><br /><span class="line">    BindHandler bindHandler = getBindHandler();</span><br /><span class="line">    <span class="comment">// Bind</span></span><br /><span class="line">    <span class="comment">// &lt;3.3&gt; 执行绑定，会将 propertySources 属性，注入到 dubboConfig 对象中</span></span><br /><span class="line">    binder.bind(prefix, bindable, bindHandler);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>AbstractDubboConfigBinder 属于 Dubbo 项目本身，所以本文就不解析逻。</li>
<li><code>&lt;1.1&gt;</code>&nbsp;处，调用父类的&nbsp;<code>#getPropertySources()</code>&nbsp;方法，获得 PropertySource 数组。</li>
<li><code>&lt;1.2&gt;</code>&nbsp;处，调用&nbsp;<code>ConfigurationPropertySources#from(Iterable&lt;PropertySource&lt;?&gt;&gt; sources)</code>&nbsp;方法，转换成 ConfigurationPropertySource 数组。上述两个变量的值，如下图所示：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/07.jpg" alt="&#96;configurationPropertySources&#96; 属性" /></li>
<li><code>&lt;2&gt;</code>&nbsp;处，调用&nbsp;<code>Bindable#ofInstance(T instance)</code>&nbsp;方法，将&nbsp;<code>dubboConfig</code>&nbsp;包装成 Bindable 对象。</li>
<li><code>&lt;3.1&gt;</code>&nbsp;处，创建 Binder 对象。</li>
<li>
<p><code>&lt;3.2&gt;</code>&nbsp;处，调用&nbsp;<code>#getBindHandler()</code>&nbsp;方法，获得 BindHandler 对象。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// RelaxedDubboConfigBinder.java</span></span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> BindHandler <span class="title">getBindHandler</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="comment">// 获得默认的 BindHandler 处理器</span></span><br /><span class="line">    BindHandler handler = BindHandler.DEFAULT;</span><br /><span class="line">    <span class="comment">// 进一步包装成 IgnoreErrorsBindHandler 对象</span></span><br /><span class="line">    <span class="keyword">if</span> (isIgnoreInvalidFields()) {</span><br /><span class="line">        handler = <span class="keyword">new</span> IgnoreErrorsBindHandler(handler);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 进一步包装成 NoUnboundElementsBindHandler 对象</span></span><br /><span class="line">    <span class="keyword">if</span> (!isIgnoreUnknownFields()) {</span><br /><span class="line">        UnboundElementsSourceFilter filter = <span class="keyword">new</span> UnboundElementsSourceFilter();</span><br /><span class="line">        handler = <span class="keyword">new</span> NoUnboundElementsBindHandler(handler, filter);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> handler;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p>关于 BindHandler 类，胖友不用深究，只要知道如下即可。</p>
<blockquote>
<p>有时候，绑定时可能需要实现额外的逻辑，而BindHandler接口提供了一个很好的方法来实现这一点。 每个BindHandler都可以实现onStart，onSuccess，onFailure和onFinish方法来覆盖行为。</p>
<p>Spring Boot提供了一些处理程序，主要用于支持现有的@ConfigurationProperties绑定。 例如，ValidationBindHandler可用于对绑定对象应用Validator验证。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><code>&lt;3.3&gt;</code>&nbsp;处，调用&nbsp;<code>Binder#bind(String name, Bindable&lt;T&gt; target, BindHandler handler)</code>&nbsp;方法，将配置中，指定前缀（<code>prefix</code>）的属性，注入到 AbstractConfig 配置对象中。例如下图：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/08.jpg" alt="&#96;dubboConfig&#96; 属性" /></p>
</li>
</ul>
<blockquote>
<p>如下开始，是&nbsp;<code>env</code>&nbsp;包下。</p>
</blockquote>
<h2 id="4-3-DubboDefaultPropertiesEnvironmentPostProcessor">4.3 DubboDefaultPropertiesEnvironmentPostProcessor</h2>
<p><code>com.alibaba.boot.dubbo.env.DubboDefaultPropertiesEnvironmentPostProcessor</code>&nbsp;，实现 EnvironmentPostProcessor、Ordered 接口，生成 Dubbo 默认的配置，添加到&nbsp;<code>environment</code>&nbsp;中。而需要生成的 Dubbo 默认的配置如下：</p>
<figure class="highlight plain">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"># 直接复用 spring.application.name</span><br /><span class="line">dubbo.application.name=</span><br /><span class="line"># 默认为 true</span><br /><span class="line">dubbo.config.multiple=true</span><br /><span class="line"># 默认为 false</span><br /><span class="line">dubbo.config.qos-enable=false</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>因此，我们只要配置了&nbsp;<code>"spring.application.name"</code>&nbsp;的属性，<code>"dubbo.application.name"</code>&nbsp;就会自动生成。</li>
</ul>
<h3 id="4-3-1-postProcessEnvironment">4.3.1 postProcessEnvironment</h3>
<p>实现&nbsp;<code>#postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application)</code>&nbsp;方法，自动生成 Dubbo 默认配置。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboDefaultPropertiesEnvironmentPostProcessor.java</span></span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessEnvironment</span><span class="params">(ConfigurableEnvironment environment, SpringApplication application)</span> </span>{</span><br /><span class="line">    MutablePropertySources propertySources = environment.getPropertySources();</span><br /><span class="line">    <span class="comment">// &lt;1&gt; 生成 Dubbo 默认配置</span></span><br /><span class="line">    Map&lt;String, Object&gt; defaultProperties = createDefaultProperties(environment);</span><br /><span class="line">    <span class="comment">// &lt;2&gt; 有默认配置，则添加到 environment 中</span></span><br /><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(defaultProperties)) {</span><br /><span class="line">        addOrReplace(propertySources, defaultProperties);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>&lt;1&gt;</code>&nbsp;处，调用&nbsp;<code>#createDefaultProperties(ConfigurableEnvironment environment)</code>&nbsp;方法，生成 Dubbo 默认配置。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboDefaultPropertiesEnvironmentPostProcessor.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * The property name of Spring Application</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@see</span> ContextIdApplicationContextInitializer</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPRING_APPLICATION_NAME_PROPERTY = <span class="string">"spring.application.name"</span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * The property name of {<span class="doctag">@link</span> ApplicationConfig}</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@see</span> EnableDubboConfig</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@see</span> EnableDubboConfigBinding</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DUBBO_APPLICATION_NAME_PROPERTY = <span class="string">"dubbo.application.name"</span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * The property name of {<span class="doctag">@link</span> EnableDubboConfig#multiple() <span class="doctag">@EnableDubboConfig</span>.multiple()}</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DUBBO_CONFIG_MULTIPLE_PROPERTY = <span class="string">"dubbo.config.multiple"</span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * The property name of {<span class="doctag">@link</span> ApplicationConfig#getQosEnable() application's QOS enable}</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DUBBO_APPLICATION_QOS_ENABLE_PROPERTY = <span class="string">"dubbo.application.qos-enable"</span>;</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">createDefaultProperties</span><span class="params">(ConfigurableEnvironment environment)</span> </span>{</span><br /><span class="line">    Map&lt;String, Object&gt; defaultProperties = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br /><span class="line">    <span class="comment">// "dubbo.application.name"</span></span><br /><span class="line">    setDubboApplicationNameProperty(environment, defaultProperties);</span><br /><span class="line">    <span class="comment">// "dubbo.config.multiple"</span></span><br /><span class="line">    setDubboConfigMultipleProperty(defaultProperties);</span><br /><span class="line">    <span class="comment">// "dubbo.application.qos-enable"</span></span><br /><span class="line">    setDubboApplicationQosEnableProperty(defaultProperties);</span><br /><span class="line">    <span class="keyword">return</span> defaultProperties;</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setDubboApplicationNameProperty</span><span class="params">(Environment environment, Map&lt;String, Object&gt; defaultProperties)</span> </span>{</span><br /><span class="line">    String springApplicationName = environment.getProperty(SPRING_APPLICATION_NAME_PROPERTY);</span><br /><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(springApplicationName)</span><br /><span class="line">            &amp;&amp; !environment.containsProperty(DUBBO_APPLICATION_NAME_PROPERTY)) {</span><br /><span class="line">        defaultProperties.put(DUBBO_APPLICATION_NAME_PROPERTY, springApplicationName);</span><br /><span class="line">    }</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setDubboConfigMultipleProperty</span><span class="params">(Map&lt;String, Object&gt; defaultProperties)</span> </span>{</span><br /><span class="line">    defaultProperties.put(DUBBO_CONFIG_MULTIPLE_PROPERTY, Boolean.TRUE.toString());</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setDubboApplicationQosEnableProperty</span><span class="params">(Map&lt;String, Object&gt; defaultProperties)</span> </span>{</span><br /><span class="line">    defaultProperties.put(DUBBO_APPLICATION_QOS_ENABLE_PROPERTY, Boolean.FALSE.toString());</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>虽然比较长，但是比较简单。</li>
</ul>
</li>
<li>
<p><code>&lt;2&gt;</code>&nbsp;处，有 Dubbo 默认配置，则添加到&nbsp;<code>environment</code>&nbsp;中。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboDefaultPropertiesEnvironmentPostProcessor.java</span></span><br /><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROPERTY_SOURCE_NAME = <span class="string">"defaultProperties"</span>;</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addOrReplace</span><span class="params">(MutablePropertySources propertySources, Map&lt;String, Object&gt; map)</span> </span>{</span><br /><span class="line">    <span class="comment">// 情况一，获得到 "defaultProperties" 对应的 PropertySource 对象，则进行替换</span></span><br /><span class="line">    MapPropertySource target = <span class="keyword">null</span>;</span><br /><span class="line">    <span class="keyword">if</span> (propertySources.contains(PROPERTY_SOURCE_NAME)) {</span><br /><span class="line">        PropertySource&lt;?&gt; source = propertySources.get(PROPERTY_SOURCE_NAME);</span><br /><span class="line">        <span class="keyword">if</span> (source <span class="keyword">instanceof</span> MapPropertySource) { <span class="comment">// 找到</span></span><br /><span class="line">            target = (MapPropertySource) source;</span><br /><span class="line">            <span class="comment">// 遍历 map 数组，进行替换到 "defaultProperties" 中</span></span><br /><span class="line">            <span class="keyword">for</span> (String key : map.keySet()) {</span><br /><span class="line">                <span class="keyword">if</span> (!target.containsProperty(key)) {</span><br /><span class="line">                    target.getSource().put(key, map.get(key));</span><br /><span class="line">                }</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 情况二，不存在 "defaultProperties" 对应的 PropertySource 对象，则进行添加</span></span><br /><span class="line">    <span class="keyword">if</span> (target == <span class="keyword">null</span>) {</span><br /><span class="line">        target = <span class="keyword">new</span> MapPropertySource(PROPERTY_SOURCE_NAME, map);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">if</span> (!propertySources.contains(PROPERTY_SOURCE_NAME)) {</span><br /><span class="line">        propertySources.addLast(target);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>分成两种情况，也比较简单。胖友自己瞅瞅~</li>
</ul>
</li>
</ul>
<blockquote>
<p>如下开始，是&nbsp;<code>context.event</code>&nbsp;包下。</p>
</blockquote>
<h2 id="4-4-WelcomeLogoApplicationListener">4.4 WelcomeLogoApplicationListener</h2>
<p><code>com.alibaba.boot.dubbo.context.event.WelcomeLogoApplicationListener</code>&nbsp;，实现 ApplicationListener 接口，处理 ApplicationEnvironmentPreparedEvent 事件，从而打印 Dubbo Banner 文本。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// WelcomeLogoApplicationListener.java</span></span><br /><br /><span class="line"><span class="meta">@Order</span>(LoggingApplicationListener.DEFAULT_ORDER + <span class="number">1</span>)</span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeLogoApplicationListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEnvironmentPreparedEvent</span>&gt; </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 是否执行过</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 通过该变量，保证有且仅处理一次 ApplicationEnvironmentPreparedEvent 事件</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicBoolean processed = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEnvironmentPreparedEvent event)</span> </span>{</span><br /><span class="line">        <span class="comment">// Skip if processed before, prevent duplicated execution in Hierarchical ApplicationContext</span></span><br /><span class="line">        <span class="comment">// 如果已经处理，则直接跳过</span></span><br /><span class="line">        <span class="keyword">if</span> (processed.get()) {</span><br /><span class="line">            <span class="keyword">return</span>;</span><br /><span class="line">        }</span><br /><br /><span class="line">        <span class="comment">// 获得 Logger 对象</span></span><br /><span class="line">        <span class="comment">/**</span></span><br /><span class="line"><span class="comment">         * Gets Logger After LoggingSystem configuration ready</span></span><br /><span class="line"><span class="comment">         * <span class="doctag">@see</span> LoggingApplicationListener</span></span><br /><span class="line"><span class="comment">         */</span></span><br /><span class="line">        <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br /><br /><span class="line">        <span class="comment">// 获得 Dubbo Banner 文本</span></span><br /><span class="line">        String bannerText = buildBannerText();</span><br /><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) {</span><br /><span class="line">            logger.info(bannerText);</span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            System.out.print(bannerText);</span><br /><span class="line">        }</span><br /><br /><span class="line">        <span class="comment">// mark processed to be true</span></span><br /><span class="line">        <span class="comment">// 标记已执行</span></span><br /><span class="line">        processed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>);</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="function">String <span class="title">buildBannerText</span><span class="params">()</span> </span>{</span><br /><span class="line">        StringBuilder bannerTextBuilder = <span class="keyword">new</span> StringBuilder();</span><br /><span class="line">        bannerTextBuilder</span><br /><span class="line">                .append(LINE_SEPARATOR)</span><br /><span class="line">                .append(LINE_SEPARATOR)</span><br /><span class="line">                .append(<span class="string">" :: Dubbo Spring Boot (v"</span>).append(Version.getVersion(getClass(), <span class="string">"1.0.0"</span>)).append(<span class="string">") : "</span>)</span><br /><span class="line">                .append(DUBBO_SPRING_BOOT_GITHUB_URL)</span><br /><span class="line">                .append(LINE_SEPARATOR)</span><br /><span class="line">                .append(<span class="string">" :: Dubbo (v"</span>).append(Version.getVersion()).append(<span class="string">") : "</span>)</span><br /><span class="line">                .append(DUBBO_GITHUB_URL)</span><br /><span class="line">                .append(LINE_SEPARATOR)</span><br /><span class="line">                .append(<span class="string">" :: Discuss group : "</span>)</span><br /><span class="line">                .append(DUBBO_MAILING_LIST)</span><br /><span class="line">                .append(LINE_SEPARATOR);</span><br /><span class="line">        <span class="keyword">return</span> bannerTextBuilder.toString();</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>简单，就不多做解释了。</li>
</ul>
<h2 id="4-5-OverrideDubboConfigApplicationListener">4.5 OverrideDubboConfigApplicationListener</h2>
<p><code>com.alibaba.boot.dubbo.context.event.OverrideDubboConfigApplicationListener</code>&nbsp;，实现 ApplicationListener 接口，也是处理 ApplicationEnvironmentPreparedEvent 事件，根据&nbsp;<code>"dubbo.config.override"</code>&nbsp;的属性值，若为&nbsp;<code>true</code>&nbsp;时，则覆盖&nbsp;<code>environment</code>&nbsp;中&nbsp;<code>"dubbo."</code>&nbsp;开头的配置，添加到 Dubbo Properties 对象中。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// OverrideDubboConfigApplicationListener.java</span></span><br /><br /><span class="line"><span class="meta">@Order</span> <span class="comment">// LOWEST_PRECEDENCE Make sure last execution</span></span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverrideDubboConfigApplicationListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEnvironmentPreparedEvent</span>&gt; </span>{</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEnvironmentPreparedEvent event)</span> </span>{</span><br /><span class="line">        <span class="comment">// 获得 Logger 对象</span></span><br /><span class="line">        <span class="comment">/**</span></span><br /><span class="line"><span class="comment">         * Gets Logger After LoggingSystem configuration ready</span></span><br /><span class="line"><span class="comment">         * <span class="doctag">@see</span> LoggingApplicationListener</span></span><br /><span class="line"><span class="comment">         */</span></span><br /><span class="line">        <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br /><br /><span class="line">        <span class="comment">// &lt;1&gt; 获得 "dubbo.config.override" 属性对应的值。默认情况下为 true</span></span><br /><span class="line">        ConfigurableEnvironment environment = event.getEnvironment();</span><br /><span class="line">        <span class="keyword">boolean</span> override = environment.getProperty(OVERRIDE_CONFIG_PROPERTY_NAME, <span class="keyword">boolean</span>.class, DEFAULT_OVERRIDE_CONFIG_PROPERTY_VALUE);</span><br /><span class="line">        <span class="comment">// &lt;2&gt; 如果要重写，则覆盖添加到 Dubbo Properties 中</span></span><br /><span class="line">        <span class="keyword">if</span> (override) {</span><br /><span class="line">            <span class="comment">// &lt;2.1&gt; 从 environment 中，提取 "dubbo." 开头的配置</span></span><br /><span class="line">            SortedMap&lt;String, Object&gt; dubboProperties = filterDubboProperties(environment);</span><br /><span class="line">            <span class="comment">// &lt;2.2&gt; 添加到 Dubbo Properties 中</span></span><br /><span class="line">            ConfigUtils.getProperties().putAll(dubboProperties);</span><br /><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) {</span><br /><span class="line">                logger.info(<span class="string">"Dubbo Config was overridden by externalized configuration {}"</span>, dubboProperties);</span><br /><span class="line">            }</span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) {</span><br /><span class="line">                logger.info(<span class="string">"Disable override Dubbo Config caused by property {} = {}"</span>, OVERRIDE_CONFIG_PROPERTY_NAME, override);</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>&lt;1&gt;</code>&nbsp;处，获得&nbsp;<code>"dubbo.config.override"</code>&nbsp;属性对应的值。默认情况下为&nbsp;<code>true</code>&nbsp;。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboUtils.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * The property name of override Dubbo config</span></span><br /><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br /><span class="line"><span class="comment"> * The default value is {<span class="doctag">@link</span> #DEFAULT_OVERRIDE_CONFIG_PROPERTY_VALUE}</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OVERRIDE_CONFIG_PROPERTY_NAME = DUBBO_CONFIG_PREFIX + PROPERTY_NAME_SEPARATOR + <span class="string">"override"</span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * The default property value of  override Dubbo config</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEFAULT_OVERRIDE_CONFIG_PROPERTY_VALUE = <span class="keyword">true</span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p><code>&lt;2&gt;</code>&nbsp;处，如果要重写，则覆盖添加到 Dubbo Properties 中。</p>
</li>
<li>
<p><code>&lt;2.1&gt;</code>&nbsp;处，调用&nbsp;<code>DubboUtils#filterDubboProperties(ConfigurableEnvironment environment)</code>&nbsp;方法，从&nbsp;<code>environment</code>&nbsp;中，提取&nbsp;<code>"dubbo."</code>&nbsp;开头的配置。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboUtils.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * The separator of property name</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROPERTY_NAME_SEPARATOR = <span class="string">"."</span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * The prefix of property name of Dubbo</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DUBBO_PREFIX = <span class="string">"dubbo"</span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Filters Dubbo Properties from {<span class="doctag">@link</span> ConfigurableEnvironment}</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> environment {<span class="doctag">@link</span> ConfigurableEnvironment}</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@return</span> Read-only SortedMap</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SortedMap&lt;String, Object&gt; <span class="title">filterDubboProperties</span><span class="params">(ConfigurableEnvironment environment)</span> </span>{</span><br /><span class="line">    SortedMap&lt;String, Object&gt; dubboProperties = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br /><span class="line">    <span class="comment">// 获得所有的配置</span></span><br /><span class="line">    Map&lt;String, Object&gt; properties = EnvironmentUtils.extractProperties(environment);</span><br /><span class="line">    <span class="comment">// 遍历配置，如果以 "dubbo." 开头，则添加到 dubboProperties 中</span></span><br /><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : properties.entrySet()) {</span><br /><span class="line">        String propertyName = entry.getKey();</span><br /><span class="line">        <span class="keyword">if</span> (propertyName.startsWith(DUBBO_PREFIX + PROPERTY_NAME_SEPARATOR)</span><br /><span class="line">                &amp;&amp; entry.getValue() != <span class="keyword">null</span>) {</span><br /><span class="line">            dubboProperties.put(propertyName, entry.getValue().toString());</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 返回 dubboProperties</span></span><br /><span class="line">    <span class="keyword">return</span> Collections.unmodifiableSortedMap(dubboProperties);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>其中，<code>EnvironmentUtils#extractProperties(ConfigurableEnvironment environment)</code>&nbsp;方法，获得所有的配置。考虑到篇幅就不赘述，艿艿已经添加注释，点击&nbsp;<a href="https://github.com/YunaiV/incubator-dubbo-spring-boot-project/blob/master/dubbo-spring-boot-autoconfigure/src/main/java/com/alibaba/boot/dubbo/util/EnvironmentUtils.java" target="_blank" rel="external nofollow noopener noreferrer">链接</a>&nbsp;查看。</li>
</ul>
</li>
<li>
<p><code>&lt;2.2&gt;</code>&nbsp;处，调用 Dubbo 的&nbsp;<code>ConfigUtils#getProperties()</code>&nbsp;方法，获得 Dubbo Properties 。然后再将&nbsp;<code>dubboProperties</code>&nbsp;变量，添加到 Dubbo Properties 中。</p>
</li>
</ul>
<h2 id="4-6-AwaitingNonWebApplicationListener">4.6 AwaitingNonWebApplicationListener</h2>
<p><code>com.alibaba.boot.dubbo.context.event.AwaitingNonWebApplicationListener</code>&nbsp;，实现 SmartApplicationListener 接口，实现在非 Web 的环境下，提供 JVM 不退出关闭的功能，即 JVM 一直运行着。</p>
<blockquote>
<p>胖友可以试试，启动一个非 Web 环境的 Spring Boot 应用，然后会发现，JVM 会在启动完 Spring Boot 应用后，自动关闭。</p>
</blockquote>
<h3 id="4-6-1-supportsEventType">4.6.1 supportsEventType</h3>
<p>实现&nbsp;<code>#supportsEventType(Class&lt;? extends ApplicationEvent&gt; eventType)</code>&nbsp;方法，判断支持的事件类型是 ApplicationReadyEvent 和 ContextClosedEvent 。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AwaitingNonWebApplicationListener.java</span></span><br /><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;? extends ApplicationEvent&gt;[] SUPPORTED_APPLICATION_EVENTS =</span><br /><span class="line">        of(ApplicationReadyEvent.class, ContextClosedEvent.class);</span><br />        <br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsEventType</span><span class="params">(Class&lt;? extends ApplicationEvent&gt; eventType)</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> ObjectUtils.containsElement(SUPPORTED_APPLICATION_EVENTS, eventType);</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T[] of(T... values) {</span><br /><span class="line">    <span class="keyword">return</span> values;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>为什么呢，我们接着往下看。</li>
</ul>
<h3 id="4-6-2-supportsSourceType">4.6.2 supportsSourceType</h3>
<p>实现&nbsp;<code>#supportsSourceType(Class&lt;?&gt; sourceType)</code>&nbsp;方法，判断支持的事件来源。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AwaitingNonWebApplicationListener.java</span></span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsSourceType</span><span class="params">(Class&lt;?&gt; sourceType)</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>全部返回&nbsp;<code>true</code>&nbsp;，意味支持所有的事件来源。</li>
</ul>
<h3 id="4-6-3-onApplicationEvent">4.6.3 onApplicationEvent</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AwaitingNonWebApplicationListener.java</span></span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>{</span><br /><span class="line">    <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationReadyEvent) {</span><br /><span class="line">        onApplicationReadyEvent((ApplicationReadyEvent) event); <span class="comment">// &lt;1&gt;</span></span><br /><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ContextClosedEvent) {</span><br /><span class="line">        onContextClosedEvent((ContextClosedEvent) event); <span class="comment">// &lt;2&gt;</span></span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>&lt;1&gt;</code>&nbsp;处，当是 ApplicationReadyEvent 事件时，调用&nbsp;<code>#onApplicationReadyEvent(ApplicationReadyEvent event)</code>&nbsp;方法，处理 ApplicationReadyEvent 事件。详细解析，见&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-Externalized/">「4.6.3.1 onApplicationReadyEvent」</a>&nbsp;。</li>
<li><code>&lt;2&gt;</code>&nbsp;处，当是 ContextClosedEvent 事件时，调用&nbsp;<code>#onApplicationReadyEvent(ContextClosedEvent event)</code>&nbsp;方法，处理 ApplicationReadyEvent 事件。详细解析，见&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-Externalized/">「4.6.3.2 onContextClosedEvent」</a>&nbsp;。</li>
</ul>
<h4 id="4-6-3-1-onApplicationReadyEvent">4.6.3.1 onApplicationReadyEvent</h4>
<p><code>#onApplicationReadyEvent(ApplicationReadyEvent event)</code>&nbsp;方法，处理 ApplicationReadyEvent 事件。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AwaitingNonWebApplicationListener.java</span></span><br /><br /><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onApplicationReadyEvent</span><span class="params">(ApplicationReadyEvent event)</span> </span>{</span><br /><span class="line">    <span class="comment">// &lt;1&gt; 如果是 Web 环境，则直接返回</span></span><br /><span class="line">    <span class="keyword">final</span> SpringApplication springApplication = event.getSpringApplication();</span><br /><span class="line">    <span class="keyword">if</span> (!WebApplicationType.NONE.equals(springApplication.getWebApplicationType())) {</span><br /><span class="line">        <span class="keyword">return</span>;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// &lt;2&gt; 启动一个用户线程，从而实现等待</span></span><br /><span class="line">    await();</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>&lt;1&gt;</code>&nbsp;处，如果是 Web 环境，则直接返回。因为，已经提供了 JVM 不退出关闭的功能。</li>
<li>
<p><code>&lt;2&gt;</code>&nbsp;处，调用&nbsp;<code>#await()</code>&nbsp;方法，启动一个用户线程，从而实现等待。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AwaitingNonWebApplicationListener.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 是否已经等待完成</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicBoolean awaited = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br /><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br /><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition condition = lock.newCondition();</span><br /><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br /><br /><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="comment">// has been waited, return immediately</span></span><br /><span class="line">    <span class="comment">// 如果已经处于阻塞等待，直接返回</span></span><br /><span class="line">    <span class="keyword">if</span> (awaited.get()) {</span><br /><span class="line">        <span class="keyword">return</span>;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="comment">// 创建任务，实现阻塞</span></span><br /><span class="line">    executorService.execute(() -&gt; executeMutually(() -&gt; {</span><br /><span class="line">        <span class="keyword">while</span> (!awaited.get()) {</span><br /><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) {</span><br /><span class="line">                logger.info(<span class="string">" [Dubbo] Current Spring Boot Application is await..."</span>);</span><br /><span class="line">            }</span><br /><span class="line">            <span class="keyword">try</span> {</span><br /><span class="line">                condition.await();</span><br /><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br /><span class="line">                Thread.currentThread().interrupt();</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">    }));</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeMutually</span><span class="params">(Runnable runnable)</span> </span>{</span><br /><span class="line">    <span class="keyword">try</span> {</span><br /><span class="line">        lock.lock();</span><br /><span class="line">        <span class="comment">// &lt;X&gt; 执行 Runnable</span></span><br /><span class="line">        runnable.run();</span><br /><span class="line">    } <span class="keyword">finally</span> {</span><br /><span class="line">        lock.unlock();</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>基于 Lock + Condition 实现等待通知。</li>
<li><code>#executeMutually(Runnable runnable)</code>&nbsp;方法，被&nbsp;<code>executorService</code>&nbsp;创建任务所调用。而该任务因为调用&nbsp;<code>Condition#await()</code>&nbsp;方法，阻塞等待。那么此时，JVM 至少有一个该用户线程未运行结束，那么此时&nbsp;<a href="https://blog.csdn.net/hongxingxiaonan/article/details/50528041" target="_blank" rel="external nofollow noopener noreferrer">JVM 关闭的条件</a>&nbsp;不被满足，所以就不会退出。</li>
</ul>
</li>
</ul>
<h4 id="4-6-3-2-onApplicationReadyEvent">4.6.3.2 onApplicationReadyEvent</h4>
<p><code>#onApplicationReadyEvent(ContextClosedEvent event)</code>&nbsp;方法，处理 ContextClosedEvent 事件。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AwaitingNonWebApplicationListener.java</span></span><br /><br /><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onContextClosedEvent</span><span class="params">(ContextClosedEvent event)</span> </span>{</span><br /><span class="line">    <span class="comment">// &lt;1&gt; 释放</span></span><br /><span class="line">    release();</span><br /><span class="line">    <span class="comment">// &lt;2&gt; 关闭线程池</span></span><br /><span class="line">    shutdown();</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>&lt;1&gt;</code>&nbsp;处，调用&nbsp;<code>#release()</code>&nbsp;方法，进行释放。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AwaitingNonWebApplicationListener.java</span></span><br /><br /><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>{</span><br /><span class="line">    executeMutually(() -&gt; {</span><br /><span class="line">        <span class="comment">// CAS 设置 awaited 为 true</span></span><br /><span class="line">        <span class="keyword">while</span> (awaited.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) {</span><br /><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) {</span><br /><span class="line">                logger.info(<span class="string">" [Dubbo] Current Spring Boot Application is about to shutdown..."</span>);</span><br /><span class="line">            }</span><br /><span class="line">            <span class="comment">// 通知 Condition</span></span><br /><span class="line">            condition.signalAll();</span><br /><span class="line">        }</span><br /><span class="line">    });</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>通过调用&nbsp;<code>Condition#signalAll()</code>&nbsp;方法，通知 Condition 。从而在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-Externalized/">「4.6.3.1 onApplicationReadyEvent」</a>中，启动的线程的阻塞，进行停止。</li>
</ul>
</li>
<li>
<p><code>&lt;2&gt;</code>&nbsp;处，调用&nbsp;<code>#shutdown()</code>&nbsp;方法，关闭线程池。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AwaitingNonWebApplicationListener.java</span></span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="keyword">if</span> (!executorService.isShutdown()) {</span><br /><span class="line">        <span class="comment">// Shutdown executorService</span></span><br /><span class="line">        executorService.shutdown();</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<h1 id="5-dubbo-spring-boot-actuator-源码">5.&nbsp;<code>dubbo-spring-boot-actuator</code>&nbsp;源码</h1>
<p><code>dubbo-spring-boot-autoconfigure</code>&nbsp;模块，所有类如下图：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/09.jpg" alt="&#96;dubbo-spring-boot-autoconfigure&#96; 模块" /></p>
<h2 id="5-1-使用指南">5.1 使用指南</h2>
<p>使用时，需要导入&nbsp;<code>dubbo-spring-boot-actuator</code>&nbsp;依赖。即如下：</p>
<figure class="highlight xml">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">&lt;!-- 导入 WEB 环境 --&gt;</span></span><br /><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br /><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br /><br /><span class="line"><span class="comment">&lt;!-- 导入 Spring Boot Actuator --&gt;</span></span><br /><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br /><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br /><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br /><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br /><br /><span class="line"><span class="comment">&lt;!-- 导入 Dubbo Spring Boot Actuator --&gt;</span></span><br /><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br /><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p>观看本小节，胖友需要对 Spring Boot Actuator 有相关的了解。如果不知道，可以看看&nbsp;<a href="http://www.iocoder.cn/Spring-Boot/battcn/v2-actuator-introduce/" target="_blank" rel="external nofollow noopener noreferrer">《一起来学 SpringBoot 2.x | 第十四篇：强大的 Actuator 服务监控与管理》</a>&nbsp;文章。</p>
<p>另外，<a href="https://github.com/apache/incubator-dubbo-spring-boot-project/tree/master/dubbo-spring-boot-actuator" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 官方文档 &mdash;&mdash; Dubbo Spring Boot Production-Ready》</a>&nbsp;文章，也是需要先瞅瞅的。</p>
<p>如果胖友使用的是 Spring Boot 2，有一个坑要注意，因为&nbsp;<a href="https://blog.csdn.net/qq_20367813/article/details/79154981" target="_blank" rel="external nofollow noopener noreferrer">《Spring Boot 2.0 的 Actuator 只暴露 health 和 info》</a>&nbsp;，所以需要手动在配置文件中，添加要开启的 Dubbo Endpoint 。例如：</p>
<figure class="highlight plain">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"># application.properties</span><br /><br /><span class="line">management.endpoints.web.exposure.include=health,info,dubbo,dubboconfigs</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>此时，我们多开启了&nbsp;<code>dubbo</code>&nbsp;和&nbsp;<code>dubboconfigs</code>&nbsp;这两个 EndPoint 。T T 坑了自己好久~</li>
</ul>
<blockquote>
<p>如下开始，是&nbsp;<code>autoconfigure</code>&nbsp;包下。</p>
</blockquote>
<h2 id="5-2-DubboEndpointsAutoConfiguration">5.2 DubboEndpointsAutoConfiguration</h2>
<p><code>com.alibaba.boot.dubbo.actuate.autoconfigure.DubboEndpointsAutoConfiguration</code>&nbsp;，Dubbo Endpoint 自动配置类。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboEndpointsAutoConfiguration.java</span></span><br /><br /><span class="line"><span class="meta">@Configuration</span></span><br /><span class="line"><span class="meta">@PropertySource</span>(</span><br /><span class="line">        name = <span class="string">"Dubbo Endpoints Default Properties"</span>,</span><br /><span class="line">        value = <span class="string">"classpath:/META-INF/dubbo-endpoins-default.properties"</span>) <span class="comment">// 导入该配置文件</span></span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboEndpointsAutoConfiguration</span> </span>{</span><br /><br /><span class="line">    <span class="meta">@Bean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnEnabledEndpoint</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> DubboEndpoint <span class="title">dubboEndpoint</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DubboEndpoint();</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Bean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnEnabledEndpoint</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> DubboConfigsMetadataEndpoint <span class="title">dubboConfigsMetadataEndpoint</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DubboConfigsMetadataEndpoint();</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Bean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnEnabledEndpoint</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> DubboPropertiesEndpoint <span class="title">dubboPropertiesEndpoint</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DubboPropertiesEndpoint();</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Bean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnEnabledEndpoint</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> DubboReferencesMetadataEndpoint <span class="title">dubboReferencesMetadataEndpoint</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DubboReferencesMetadataEndpoint();</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Bean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnEnabledEndpoint</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> DubboServicesMetadataEndpoint <span class="title">dubboServicesMetadataEndpoint</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DubboServicesMetadataEndpoint();</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Bean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnEnabledEndpoint</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> DubboShutdownEndpoint <span class="title">dubboShutdownEndpoint</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DubboShutdownEndpoint();</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>每个方法，创建一个 Dubbo Endpint Bean 。一共有 6 个。</li>
<li><code>@PropertySource</code>&nbsp;注解，导入&nbsp;<code>"classpath:/META-INF/dubbo-endpoins-default.properties"</code>&nbsp;配置文件。代码如下：
<figure class="highlight plain">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"># dubbo-endpoins-default.properties</span><br /><br /><span class="line"># Dubbo Endpoints Default Properties is loaded by @PropertySource with low order,</span><br /><span class="line"># those values of properties can be override by higher PropertySource</span><br /><span class="line"># @see DubboEndpointsAutoConfiguration</span><br /><br /><span class="line"># Set enabled for Dubbo Endpoints 设置 Dubbo Endpoints 是否开启</span><br /><span class="line">management.endpoint.dubbo.enabled = true</span><br /><span class="line">management.endpoint.dubboshutdown.enabled = false</span><br /><span class="line">management.endpoint.dubboconfigs.enabled = true</span><br /><span class="line">management.endpoint.dubboservices.enabled = false</span><br /><span class="line">management.endpoint.dubboreferences.enabled = false</span><br /><span class="line">management.endpoint.dubboproperties.enabled = true</span><br /><br /><span class="line"># "management.endpoints.web.base-path" should not be configured in this file</span><br /><br /><span class="line"># Re-defines path-mapping of Dubbo Web Endpoints 重命名 Dubbo Web Endpoints 路径</span><br /><span class="line">management.endpoints.web.path-mapping.dubboshutdown = dubbo/shutdown</span><br /><span class="line">management.endpoints.web.path-mapping.dubboconfigs = dubbo/configs</span><br /><span class="line">management.endpoints.web.path-mapping.dubboservices = dubbo/services</span><br /><span class="line">management.endpoints.web.path-mapping.dubboreferences = dubbo/references</span><br /><span class="line">management.endpoints.web.path-mapping.dubboproperties = dubbo/properties</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<h2 id="5-3-DubboHealthIndicatorAutoConfiguration">5.3 DubboHealthIndicatorAutoConfiguration</h2>
<p><code>com.alibaba.boot.dubbo.actuate.autoconfigure.DubboHealthIndicatorAutoConfiguration</code>&nbsp;，Dubbo Health Indicator 自动配置类。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboHealthIndicatorAutoConfiguration.java</span></span><br /><br /><span class="line"><span class="meta">@Configuration</span></span><br /><span class="line"><span class="meta">@ConditionalOnClass</span>({HealthIndicator.class}) <span class="comment">// 存在 HealthIndicator 类的情况</span></span><br /><span class="line"><span class="meta">@AutoConfigureBefore</span>({EndpointAutoConfiguration.class}) <span class="comment">// 在 EndpointAutoConfiguration 自动配置类之前初始化</span></span><br /><span class="line"><span class="meta">@AutoConfigureAfter</span>(DubboAutoConfiguration.class) <span class="comment">// 在 DubboAutoConfiguration 自动配置类之后初始化</span></span><br /><span class="line"><span class="meta">@ConditionalOnEnabledHealthIndicator</span>(<span class="string">"dubbo"</span>)</span><br /><span class="line"><span class="meta">@EnableConfigurationProperties</span>(DubboHealthIndicatorProperties.class) <span class="comment">// 自动配置 DubboHealthIndicatorProperties 类</span></span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboHealthIndicatorAutoConfiguration</span> </span>{</span><br /><br /><span class="line">    <span class="meta">@Bean</span></span><br /><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> DubboHealthIndicator <span class="title">dubboHealthIndicator</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DubboHealthIndicator();</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>每个注解，看后面的代码注释。</li>
<li>唯一的方法，创建 DubboHealthIndicator Bean 对象。详细解析，见&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-Externalized/">「5.5 DubboHealthIndicator」</a>&nbsp;。</li>
</ul>
<h2 id="5-4-DubboHealthIndicatorProperties">5.4 DubboHealthIndicatorProperties</h2>
<p><code>com.alibaba.boot.dubbo.actuate.health.DubboHealthIndicatorProperties</code>&nbsp;，Dubbo Health Indicator Properties 类。代码代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboHealthIndicatorProperties.java</span></span><br /><br /><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = PREFIX, ignoreUnknownFields = <span class="keyword">false</span>) <span class="comment">// "management.health.dubbo" 开头的配置</span></span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboHealthIndicatorProperties</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * The prefix of {<span class="doctag">@link</span> DubboHealthIndicatorProperties}</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">"management.health.dubbo"</span>;</span><br /><br /><span class="line">    <span class="keyword">private</span> Status status = <span class="keyword">new</span> Status();</span><br /><br /><span class="line">    <span class="comment">// ... 省略 setting/getting 方法</span></span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * The nested class for {<span class="doctag">@link</span> StatusChecker}'s names</span></span><br /><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br /><span class="line"><span class="comment">     * registry=com.alibaba.dubbo.registry.status.RegistryStatusChecker</span></span><br /><span class="line"><span class="comment">     * spring=com.alibaba.dubbo.config.spring.status.SpringStatusChecker</span></span><br /><span class="line"><span class="comment">     * datasource=com.alibaba.dubbo.config.spring.status.DataSourceStatusChecker</span></span><br /><span class="line"><span class="comment">     * memory=com.alibaba.dubbo.common.status.support.MemoryStatusChecker</span></span><br /><span class="line"><span class="comment">     * load=com.alibaba.dubbo.common.status.support.LoadStatusChecker</span></span><br /><span class="line"><span class="comment">     * server=com.alibaba.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker</span></span><br /><span class="line"><span class="comment">     * threadpool=com.alibaba.dubbo.rpc.protocol.dubbo.status.ThreadPoolStatusChecker</span></span><br /><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@see</span> StatusChecker</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Status</span> </span>{</span><br /><br /><span class="line">        <span class="comment">/**</span></span><br /><span class="line"><span class="comment">         * The defaults names of {<span class="doctag">@link</span> StatusChecker}</span></span><br /><span class="line"><span class="comment">         * &lt;p&gt;</span></span><br /><span class="line"><span class="comment">         * The defaults : "memory", "load"</span></span><br /><span class="line"><span class="comment">         */</span></span><br /><span class="line">        <span class="keyword">private</span> Set&lt;String&gt; defaults = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(<span class="string">"memory"</span>, <span class="string">"load"</span>));</span><br /><br /><span class="line">        <span class="comment">/**</span></span><br /><span class="line"><span class="comment">         * The extra names of {<span class="doctag">@link</span> StatusChecker}</span></span><br /><span class="line"><span class="comment">         *</span></span><br /><span class="line"><span class="comment">         * 配置的 "management.health.dubbo.extras" 集合</span></span><br /><span class="line"><span class="comment">         *</span></span><br /><span class="line"><span class="comment">         * 每个元素，是 StatusChecker 的实现类</span></span><br /><span class="line"><span class="comment">         */</span></span><br /><span class="line">        <span class="keyword">private</span> Set&lt;String&gt; extras = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br /><br /><span class="line">        <span class="comment">// ... 省略 setting/getting 方法</span></span><br />        <br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>读取以&nbsp;<code>"management.health.dubbo"</code>&nbsp;开头的配置。</li>
</ul>
<blockquote>
<p>如下开始，是&nbsp;<code>health</code>&nbsp;包下。</p>
</blockquote>
<h2 id="5-5-DubboHealthIndicator">5.5 DubboHealthIndicator</h2>
<p><code>com.alibaba.boot.dubbo.actuate.health.DubboHealthIndicator</code>&nbsp;，继承 AbstractHealthIndicator 抽象类，Dubbo Health Indicator 实现类。代码如下：</p>
<h3 id="5-4-1-doHealthCheck">5.4.1 doHealthCheck</h3>
<p>实现&nbsp;<code>#doHealthCheck(Health.Builder builder)</code>&nbsp;方法，执行健康检查。代码如下：</p>
<blockquote>
<p>在请求&nbsp;<code>/actuator/health</code>&nbsp;接口时，也会调用该方法。</p>
</blockquote>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboHealthIndicator.java</span></span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>{</span><br /><span class="line">    <span class="comment">// &lt;1&gt; 获得 StatusChecker 对应的 Dubbo ExtensionLoader 对象</span></span><br /><span class="line">    ExtensionLoader&lt;StatusChecker&gt; extensionLoader = getExtensionLoader(StatusChecker.class);</span><br /><span class="line">    <span class="comment">// &lt;2&gt; 解析 StatusChecker 的名字的 Map</span></span><br /><span class="line">    Map&lt;String, String&gt; statusCheckerNamesMap = resolveStatusCheckerNamesMap();</span><br /><br /><span class="line">    <span class="comment">// &lt;3&gt; 声明 hasError、hasUnknown 变量</span></span><br /><span class="line">    <span class="keyword">boolean</span> hasError = <span class="keyword">false</span>; <span class="comment">// 是否有错误的返回</span></span><br /><span class="line">    <span class="keyword">boolean</span> hasUnknown = <span class="keyword">false</span>; <span class="comment">// 是否有未知的返回</span></span><br /><br /><span class="line">    <span class="comment">// Up first</span></span><br /><span class="line">    <span class="comment">// &lt;4&gt; 先 builder 标记状态是 UP</span></span><br /><span class="line">    builder.up();</span><br /><br /><span class="line">    <span class="comment">// &lt;5&gt; 遍历 statusCheckerNamesMap 元素</span></span><br /><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : statusCheckerNamesMap.entrySet()) {</span><br /><span class="line">        <span class="comment">// &lt;6.1&gt; 获得 StatusChecker 的名字</span></span><br /><span class="line">        String statusCheckerName = entry.getKey();</span><br /><span class="line">        <span class="comment">// &lt;6.2&gt; 获得 source</span></span><br /><span class="line">        String source = entry.getValue();</span><br /><span class="line">        <span class="comment">// &lt;6.3&gt; 获得 StatusChecker 对象</span></span><br /><span class="line">        StatusChecker checker = extensionLoader.getExtension(statusCheckerName);</span><br /><span class="line">        <span class="comment">// &lt;6.4&gt; 执行校验</span></span><br /><span class="line">        com.alibaba.dubbo.common.status.Status status = checker.check();</span><br /><br /><span class="line">        <span class="comment">// &lt;7.1&gt; 获得校验结果</span></span><br /><span class="line">        com.alibaba.dubbo.common.status.Status.Level level = status.getLevel();</span><br /><span class="line">        <span class="comment">// &lt;7.2&gt; 如果是 ERROR 检验结果，则标记 hasError 为 true ，并标记 builder 状态为 down</span></span><br /><span class="line">        <span class="keyword">if</span> (!hasError <span class="comment">// 不存在 hasError 的时候</span></span><br /><span class="line">                &amp;&amp; level.equals(com.alibaba.dubbo.common.status.Status.Level.ERROR)) {</span><br /><span class="line">            hasError = <span class="keyword">true</span>;</span><br /><span class="line">            builder.down();</span><br /><span class="line">        }</span><br /><span class="line">        <span class="comment">// &lt;7.3&gt; 如果是 UNKNOWN 检验结果，则标记 hasUnknown 为 true ，并标记 builder 状态为 unknown</span></span><br /><span class="line">        <span class="keyword">if</span> (!hasError &amp;&amp; !hasUnknown <span class="comment">// 不存在 hasError 且不存在 hasUnknown</span></span><br /><span class="line">                &amp;&amp; level.equals(com.alibaba.dubbo.common.status.Status.Level.UNKNOWN)) {</span><br /><span class="line">            hasUnknown = <span class="keyword">true</span>;</span><br /><span class="line">            builder.unknown();</span><br /><span class="line">        }</span><br /><br /><span class="line">        <span class="comment">// &lt;8.1&gt; 创建 detail Map</span></span><br /><span class="line">        Map&lt;String, Object&gt; detail = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><span class="line">        <span class="comment">// &lt;8.2&gt; 设置 detail 属性值</span></span><br /><span class="line">        detail.put(<span class="string">"source"</span>, source);</span><br /><span class="line">        detail.put(<span class="string">"status"</span>, status); <span class="comment">// 校验结果</span></span><br /><span class="line">        <span class="comment">// &lt;8.3&gt; 添加到 builder 中</span></span><br /><span class="line">        builder.withDetail(statusCheckerName, detail);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>大体比较简单，胖友顺着注释来瞅瞅即可。</li>
<li><code>&lt;2&gt;</code>&nbsp;处，调用&nbsp;<code>#resolveStatusCheckerNamesMap()</code>&nbsp;方法，解析 StatusChecker 的名字的 Map 。因为这个对后续逻辑非常关键，所以胖友先跳到&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-Externalized/">「5.4.2 resolveStatusCheckerNamesMap」</a>&nbsp;中。看完之后，在回到此处。</li>
<li>最终返回&nbsp;<code>builder</code>&nbsp;的结果，如下图：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/11.jpg" alt="&#96;builder&#96; 结果" /></li>
</ul>
<h3 id="5-4-2-resolveStatusCheckerNamesMap">5.4.2 resolveStatusCheckerNamesMap</h3>
<p><code>#resolveStatusCheckerNamesMap()</code>&nbsp;方法，解析 StatusChecker 的名字的 Map。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboHealthIndicator.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Resolves the map of {<span class="doctag">@link</span> StatusChecker}'s name and its' source.</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * 解析 StatusChecker 的名字的 Map</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * KEY：StatusChecker 的名字</span></span><br /><span class="line"><span class="comment"> * VALUE：配置的来源</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@return</span> non-null {<span class="doctag">@link</span> Map}</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, String&gt; <span class="title">resolveStatusCheckerNamesMap</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="comment">// 创建 Map</span></span><br /><span class="line">    Map&lt;String, String&gt; statusCheckerNamesMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><span class="line">    <span class="comment">// &lt;1&gt; 从 DubboHealthIndicatorProperties 中获取</span></span><br /><span class="line">    statusCheckerNamesMap.putAll(resolveStatusCheckerNamesMapFromDubboHealthIndicatorProperties());</span><br /><span class="line">    <span class="comment">// &lt;2&gt; 从 ProtocolConfig 中获取</span></span><br /><span class="line">    statusCheckerNamesMap.putAll(resolveStatusCheckerNamesMapFromProtocolConfigs());</span><br /><span class="line">    <span class="comment">// &lt;3&gt; 从 ProviderConfig 中获取</span></span><br /><span class="line">    statusCheckerNamesMap.putAll(resolveStatusCheckerNamesMapFromProviderConfig());</span><br /><span class="line">    <span class="keyword">return</span> statusCheckerNamesMap;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>&lt;1&gt;</code>&nbsp;处，调用&nbsp;<code>#resolveStatusCheckerNamesMapFromDubboHealthIndicatorProperties()</code>&nbsp;方法，从 DubboHealthIndicatorProperties 中获取。代码如下：
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboHealthIndicator.java</span></span><br /><br /><span class="line"><span class="meta">@Autowired</span></span><br /><span class="line"><span class="keyword">private</span> DubboHealthIndicatorProperties dubboHealthIndicatorProperties;</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">resolveStatusCheckerNamesMapFromDubboHealthIndicatorProperties</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="comment">// 获得 DubboHealthIndicatorProperties.Status</span></span><br /><span class="line">    DubboHealthIndicatorProperties.Status status = dubboHealthIndicatorProperties.getStatus();</span><br /><span class="line">    <span class="comment">// 创建 Map</span></span><br /><span class="line">    Map&lt;String, String&gt; statusCheckerNamesMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><span class="line">    <span class="comment">// 1. 读取 defaults 属性</span></span><br /><span class="line">    <span class="keyword">for</span> (String statusName : status.getDefaults()) {</span><br /><span class="line">        statusCheckerNamesMap.put(statusName, PREFIX + <span class="string">".status.defaults"</span>);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 2. 读取 extras 属性</span></span><br /><span class="line">    <span class="keyword">for</span> (String statusName : status.getExtras()) {</span><br /><span class="line">        statusCheckerNamesMap.put(statusName, PREFIX + <span class="string">".status.extras"</span>);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> statusCheckerNamesMap;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<ul>
<li><code>&lt;2&gt;</code>&nbsp;处，调用&nbsp;<code>#resolveStatusCheckerNamesMapFromProtocolConfigs()</code>&nbsp;方法，从 ProtocolConfig 中获取。代码如下：
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboHealthIndicator.java</span></span><br /><br /><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br /><span class="line"><span class="keyword">private</span> Map&lt;String, ProtocolConfig&gt; protocolConfigs = Collections.emptyMap();</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">resolveStatusCheckerNamesMapFromProtocolConfigs</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="comment">// 创建 Map</span></span><br /><span class="line">    Map&lt;String, String&gt; statusCheckerNamesMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><span class="line">    <span class="comment">// 遍历 protocolConfigs</span></span><br /><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, ProtocolConfig&gt; entry : protocolConfigs.entrySet()) {</span><br /><span class="line">        <span class="comment">// 获得 Bean 的名字</span></span><br /><span class="line">        String beanName = entry.getKey();</span><br /><span class="line">        <span class="comment">// 获得 ProtocolConfig 对象</span></span><br /><span class="line">        ProtocolConfig protocolConfig = entry.getValue();</span><br /><span class="line">        <span class="comment">// 获得 ProtocolConfig 的 StatusChecker 的名字的集合</span></span><br /><span class="line">        Set&lt;String&gt; statusCheckerNames = getStatusCheckerNames(protocolConfig);</span><br /><span class="line">        <span class="comment">// 遍历 statusCheckerNames 数组</span></span><br /><span class="line">        <span class="keyword">for</span> (String statusCheckerName : statusCheckerNames) {</span><br /><span class="line">            <span class="comment">// 构建 source 属性</span></span><br /><span class="line">            String source = buildSource(beanName, protocolConfig);</span><br /><span class="line">            <span class="comment">// 添加到 statusCheckerNamesMap 中</span></span><br /><span class="line">            statusCheckerNamesMap.put(statusCheckerName, source);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> statusCheckerNamesMap;</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getStatusCheckerNames</span><span class="params">(ProtocolConfig protocolConfig)</span> </span>{</span><br /><span class="line">    String status = protocolConfig.getStatus();</span><br /><span class="line">    <span class="keyword">return</span> StringUtils.commaDelimitedListToSet(status);</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getStatusCheckerNames</span><span class="params">(ProviderConfig providerConfig)</span> </span>{</span><br /><span class="line">    String status = providerConfig.getStatus();</span><br /><span class="line">    <span class="keyword">return</span> StringUtils.commaDelimitedListToSet(status);</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">buildSource</span><span class="params">(String beanName, Object bean)</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> beanName + <span class="string">"@"</span> + bean.getClass().getSimpleName() + <span class="string">".getStatus()"</span>;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<ul>
<li><code>&lt;3&gt;</code>&nbsp;处，调用&nbsp;<code>#resolveStatusCheckerNamesMapFromProviderConfig()</code>&nbsp;方法，从 ProviderConfig 中获取。代码如下：
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboHealthIndicator.java</span></span><br /><br /><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br /><span class="line"><span class="keyword">private</span> Map&lt;String, ProviderConfig&gt; providerConfigs = Collections.emptyMap();</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">resolveStatusCheckerNamesMapFromProviderConfig</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="comment">// 创建 Map</span></span><br /><span class="line">    Map&lt;String, String&gt; statusCheckerNamesMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><span class="line">    <span class="comment">// 遍历 providerConfigs</span></span><br /><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, ProviderConfig&gt; entry : providerConfigs.entrySet()) {</span><br /><span class="line">        <span class="comment">// 获得 Bean 的名字</span></span><br /><span class="line">        String beanName = entry.getKey();</span><br /><span class="line">        <span class="comment">// 获得 ProviderConfig 对象</span></span><br /><span class="line">        ProviderConfig providerConfig = entry.getValue();</span><br /><span class="line">        <span class="comment">// 获得 ProtocolConfig 的 StatusChecker 的名字的集合</span></span><br /><span class="line">        Set&lt;String&gt; statusCheckerNames = getStatusCheckerNames(providerConfig);</span><br /><span class="line">        <span class="comment">// 遍历 statusCheckerNames 数组</span></span><br /><span class="line">        <span class="keyword">for</span> (String statusCheckerName : statusCheckerNames) {</span><br /><span class="line">            <span class="comment">// 构建 source 属性</span></span><br /><span class="line">            String source = buildSource(beanName, providerConfig);</span><br /><span class="line">            <span class="comment">// 添加到 statusCheckerNamesMap 中</span></span><br /><span class="line">            statusCheckerNamesMap.put(statusCheckerName, source);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> statusCheckerNamesMap;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<ul>
<li>最终的结果，示例如下图：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/10.jpg" alt="&#96;statusCheckerNamesMap&#96; 属性" /></li>
</ul>
<blockquote>
<p>如下开始，是&nbsp;<code>endpoint</code>&nbsp;包下。</p>
</blockquote>
<h2 id="5-6-AbstractDubboEndpoint">5.6 AbstractDubboEndpoint</h2>
<p><code>com.alibaba.boot.dubbo.actuate.endpoint.AbstractDubboEndpoint</code>&nbsp;，实现 ApplicationContextAware、EnvironmentAware 接口，Dubbo Endpoint 抽象类，提供给子类工具方法。</p>
<h3 id="5-6-1-基本属性">5.6.1 基本属性</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AbstractDubboEndpoint.java</span></span><br /><br /><span class="line"><span class="keyword">protected</span> ApplicationContext applicationContext;</span><br /><br /><span class="line"><span class="keyword">protected</span> ConfigurableEnvironment environment;</span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>{</span><br /><span class="line">    <span class="keyword">this</span>.applicationContext = applicationContext;</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>{</span><br /><span class="line">    <span class="keyword">if</span> (environment <span class="keyword">instanceof</span> ConfigurableEnvironment) {</span><br /><span class="line">        <span class="keyword">this</span>.environment = (ConfigurableEnvironment) environment;</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="5-6-2-resolveBeanMetadata">5.6.2 resolveBeanMetadata</h3>
<p><code>#resolveBeanMetadata(Object bean)</code>&nbsp;方法，获得 Bean 的元数据。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AbstractDubboEndpoint.java</span></span><br /><br /><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title">resolveBeanMetadata</span><span class="params">(<span class="keyword">final</span> Object bean)</span> </span>{</span><br /><span class="line">    <span class="comment">// 创建 Map</span></span><br /><span class="line">    <span class="keyword">final</span> Map&lt;String, Object&gt; beanMetadata = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><span class="line">    <span class="keyword">try</span> {</span><br /><span class="line">        <span class="comment">// 获得 BeanInfo 对象</span></span><br /><span class="line">        BeanInfo beanInfo = Introspector.getBeanInfo(bean.getClass());</span><br /><span class="line">        <span class="comment">// 获得 PropertyDescriptor 数组</span></span><br /><span class="line">        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br /><span class="line">        <span class="comment">// 遍历 PropertyDescriptor 数组</span></span><br /><span class="line">        <span class="keyword">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) {</span><br /><span class="line">            <span class="comment">// 获得 Method 对象</span></span><br /><span class="line">            Method readMethod = propertyDescriptor.getReadMethod();</span><br /><span class="line">            <span class="comment">// 读取属性，添加到 beanMetadata 中</span></span><br /><span class="line">            <span class="keyword">if</span> (readMethod != <span class="keyword">null</span> &amp;&amp; isSimpleType(propertyDescriptor.getPropertyType())) {</span><br /><span class="line">                String name = Introspector.decapitalize(propertyDescriptor.getName());</span><br /><span class="line">                Object value = readMethod.invoke(bean);</span><br /><span class="line">                beanMetadata.put(name, value);</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> beanMetadata;</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSimpleType</span><span class="params">(Class&lt;?&gt; type)</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> isPrimitiveOrWrapper(type) <span class="comment">// 基本类型 or 包装类型</span></span><br /><span class="line">            || type == String.class</span><br /><span class="line">            || type == BigDecimal.class</span><br /><span class="line">            || type == BigInteger.class</span><br /><span class="line">            || type == Date.class</span><br /><span class="line">            || type == URL.class</span><br /><span class="line">            || type == Class.class</span><br /><span class="line">            ;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>目的是读取 Bean 的基本属性。示例如下图：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_11/12.jpg" alt="&#96;beanMetadata&#96; 结果" /></li>
</ul>
<h3 id="5-6-3-getServiceBeansMap">5.6.3 getServiceBeansMap</h3>
<p><code>#getServiceBeansMap()</code>&nbsp;方法，获得所有 ServiceBean 。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AbstractDubboEndpoint.java</span></span><br /><br /><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, ServiceBean&gt; <span class="title">getServiceBeansMap</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ServiceBean.class);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="5-6-4-getProtocolConfigsBeanMap">5.6.4 getProtocolConfigsBeanMap</h3>
<p><code>#getProtocolConfigsBeanMap()</code>&nbsp;方法，获得所有 ProtocolConfig 。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AbstractDubboEndpoint.java</span></span><br /><br /><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, ProtocolConfig&gt; <span class="title">getProtocolConfigsBeanMap</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, ProtocolConfig.class);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="5-6-5-getReferenceAnnotationBeanPostProcessor">5.6.5 getReferenceAnnotationBeanPostProcessor</h3>
<p><code>#getReferenceAnnotationBeanPostProcessor()</code>&nbsp;方法，获得 ReferenceAnnotationBeanPostProcessor Bean 对象。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AbstractDubboEndpoint.java</span></span><br /><br /><span class="line"><span class="function"><span class="keyword">protected</span> ReferenceAnnotationBeanPostProcessor <span class="title">getReferenceAnnotationBeanPostProcessor</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> applicationContext.getBean(ReferenceAnnotationBeanPostProcessor.BEAN_NAME, ReferenceAnnotationBeanPostProcessor.class);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="5-7-DubboEndpoint">5.7 DubboEndpoint</h2>
<p><code>com.alibaba.boot.dubbo.actuate.endpoint.DubboEndpoint</code>&nbsp;，Dubbo Endpoint ，获得 Dubbo Meta Data（元数据）。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboEndpoint.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Actuator {<span class="doctag">@link</span> Endpoint} to expose Dubbo Meta Data</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"dubbo"</span>)</span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboEndpoint</span> </span>{</span><br /><br /><span class="line">    <span class="meta">@ReadOperation</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">invoke</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="comment">// 创建 Map</span></span><br /><span class="line">        Map&lt;String, Object&gt; metaData = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><br /><span class="line">        <span class="comment">// timestamp</span></span><br /><span class="line">        metaData.put(<span class="string">"timestamp"</span>, System.currentTimeMillis());</span><br /><br /><span class="line">        <span class="comment">// versions</span></span><br /><span class="line">        Map&lt;String, String&gt; versions = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><span class="line">        versions.put(<span class="string">"dubbo-spring-boot"</span>, Version.getVersion(DubboUtils.class, <span class="string">"1.0.0"</span>));</span><br /><span class="line">        versions.put(<span class="string">"dubbo"</span>, Version.getVersion());</span><br /><br /><span class="line">        <span class="comment">// urls</span></span><br /><span class="line">        Map&lt;String, String&gt; urls = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><span class="line">        urls.put(<span class="string">"dubbo"</span>, DUBBO_GITHUB_URL);</span><br /><span class="line">        urls.put(<span class="string">"mailing-list"</span>, DUBBO_MAILING_LIST);</span><br /><span class="line">        urls.put(<span class="string">"github"</span>, DUBBO_SPRING_BOOT_GITHUB_URL);</span><br /><span class="line">        urls.put(<span class="string">"issues"</span>, DUBBO_SPRING_BOOT_ISSUES_URL);</span><br /><span class="line">        urls.put(<span class="string">"git"</span>, DUBBO_SPRING_BOOT_GIT_URL);</span><br /><br /><span class="line">        metaData.put(<span class="string">"versions"</span>, versions);</span><br /><span class="line">        metaData.put(<span class="string">"urls"</span>, urls);</span><br /><span class="line">        <span class="keyword">return</span> metaData;</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="5-8-DubboConfigsMetadataEndpoint">5.8 DubboConfigsMetadataEndpoint</h2>
<p><code>com.alibaba.boot.dubbo.actuate.endpoint.DubboConfigsMetadataEndpoint</code>&nbsp;，继承 AbstractDubboEndpoint 抽象类，获得 所有的 Dubbo 配置类的元数据。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboConfigsMetadataEndpoint.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Dubbo Configs Metadata {<span class="doctag">@link</span> Endpoint}</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"dubboconfigs"</span>)</span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConfigsMetadataEndpoint</span> <span class="keyword">extends</span> <span class="title">AbstractDubboEndpoint</span> </span>{</span><br /><br /><span class="line">    <span class="meta">@ReadOperation</span></span><br /><span class="line">    <span class="keyword">public</span> Map&lt;String, Map&lt;String, Map&lt;String, Object&gt;&gt;&gt; configs() {</span><br /><span class="line">        <span class="comment">// 创建 Map</span></span><br /><span class="line">        <span class="comment">// KEY：获得类的简称。例如：ApplicationConfig、ConsumerConfig</span></span><br /><span class="line">        <span class="comment">// KEY2：Bean 的名称</span></span><br /><span class="line">        <span class="comment">// VALUE：Bean 的元数据</span></span><br /><span class="line">        Map&lt;String, Map&lt;String, Map&lt;String, Object&gt;&gt;&gt; configsMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><br /><span class="line">        <span class="comment">// 遍历每个配置类，添加其的 Bean 们，到 configsMap 中</span></span><br /><span class="line">        addDubboConfigBeans(ApplicationConfig.class, configsMap);</span><br /><span class="line">        addDubboConfigBeans(ConsumerConfig.class, configsMap);</span><br /><span class="line">        addDubboConfigBeans(MethodConfig.class, configsMap);</span><br /><span class="line">        addDubboConfigBeans(ModuleConfig.class, configsMap);</span><br /><span class="line">        addDubboConfigBeans(MonitorConfig.class, configsMap);</span><br /><span class="line">        addDubboConfigBeans(ProtocolConfig.class, configsMap);</span><br /><span class="line">        addDubboConfigBeans(ProviderConfig.class, configsMap);</span><br /><span class="line">        addDubboConfigBeans(ReferenceConfig.class, configsMap);</span><br /><span class="line">        addDubboConfigBeans(RegistryConfig.class, configsMap);</span><br /><span class="line">        addDubboConfigBeans(ServiceConfig.class, configsMap);</span><br /><span class="line">        <span class="keyword">return</span> configsMap;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addDubboConfigBeans</span><span class="params">(Class&lt;? extends AbstractConfig&gt; dubboConfigClass, Map&lt;String, Map&lt;String, Map&lt;String, Object&gt;&gt;&gt; configsMap)</span> </span>{</span><br /><span class="line">        <span class="comment">// 获得指定类 dubboConfigClass 的 Map</span></span><br /><span class="line">        Map&lt;String, ? extends AbstractConfig&gt; dubboConfigBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, dubboConfigClass);</span><br /><span class="line">        <span class="comment">// 获得类的简称。例如：ApplicationConfig、ConsumerConfig</span></span><br /><span class="line">        String name = dubboConfigClass.getSimpleName();</span><br /><span class="line">        <span class="comment">// 创建 Map</span></span><br /><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; beansMetadata = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br /><span class="line">        <span class="comment">// 遍历 dubboConfigBeans 数组</span></span><br /><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, ? extends AbstractConfig&gt; entry : dubboConfigBeans.entrySet()) {</span><br /><span class="line">            <span class="comment">// 获得 Bean 的名字</span></span><br /><span class="line">            String beanName = entry.getKey();</span><br /><span class="line">            <span class="comment">// 获得 Bean 的元数据</span></span><br /><span class="line">            AbstractConfig configBean = entry.getValue();</span><br /><span class="line">            Map&lt;String, Object&gt; configBeanMeta = <span class="keyword">super</span>.resolveBeanMetadata(configBean);</span><br /><span class="line">            <span class="comment">// 添加到 beansMetadata 中</span></span><br /><span class="line">            beansMetadata.put(beanName, configBeanMeta);</span><br /><span class="line">        }</span><br /><span class="line">        <span class="comment">// 添加到 configsMap 中</span></span><br /><span class="line">        configsMap.put(name, beansMetadata);</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="5-7-DubboPropertiesEndpoint">5.7 DubboPropertiesEndpoint</h2>
<p><code>com.alibaba.boot.dubbo.actuate.endpoint.DubboPropertiesEndpoint</code>&nbsp;，继承 AbstractDubboEndpoint 抽象类，获得 Dubbo Properties 。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboPropertiesEndpoint.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Dubbo Properties {<span class="doctag">@link</span> Endpoint}</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"dubboproperties"</span>)</span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboPropertiesEndpoint</span> <span class="keyword">extends</span> <span class="title">AbstractDubboEndpoint</span> </span>{</span><br /><br /><span class="line">    <span class="meta">@ReadOperation</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> SortedMap&lt;String, Object&gt; <span class="title">properties</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> DubboUtils.filterDubboProperties(environment);</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="5-8-DubboReferencesMetadataEndpoint">5.8 DubboReferencesMetadataEndpoint</h2>
<p><code>com.alibaba.boot.dubbo.actuate.endpoint.DubboReferencesMetadataEndpoint</code>&nbsp;，继承 AbstractDubboEndpoint 抽象类，获得所有的 Dubbo&nbsp;<code>@Reference</code>&nbsp;Bean 的元数据。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboReferencesMetadataEndpoint.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Dubbo {<span class="doctag">@link</span> Reference} Metadata {<span class="doctag">@link</span> Endpoint}</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"dubboreferences"</span>)</span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboReferencesMetadataEndpoint</span> <span class="keyword">extends</span> <span class="title">AbstractDubboEndpoint</span> </span>{</span><br /><br /><span class="line">    <span class="meta">@ReadOperation</span></span><br /><span class="line">    <span class="keyword">public</span> Map&lt;String, Map&lt;String, Object&gt;&gt; references() {</span><br /><span class="line">        <span class="comment">// 创建 Map</span></span><br /><span class="line">        <span class="comment">// KEY：Bean 的名字</span></span><br /><span class="line">        <span class="comment">// VALUE：Bean 的元数据</span></span><br /><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; referencesMetadata = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><br /><span class="line">        <span class="comment">// 获得 ReferenceAnnotationBeanPostProcessor Bean 对象</span></span><br /><span class="line">        ReferenceAnnotationBeanPostProcessor beanPostProcessor = <span class="keyword">super</span>.getReferenceAnnotationBeanPostProcessor();</span><br /><br /><span class="line">        <span class="comment">// injected Field ReferenceBean Cache</span></span><br /><span class="line">        referencesMetadata.putAll(buildReferencesMetadata(beanPostProcessor.getInjectedFieldReferenceBeanMap()));</span><br /><span class="line">        <span class="comment">// injected Method ReferenceBean Cache</span></span><br /><span class="line">        referencesMetadata.putAll(buildReferencesMetadata(beanPostProcessor.getInjectedMethodReferenceBeanMap()));</span><br /><span class="line">        <span class="keyword">return</span> referencesMetadata;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="keyword">private</span> Map&lt;String, Map&lt;String, Object&gt;&gt; buildReferencesMetadata(Map&lt;InjectionMetadata.InjectedElement, ReferenceBean&lt;?&gt;&gt; injectedElementReferenceBeanMap) {</span><br /><span class="line">        <span class="comment">// 创建 Map</span></span><br /><span class="line">        <span class="comment">// KEY：Bean 的名字</span></span><br /><span class="line">        <span class="comment">// VALUE：Bean 的元数据</span></span><br /><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; referencesMetadata = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><span class="line">        <span class="comment">// 遍历 injectedElementReferenceBeanMap 元素</span></span><br /><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;InjectionMetadata.InjectedElement, ReferenceBean&lt;?&gt;&gt; entry : injectedElementReferenceBeanMap.entrySet()) {</span><br /><span class="line">            InjectionMetadata.InjectedElement injectedElement = entry.getKey();</span><br /><span class="line">            <span class="comment">// 获得 ReferenceBean 对象</span></span><br /><span class="line">            ReferenceBean&lt;?&gt; referenceBean = entry.getValue();</span><br /><span class="line">            <span class="comment">// 获得 Bean 元数据</span></span><br /><span class="line">            Map&lt;String, Object&gt; beanMetadata = <span class="keyword">super</span>.resolveBeanMetadata(referenceBean);</span><br /><span class="line">            <span class="comment">// 获得 invoker 属性</span></span><br /><span class="line">            beanMetadata.put(<span class="string">"invoker"</span>, <span class="keyword">super</span>.resolveBeanMetadata(referenceBean.get()));</span><br /><span class="line">            <span class="comment">// 添加到 referencesMetadata 中</span></span><br /><span class="line">            referencesMetadata.put(String.valueOf(injectedElement.getMember()), beanMetadata);</span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">return</span> referencesMetadata;</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="5-9-DubboServicesMetadataEndpoint">5.9 DubboServicesMetadataEndpoint</h2>
<p><code>com.alibaba.boot.dubbo.actuate.endpoint.DubboServicesMetadataEndpoint</code>&nbsp;，继承 AbstractDubboEndpoint 抽象类，获得所有的 Dubbo&nbsp;<code>@Service</code>&nbsp;Bean 的元数据。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboServicesMetadataEndpoint.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Dubbo {<span class="doctag">@link</span> Service} Metadata {<span class="doctag">@link</span> Endpoint}</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"dubboservices"</span>)</span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboServicesMetadataEndpoint</span> <span class="keyword">extends</span> <span class="title">AbstractDubboEndpoint</span> </span>{</span><br /><br /><span class="line">    <span class="meta">@ReadOperation</span></span><br /><span class="line">    <span class="keyword">public</span> Map&lt;String, Map&lt;String, Object&gt;&gt; services() {</span><br /><span class="line">        <span class="comment">// 获得所有的 ServiceBean</span></span><br /><span class="line">        Map&lt;String, ServiceBean&gt; serviceBeansMap = <span class="keyword">super</span>.getServiceBeansMap();</span><br /><span class="line">        <span class="comment">// 创建 Map</span></span><br /><span class="line">        <span class="comment">// KEY：Bean 的名字</span></span><br /><span class="line">        <span class="comment">// VALUE：Bean 的元数据</span></span><br /><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; servicesMetadata = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(serviceBeansMap.size());</span><br /><br /><span class="line">        <span class="comment">// 遍历 serviceBeansMap 元素</span></span><br /><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, ServiceBean&gt; entry : serviceBeansMap.entrySet()) {</span><br /><span class="line">            <span class="comment">// 获得 Bean 的名字</span></span><br /><span class="line">            String serviceBeanName = entry.getKey();</span><br /><span class="line">            <span class="comment">// 获得 ServiceBean 对象</span></span><br /><span class="line">            ServiceBean serviceBean = entry.getValue();</span><br /><span class="line">            <span class="comment">// 获得 Bean 的元数据</span></span><br /><span class="line">            Map&lt;String, Object&gt; serviceBeanMetadata = <span class="keyword">super</span>.resolveBeanMetadata(serviceBean);</span><br /><span class="line">            <span class="comment">// 获得 Service 对象。若获得到，则添加到 serviceBeanMetadata 中</span></span><br /><span class="line">            Object service = resolveServiceBean(serviceBeanName, serviceBean);</span><br /><span class="line">            <span class="keyword">if</span> (service != <span class="keyword">null</span>) {</span><br /><span class="line">                <span class="comment">// Add Service implementation class</span></span><br /><span class="line">                serviceBeanMetadata.put(<span class="string">"serviceClass"</span>, service.getClass().getName());</span><br /><span class="line">            }</span><br /><span class="line">            <span class="comment">// 添加到 servicesMetadata 中</span></span><br /><span class="line">            servicesMetadata.put(serviceBeanName, serviceBeanMetadata);</span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">return</span> servicesMetadata;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">resolveServiceBean</span><span class="params">(String serviceBeanName, ServiceBean serviceBean)</span> </span>{</span><br /><span class="line">        <span class="keyword">int</span> index = serviceBeanName.indexOf(<span class="string">"#"</span>);</span><br /><span class="line">        <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) {</span><br /><span class="line">            Class&lt;?&gt; interfaceClass = serviceBean.getInterfaceClass();</span><br /><span class="line">            String serviceName = serviceBeanName.substring(index + <span class="number">1</span>);</span><br /><span class="line">            <span class="keyword">if</span> (applicationContext.containsBean(serviceName)) {</span><br /><span class="line">                <span class="keyword">return</span> applicationContext.getBean(serviceName, interfaceClass);</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="5-10-DubboShutdownEndpoint">5.10 DubboShutdownEndpoint</h2>
<p><code>com.alibaba.boot.dubbo.actuate.endpoint.DubboShutdownEndpoint</code>&nbsp;，继承 AbstractDubboEndpoint 抽象类，关闭 Dubbo 。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// DubboShutdownEndpoint.java</span></span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Dubbo Shutdown</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"dubboshutdown"</span>)</span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboShutdownEndpoint</span> <span class="keyword">extends</span> <span class="title">AbstractDubboEndpoint</span> </span>{</span><br /><br /><span class="line">    <span class="meta">@WriteOperation</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br /><span class="line">        <span class="comment">// 创建 Map</span></span><br /><span class="line">        Map&lt;String, Object&gt; shutdownCountData = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br /><br /><span class="line">        <span class="comment">// registries</span></span><br /><span class="line">        <span class="comment">// 获得注册的数量</span></span><br /><span class="line">        <span class="keyword">int</span> registriesCount = AbstractRegistryFactory.getRegistries().size();</span><br /><span class="line">        <span class="comment">// protocols</span></span><br /><span class="line">        <span class="comment">// 获得 Protocol 的数量</span></span><br /><span class="line">        <span class="keyword">int</span> protocolsCount = <span class="keyword">super</span>.getProtocolConfigsBeanMap().size();</span><br /><span class="line">        <span class="comment">// 销毁 ProtocolConfig</span></span><br /><span class="line">        ProtocolConfig.destroyAll();</span><br /><span class="line">        <span class="comment">// 添加到 shutdownCountData 中</span></span><br /><span class="line">        shutdownCountData.put(<span class="string">"registries"</span>, registriesCount);</span><br /><span class="line">        shutdownCountData.put(<span class="string">"protocols"</span>, protocolsCount);</span><br /><br /><span class="line">        <span class="comment">// Service Beans</span></span><br /><span class="line">        <span class="comment">// 获得所有 ServiceBean ，然后逐个销毁</span></span><br /><span class="line">        Map&lt;String, ServiceBean&gt; serviceBeansMap = <span class="keyword">super</span>.getServiceBeansMap();</span><br /><span class="line">        <span class="keyword">if</span> (!serviceBeansMap.isEmpty()) {</span><br /><span class="line">            <span class="keyword">for</span> (ServiceBean serviceBean : serviceBeansMap.values()) {</span><br /><span class="line">                serviceBean.destroy();</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">        <span class="comment">// 添加到 shutdownCountData 中</span></span><br /><span class="line">        shutdownCountData.put(<span class="string">"services"</span>, serviceBeansMap.size());</span><br /><br /><span class="line">        <span class="comment">// Reference Beans</span></span><br /><span class="line">        <span class="comment">// 获得 ReferenceAnnotationBeanPostProcessor 对象</span></span><br /><span class="line">        ReferenceAnnotationBeanPostProcessor beanPostProcessor = <span class="keyword">super</span>.getReferenceAnnotationBeanPostProcessor();</span><br /><span class="line">        <span class="comment">// 获得 Reference Bean 的数量</span></span><br /><span class="line">        <span class="keyword">int</span> referencesCount = beanPostProcessor.getReferenceBeans().size();</span><br /><span class="line">        <span class="comment">// 销毁所有 Reference Bean</span></span><br /><span class="line">        beanPostProcessor.destroy();</span><br /><span class="line">        <span class="comment">// 添加到 shutdownCountData 中</span></span><br /><span class="line">        shutdownCountData.put(<span class="string">"references"</span>, referencesCount);</span><br /><br /><span class="line">        <span class="comment">// Set Result to complete</span></span><br /><span class="line">        Map&lt;String, Object&gt; shutdownData = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br /><span class="line">        shutdownData.put(<span class="string">"shutdown.count"</span>, shutdownCountData);</span><br /><span class="line">        <span class="keyword">return</span> shutdownData;</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>通过调用该接口，我们就可以远程关闭 Dubbo 服务。</li>
</ul>
</div>