<header class="article-header">
<h1 class="article-title">Zookeeper 客户端</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>在&nbsp;<code>dubbo-remoting-zookeeper</code>&nbsp;模块，实现了 Dubbo 对 Zookeeper 客户端的封装。在该模块中，抽象了<strong>通用</strong>的 Zookeeper Client API 接口，实现了<strong>两种</strong>&nbsp;Zookeeper Client 库的接入：</p>
<ul>
<li>
<p>基于&nbsp;<a href="https://curator.apache.org/" target="_blank" rel="external nofollow noopener noreferrer">Apache Curator</a>&nbsp;实现。</p>
<figure class="highlight xml">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> <span class="attr">client</span>=<span class="string">"curator"</span> /&gt;</span></span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p>基于&nbsp;<a href="https://github.com/sgroschupf/zkclient" target="_blank" rel="external nofollow noopener noreferrer">ZkClient</a>&nbsp;实现。</p>
<figure class="highlight xml">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> <span class="attr">client</span>=<span class="string">"zkclient"</span> /&gt;</span></span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<p>默认不配置&nbsp;<code>client</code>&nbsp;的情况下，使用 Curator 。</p>
<hr />
<p><code>dubbo-remoting-zookeeper</code>&nbsp;的整体类图如下：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_07_01/01.png" alt="类图" /></p>
<p>下面，我们按照接口到实现的顺序，往下看。</p>
<h1 id="2-接口">2. 接口</h1>
<h2 id="2-1-StateListener">2.1 StateListener</h2>
<p><code>com.alibaba.dubbo.remoting.zookeeper.StateListener</code>&nbsp;，状态监听器接口，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StateListener</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 状态 - 已断开</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">int</span> DISCONNECTED = <span class="number">0</span>;</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 状态 - 已连接</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">int</span> CONNECTED = <span class="number">1</span>;</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 状态 - 已重连</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">int</span> RECONNECTED = <span class="number">2</span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 状态变更回调</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> connected 状态</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(<span class="keyword">int</span> connected)</span></span>;</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="2-2-ChildListener">2.2 ChildListener</h2>
<p><code>com.alibaba.dubbo.remoting.zookeeper.StateListener</code>&nbsp;，节点监听器接口，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChildListener</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 子节点发生变化的回调</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 节点</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> children 最新的子节点列表</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">childChanged</span><span class="params">(String path, List&lt;String&gt; children)</span></span>;</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="2-3-ZookeeperClient">2.3 ZookeeperClient</h2>
<p><code>com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient</code>&nbsp;，Zookeeper 客户端接口，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ZookeeperClient</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 创建节点</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 节点路径</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> ephemeral 是否临时节点</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(String path, <span class="keyword">boolean</span> ephemeral)</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 删除节点</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 节点路径</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String path)</span></span>;</span><br /><br /><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getChildren</span><span class="params">(String path)</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 添加 ChildListener</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 节点路径</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 监听器</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@return</span> 子节点列表</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function">List&lt;String&gt; <span class="title">addChildListener</span><span class="params">(String path, ChildListener listener)</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 移除 ChildListener</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 节点路径</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 监听器</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeChildListener</span><span class="params">(String path, ChildListener listener)</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 添加 StateListener</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 监听器</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addStateListener</span><span class="params">(StateListener listener)</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 移除 StateListener</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 监听器</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeStateListener</span><span class="params">(StateListener listener)</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否连接</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">()</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 关闭</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获得注册中心 URL</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function">URL <span class="title">getUrl</span><span class="params">()</span></span>;</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>状态相关方法
<ul>
<li><code>#isConnected()</code></li>
<li><code>#close()</code></li>
<li><code>#getUrl()</code></li>
</ul>
</li>
<li>数据相关方法
<ul>
<li><code>#create(path, ephemeral)</code></li>
<li><code>#getChildren(path)</code></li>
<li>从 API 上，Dubbo 只使用节点的路径，而不使用节点的值（内容）。</li>
</ul>
</li>
<li>监听相关方法
<ul>
<li><code>#addChildListener(path, listener)</code></li>
<li><code>#removeChildListener(path, listener)</code></li>
<li><code>#addStateListener(listener)</code></li>
<li><code>#removeStateListener(listener)</code></li>
</ul>
</li>
</ul>
<h2 id="2-4-AbstractZookeeperClient">2.4 AbstractZookeeperClient</h2>
<p><code>com.alibaba.dubbo.remoting.zookeeper.support.AbstractZookeeperClient</code>&nbsp;，实现 ZookeeperClient 接口，Zookeeper 客户端<strong>抽象类</strong>，实现通用的逻辑。</p>
<h3 id="2-4-1-属性">2.4.1 属性</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractZookeeperClient</span>&lt;<span class="title">TargetChildListener</span>&gt; <span class="keyword">implements</span> <span class="title">ZookeeperClient</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 注册中心 URL</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URL url;</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * StateListener 集合</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;StateListener&gt; stateListeners = <span class="keyword">new</span> CopyOnWriteArraySet&lt;StateListener&gt;();</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * ChildListener 集合</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * key1：节点路径</span></span><br /><span class="line"><span class="comment">     * key2：ChildListener 对象</span></span><br /><span class="line"><span class="comment">     * value ：监听器具体对象。不同 Zookeeper 客户端，实现会不同。</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, ConcurrentMap&lt;ChildListener, TargetChildListener&gt;&gt; childListeners = <span class="keyword">new</span> ConcurrentHashMap&lt;String, ConcurrentMap&lt;ChildListener, TargetChildListener&gt;&gt;();</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 是否关闭</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> closed = <span class="keyword">false</span>;</span><br /><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractZookeeperClient</span><span class="params">(URL url)</span> </span>{</span><br /><span class="line">        <span class="keyword">this</span>.url = url;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> URL <span class="title">getUrl</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> url;</span><br /><span class="line">    }</span><br />    <br /><span class="line">    <span class="comment">// ... 省略其他方法</span></span><br />    <br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p>🙂 见代码注释。</p>
<h3 id="2-4-2-create">2.4.2 create</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String path, <span class="keyword">boolean</span> ephemeral)</span> </span>{</span><br /><span class="line">    <span class="comment">// 循环创建父路径</span></span><br /><span class="line">    <span class="keyword">int</span> i = path.lastIndexOf(<span class="string">'/'</span>);</span><br /><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) {</span><br /><span class="line">        String parentPath = path.substring(<span class="number">0</span>, i);</span><br /><span class="line">        <span class="keyword">if</span> (!checkExists(parentPath)) {</span><br /><span class="line">            create(parentPath, <span class="keyword">false</span>);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 创建临时节点</span></span><br /><span class="line">    <span class="keyword">if</span> (ephemeral) {</span><br /><span class="line">        createEphemeral(path);</span><br /><span class="line">    <span class="comment">// 创建持久节点</span></span><br /><span class="line">    } <span class="keyword">else</span> {</span><br /><span class="line">        createPersistent(path);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>#checkExists(path)</code>&nbsp;<strong>抽象</strong>方法，节点是否存在。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">checkExists</span><span class="params">(String path)</span></span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p><code>#createEphemeral(path)</code>&nbsp;<strong>抽象</strong>方法，创建临时节点。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">createPersistent</span><span class="params">(String path)</span></span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p><code>#createPersistent(path)</code>&nbsp;<strong>抽象</strong>方法，创建持久节点。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">createEphemeral</span><span class="params">(String path)</span></span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<h3 id="2-4-3-StateListener-相关方法">2.4.3 StateListener 相关方法</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStateListener</span><span class="params">(StateListener listener)</span> </span>{</span><br /><span class="line">    stateListeners.add(listener);</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeStateListener</span><span class="params">(StateListener listener)</span> </span>{</span><br /><span class="line">    stateListeners.remove(listener);</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;StateListener&gt; <span class="title">getSessionListeners</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> stateListeners;</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * StateListener 数组，回调</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> state 状态</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>{</span><br /><span class="line">    <span class="keyword">for</span> (StateListener sessionListener : getSessionListeners()) {</span><br /><span class="line">        sessionListener.stateChanged(state);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="2-4-4-ChildListener-相关方法">2.4.4 ChildListener 相关方法</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">addChildListener</span><span class="params">(String path, <span class="keyword">final</span> ChildListener listener)</span> </span>{</span><br /><span class="line">    <span class="comment">// 获得路径下的监听器数组</span></span><br /><span class="line">    ConcurrentMap&lt;ChildListener, TargetChildListener&gt; listeners = childListeners.get(path);</span><br /><span class="line">    <span class="keyword">if</span> (listeners == <span class="keyword">null</span>) {</span><br /><span class="line">        childListeners.putIfAbsent(path, <span class="keyword">new</span> ConcurrentHashMap&lt;ChildListener, TargetChildListener&gt;());</span><br /><span class="line">        listeners = childListeners.get(path);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 获得是否已经有该监听器</span></span><br /><span class="line">    TargetChildListener targetListener = listeners.get(listener);</span><br /><span class="line">    <span class="comment">// 监听器不存在，进行创建</span></span><br /><span class="line">    <span class="keyword">if</span> (targetListener == <span class="keyword">null</span>) {</span><br /><span class="line">        listeners.putIfAbsent(listener, createTargetChildListener(path, listener));</span><br /><span class="line">        targetListener = listeners.get(listener);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 向 Zookeeper ，真正发起订阅</span></span><br /><span class="line">    <span class="keyword">return</span> addTargetChildListener(path, targetListener);</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeChildListener</span><span class="params">(String path, ChildListener listener)</span> </span>{</span><br /><span class="line">    ConcurrentMap&lt;ChildListener, TargetChildListener&gt; listeners = childListeners.get(path);</span><br /><span class="line">    <span class="keyword">if</span> (listeners != <span class="keyword">null</span>) {</span><br /><span class="line">        TargetChildListener targetListener = listeners.remove(listener);</span><br /><span class="line">        <span class="keyword">if</span> (targetListener != <span class="keyword">null</span>) {</span><br /><span class="line">            <span class="comment">// 向 Zookeeper ，真正发起取消订阅</span></span><br /><span class="line">            removeTargetChildListener(path, targetListener);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>#createTargetChildListener(path, listener)</code>&nbsp;<strong>抽象</strong>方法，创建真正的 ChildListener 对象。因为，每个 Zookeeper 的库，实现不同。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> TargetChildListener <span class="title">createTargetChildListener</span><span class="params">(String path, ChildListener listener)</span></span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p><code>#addTargetChildListener(path, targetListener)</code>&nbsp;<strong>抽象</strong>方法，向 Zookeeper ，真正发起订阅。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> List&lt;String&gt; <span class="title">addTargetChildListener</span><span class="params">(String path, TargetChildListener listener)</span></span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p><code>#removeTargetChildListener(path, targetListener)</code>&nbsp;<strong>抽象</strong>方法，向 Zookeeper ，真正发起取消订阅。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">removeTargetChildListener</span><span class="params">(String path, TargetChildListener listener)</span></span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<h3 id="2-4-5-close">2.4.5 close</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="keyword">if</span> (closed) {</span><br /><span class="line">        <span class="keyword">return</span>;</span><br /><span class="line">    }</span><br /><span class="line">    closed = <span class="keyword">true</span>;</span><br /><span class="line">    <span class="keyword">try</span> {</span><br /><span class="line">        doClose();</span><br /><span class="line">    } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line">        logger.warn(t.getMessage(), t);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>#doClose()</code>&nbsp;<strong>抽象</strong>方法，关闭 Zookeeper 连接。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doClose</span><span class="params">()</span></span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<h2 id="2-5-ZookeeperTransporter">2.5 ZookeeperTransporter</h2>
<p><code>com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter</code>&nbsp;，Zookeeper 工厂接口，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@SPI</span>(<span class="string">"curator"</span>)</span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ZookeeperTransporter</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 连接创建 ZookeeperClient 对象</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 注册中心地址</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@return</span> ZookeeperClient 对象</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="meta">@Adaptive</span>({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY})</span><br /><span class="line">    <span class="function">ZookeeperClient <span class="title">connect</span><span class="params">(URL url)</span></span>;</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>#connect(url)</code>&nbsp;方法，连接创建 ZookeeperClient 对象。</li>
<li><code>@SPI("curator")</code>&nbsp;注解，使用 Dubbo SPI 机制，默认使用 Curator 实现。</li>
<li><code>@Adaptive({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY})</code>&nbsp;注解，使用 Dubbo SPI Adaptive 机制，根据&nbsp;<code>url</code>&nbsp;参数，加载对应的 ZookeeperTransporter 拓展实现类。</li>
</ul>
<h1 id="3-基于-Curator-实现">3. 基于 Curator 实现</h1>
<p>Apache Curator ，作为 Zookeeper 客户端的库，基本是<strong>最佳</strong>的选择，在 Sharding-JDBC、Elastic-Job 等等中间都选择了 Curator 连接 Zookeeper 。</p>
<blockquote>
<p>友情提示，如果对 Curator 的 API 不熟悉的胖友，推荐看下官方文档，进行下学习。<br />🙂 本文不会写 Curator 使用方法。</p>
</blockquote>
<h2 id="3-1-CuratorZookeeperClient">3.1 CuratorZookeeperClient</h2>
<p><code>com.alibaba.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient</code>&nbsp;，实现 ZookeeperTransporter 抽象类，基于 Curator 的 Zookeeper 客户端实现类。</p>
<h3 id="3-1-1-属性">3.1.1 属性</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * client 对象</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CuratorFramework client;</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CuratorZookeeperClient</span><span class="params">(URL url)</span> </span>{</span><br /><span class="line">    <span class="keyword">super</span>(url);</span><br /><span class="line">    <span class="keyword">try</span> {</span><br /><span class="line">        <span class="comment">// 创建 client 对象</span></span><br /><span class="line">        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()</span><br /><span class="line">                .connectString(url.getBackupAddress()) <span class="comment">// 连接地址</span></span><br /><span class="line">                .retryPolicy(<span class="keyword">new</span> RetryNTimes(<span class="number">1</span>, <span class="number">1000</span>)) <span class="comment">// 重试策略，1 次，间隔 1000 ms</span></span><br /><span class="line">                .connectionTimeoutMs(<span class="number">5000</span>); <span class="comment">// 连接超时时间</span></span><br /><span class="line">        String authority = url.getAuthority();</span><br /><span class="line">        <span class="keyword">if</span> (authority != <span class="keyword">null</span> &amp;&amp; authority.length() &gt; <span class="number">0</span>) {</span><br /><span class="line">            builder = builder.authorization(<span class="string">"digest"</span>, authority.getBytes());</span><br /><span class="line">        }</span><br /><span class="line">        client = builder.build();</span><br /><span class="line">        <span class="comment">// 添加连接监听器</span></span><br /><span class="line">        client.getConnectionStateListenable().addListener(<span class="keyword">new</span> ConnectionStateListener() {</span><br /><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(CuratorFramework client, ConnectionState state)</span> </span>{</span><br /><span class="line">                <span class="keyword">if</span> (state == ConnectionState.LOST) {</span><br /><span class="line">                    CuratorZookeeperClient.<span class="keyword">this</span>.stateChanged(StateListener.DISCONNECTED);</span><br /><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (state == ConnectionState.CONNECTED) {</span><br /><span class="line">                    CuratorZookeeperClient.<span class="keyword">this</span>.stateChanged(StateListener.CONNECTED);</span><br /><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (state == ConnectionState.RECONNECTED) {</span><br /><span class="line">                    CuratorZookeeperClient.<span class="keyword">this</span>.stateChanged(StateListener.RECONNECTED);</span><br /><span class="line">                }</span><br /><span class="line">            }</span><br /><span class="line">        });</span><br /><span class="line">        <span class="comment">// 启动 client</span></span><br /><span class="line">        client.start();</span><br /><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>在连接状态发生变化时，调用&nbsp;<code>#stateChange(state)</code>&nbsp;方法，进行 StateListener 的回调。</li>
</ul>
<h3 id="3-1-2-create-相关方法">3.1.2 create 相关方法</h3>
<ul>
<li><a href="https://github.com/YunaiV/dubbo/blob/414a4799cef08f0b5263d838eeaf8d8f169f2cdc/dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java#L72-L79" target="_blank" rel="external nofollow noopener noreferrer"><code>#createPersistent(path)</code></a></li>
<li><a href="https://github.com/YunaiV/dubbo/blob/414a4799cef08f0b5263d838eeaf8d8f169f2cdc/dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java#L81-L88" target="_blank" rel="external nofollow noopener noreferrer"><code>#createEphemeral(path)</code></a></li>
<li><a href="https://github.com/YunaiV/dubbo/blob/414a4799cef08f0b5263d838eeaf8d8f169f2cdc/dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java#L109-L117" target="_blank" rel="external nofollow noopener noreferrer"><code>#checkExists(path)</code></a></li>
</ul>
<h3 id="3-1-3-ChildListener-相关方法">3.1.3 ChildListener 相关方法</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">public</span> CuratorWatcher <span class="title">createTargetChildListener</span><span class="params">(String path, ChildListener listener)</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CuratorWatcherImpl(listener);</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">addTargetChildListener</span><span class="params">(String path, CuratorWatcher listener)</span> </span>{</span><br /><span class="line">    <span class="keyword">try</span> {</span><br /><span class="line">        <span class="keyword">return</span> client.getChildren().usingWatcher(listener).forPath(path);</span><br /><span class="line">    } <span class="keyword">catch</span> (NoNodeException e) {</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br /><span class="line">    }</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeTargetChildListener</span><span class="params">(String path, CuratorWatcher listener)</span> </span>{</span><br /><span class="line">    ((CuratorWatcherImpl) listener).unwatch();</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorWatcherImpl</span> <span class="keyword">implements</span> <span class="title">CuratorWatcher</span> </span>{</span><br /><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ChildListener listener;</span><br /><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CuratorWatcherImpl</span><span class="params">(ChildListener listener)</span> </span>{</span><br /><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unwatch</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">this</span>.listener = <span class="keyword">null</span>;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> <span class="keyword">throws</span> Exception </span>{</span><br /><span class="line">        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) {</span><br /><span class="line">            String path = event.getPath() == <span class="keyword">null</span> ? <span class="string">""</span> : event.getPath();</span><br /><span class="line">            listener.childChanged(path,</span><br /><span class="line">                    <span class="comment">// if path is null, curator using watcher will throw NullPointerException.</span></span><br /><span class="line">                    <span class="comment">// if client connect or disconnect to server, zookeeper will queue</span></span><br /><span class="line">                    <span class="comment">// watched event(Watcher.Event.EventType.None, .., path = null).</span></span><br /><span class="line">                    StringUtils.isNotEmpty(path)</span><br /><span class="line">                            ? client.getChildren().usingWatcher(<span class="keyword">this</span>).forPath(path) <span class="comment">// 重新发起连接，并传入最新的子节点列表</span></span><br /><span class="line">                            : Collections.&lt;String&gt;emptyList()); <span class="comment">//</span></span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="3-1-4-close-相关方法">3.1.4 close 相关方法</h3>
<ul>
<li><a href="https://github.com/YunaiV/dubbo/blob/414a4799cef08f0b5263d838eeaf8d8f169f2cdc/dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java#L122-L124" target="_blank" rel="external nofollow noopener noreferrer"><code>#doClose()</code></a></li>
</ul>
<h3 id="3-1-5-delete">3.1.5 delete</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String path)</span> </span>{</span><br /><span class="line">    <span class="keyword">try</span> {</span><br /><span class="line">        client.delete().forPath(path);</span><br /><span class="line">    } <span class="keyword">catch</span> (NoNodeException e) {</span><br /><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p>无法通用，所以子类实现。</p>
<h3 id="3-1-6-getChildren">3.1.6 getChildren</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getChildren</span><span class="params">(String path)</span> </span>{</span><br /><span class="line">    <span class="keyword">try</span> {</span><br /><span class="line">        <span class="keyword">return</span> client.getChildren().forPath(path);</span><br /><span class="line">    } <span class="keyword">catch</span> (NoNodeException e) {</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="3-2-CuratorZookeeperTransporter">3.2 CuratorZookeeperTransporter</h2>
<p><code>com.alibaba.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter</code>&nbsp;，实现 ZookeeperTransporter 接口，CuratorZookeeper 工厂实现类。</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorZookeeperTransporter</span> <span class="keyword">implements</span> <span class="title">ZookeeperTransporter</span> </span>{</span><br /><br /><span class="line">    <span class="function"><span class="keyword">public</span> ZookeeperClient <span class="title">connect</span><span class="params">(URL url)</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CuratorZookeeperClient(url);</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h1 id="4-基于-ZkClient-实现">4. 基于 ZkClient 实现</h1>
<p>🙂 基于 ZkClient 的实现，本文仅列出标题。感兴趣的胖友，可以自己去看。</p>
<p>当然，良心如笔者，已经添加了中文注释。</p>
<h2 id="4-1-ZkclientZookeeperClient">4.1 ZkclientZookeeperClient</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/66a1e1b0ef4b01175be148d27fdcf519f4f01b15/dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/zkclient/ZkclientZookeeperClient.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.remoting.zookeeper.zkclient.ZkclientZookeeperClient</code></a></p>
<h3 id="4-1-1-ZkClientWrapper">4.1.1 ZkClientWrapper</h3>
<p><a href="https://github.com/YunaiV/dubbo/blob/66a1e1b0ef4b01175be148d27fdcf519f4f01b15/dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/zkclient/ZkClientWrapper.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.remoting.zookeeper.zkclient.ZkClientWrapper</code></a></p>
<h2 id="4-2-ZkclientZookeeperTransporter">4.2 ZkclientZookeeperTransporter</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/66a1e1b0ef4b01175be148d27fdcf519f4f01b15/dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/zkclient/ZkclientZookeeperTransporter.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.remoting.zookeeper.zkclient.ZkclientZookeeperTransporter</code></a></p>
</div>