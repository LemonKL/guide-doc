<header class="article-header">
<h1 class="article-title">服务调用（八）之远程调用（Redis）</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>本文，我们分享&nbsp;<code>redis://</code>&nbsp;协议的远程调用，主要分成<strong>两个个部分</strong>：</p>
<ul>
<li><del>服务暴露</del></li>
<li>服务引用</li>
<li>服务调用</li>
</ul>
<p>对应项目为&nbsp;<code>dubbo-rpc-redis</code>&nbsp;。</p>
<p>对应文档为&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/protocol/redis.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; redis://》</a>&nbsp;。定义如下：</p>
<blockquote>
<p>基于 Redis 实现的 RPC 协议。</p>
</blockquote>
<p>简单的说，通过 Dubbo Service 的调用方式，<strong>透明化</strong>对 Redis 的访问。<br />这样，如果未来希望，修改缓存的解决方案，不用修改代码，而只要修改 Dubbo Service 的配置。<br />就好像，Java JDBC API 有 MySQL JDBC 、Oracle JDBC 等多种实现，只需要修改对应的 JDBC 驱动实现类，就可以连接上不同的数据库。</p>
<p>另外，Dubbo 提供&nbsp;<code>memcached://</code>&nbsp;协议，和&nbsp;<code>redis://</code>&nbsp;对等，差别点在前者使用 Memcached ，后者使用 Redis 。</p>
<h1 id="2-RedisProtocol">2. RedisProtocol</h1>
<p><a href="https://github.com/YunaiV/dubbo/blob/master/dubbo-rpc/dubbo-rpc-redis/src/main/java/com/alibaba/dubbo/rpc/protocol/redis/RedisProtocol.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.rpc.protocol.redis.RedisProtocol</code></a>&nbsp;，实现 AbstractProtocol 抽象类，<code>redis://</code>&nbsp;协议实现类。</p>
<h2 id="2-1-export">2.1 export</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>{</span><br /><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Unsupported export redis service. url: "</span> + invoker.getUrl());</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p>实际访问的就是 Redis Server 实例，因此无需进行 Dubbo 服务暴露。客户端配置引用方式如下：</p>
<blockquote>
<p>在客户端使用，注册中心读取：<br /><code>&lt;dubbo:reference id="store" interface="java.util.Map" group="member" /&gt;</code></p>
<p>或者，点对点直连：<br /><code>&lt;dubbo:reference id="store" interface="java.util.Map" url="redis://10.20.153.10:6379"</code></p>
</blockquote>
<h2 id="2-2-refer">2.2 refer</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">  <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line">  <span class="number">2</span>: <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; type, <span class="keyword">final</span> URL url)</span> <span class="keyword">throws</span> RpcException </span>{</span><br /><span class="line">  <span class="number">3</span>:     <span class="keyword">try</span> {</span><br /><span class="line">  <span class="number">4</span>:         <span class="comment">// 创建 GenericObjectPoolConfig 对象，设置配置</span></span><br /><span class="line">  <span class="number">5</span>:         GenericObjectPoolConfig config = <span class="keyword">new</span> GenericObjectPoolConfig();</span><br /><span class="line">  <span class="number">6</span>:         config.setTestOnBorrow(url.getParameter(<span class="string">"test.on.borrow"</span>, <span class="keyword">true</span>));</span><br /><span class="line">  <span class="number">7</span>:         config.setTestOnReturn(url.getParameter(<span class="string">"test.on.return"</span>, <span class="keyword">false</span>));</span><br /><span class="line">  <span class="number">8</span>:         config.setTestWhileIdle(url.getParameter(<span class="string">"test.while.idle"</span>, <span class="keyword">false</span>));</span><br /><span class="line">  <span class="number">9</span>:         <span class="keyword">if</span> (url.getParameter(<span class="string">"max.idle"</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br /><span class="line"> <span class="number">10</span>:             config.setMaxIdle(url.getParameter(<span class="string">"max.idle"</span>, <span class="number">0</span>));</span><br /><span class="line"> <span class="number">11</span>:         <span class="keyword">if</span> (url.getParameter(<span class="string">"min.idle"</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br /><span class="line"> <span class="number">12</span>:             config.setMinIdle(url.getParameter(<span class="string">"min.idle"</span>, <span class="number">0</span>));</span><br /><span class="line"> <span class="number">13</span>:         <span class="keyword">if</span> (url.getParameter(<span class="string">"max.active"</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br /><span class="line"> <span class="number">14</span>:             config.setMaxTotal(url.getParameter(<span class="string">"max.active"</span>, <span class="number">0</span>));</span><br /><span class="line"> <span class="number">15</span>:         <span class="keyword">if</span> (url.getParameter(<span class="string">"max.total"</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br /><span class="line"> <span class="number">16</span>:             config.setMaxTotal(url.getParameter(<span class="string">"max.total"</span>, <span class="number">0</span>));</span><br /><span class="line"> <span class="number">17</span>:         <span class="keyword">if</span> (url.getParameter(<span class="string">"max.wait"</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br /><span class="line"> <span class="number">18</span>:             config.setMaxWaitMillis(url.getParameter(<span class="string">"max.wait"</span>, <span class="number">0</span>));</span><br /><span class="line"> <span class="number">19</span>:         <span class="keyword">if</span> (url.getParameter(<span class="string">"num.tests.per.eviction.run"</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br /><span class="line"> <span class="number">20</span>:             config.setNumTestsPerEvictionRun(url.getParameter(<span class="string">"num.tests.per.eviction.run"</span>, <span class="number">0</span>));</span><br /><span class="line"> <span class="number">21</span>:         <span class="keyword">if</span> (url.getParameter(<span class="string">"time.between.eviction.runs.millis"</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br /><span class="line"> <span class="number">22</span>:             config.setTimeBetweenEvictionRunsMillis(url.getParameter(<span class="string">"time.between.eviction.runs.millis"</span>, <span class="number">0</span>));</span><br /><span class="line"> <span class="number">23</span>:         <span class="keyword">if</span> (url.getParameter(<span class="string">"min.evictable.idle.time.millis"</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br /><span class="line"> <span class="number">24</span>:             config.setMinEvictableIdleTimeMillis(url.getParameter(<span class="string">"min.evictable.idle.time.millis"</span>, <span class="number">0</span>));</span><br /><span class="line"> <span class="number">25</span>:         <span class="comment">// 创建 JedisPool 对象</span></span><br /><span class="line"> <span class="number">26</span>:         <span class="keyword">final</span> JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config, url.getHost(), url.getPort(DEFAULT_PORT),</span><br /><span class="line"> <span class="number">27</span>:                 url.getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT));</span><br /><span class="line"> <span class="number">28</span>: </span><br /><span class="line"> <span class="number">29</span>:         <span class="comment">// 处理方法名的映射</span></span><br /><span class="line"> <span class="number">30</span>:         <span class="keyword">final</span> <span class="keyword">int</span> expiry = url.getParameter(<span class="string">"expiry"</span>, <span class="number">0</span>);</span><br /><span class="line"> <span class="number">31</span>:         <span class="keyword">final</span> String get = url.getParameter(<span class="string">"get"</span>, <span class="string">"get"</span>);</span><br /><span class="line"> <span class="number">32</span>:         <span class="keyword">final</span> String set = url.getParameter(<span class="string">"set"</span>, Map.class.equals(type) ? <span class="string">"put"</span> : <span class="string">"set"</span>);</span><br /><span class="line"> <span class="number">33</span>:         <span class="keyword">final</span> String delete = url.getParameter(<span class="string">"delete"</span>, Map.class.equals(type) ? <span class="string">"remove"</span> : <span class="string">"delete"</span>);</span><br /><span class="line"> <span class="number">34</span>: </span><br /><span class="line"> <span class="number">35</span>:         <span class="comment">// 创建 Invoker 对象</span></span><br /><span class="line"> <span class="number">36</span>:         <span class="keyword">return</span> <span class="keyword">new</span> AbstractInvoker&lt;T&gt;(type, url) {</span><br /><span class="line"> <span class="number">37</span>: </span><br /><span class="line"> <span class="number">38</span>:             <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">39</span>:             <span class="function"><span class="keyword">protected</span> Result <span class="title">doInvoke</span><span class="params">(Invocation invocation)</span> </span>{</span><br /><span class="line"> <span class="number">40</span>:                 Jedis resource = <span class="keyword">null</span>;</span><br /><span class="line"> <span class="number">41</span>:                 <span class="keyword">try</span> {</span><br /><span class="line"> <span class="number">42</span>:                     <span class="comment">// 获得 Redis Resource</span></span><br /><span class="line"> <span class="number">43</span>:                     resource = jedisPool.getResource();</span><br /><span class="line"> <span class="number">44</span>:                     <span class="comment">// Redis get 指令</span></span><br /><span class="line"> <span class="number">45</span>:                     <span class="keyword">if</span> (get.equals(invocation.getMethodName())) {</span><br /><span class="line"> <span class="number">46</span>:                         <span class="keyword">if</span> (invocation.getArguments().length != <span class="number">1</span>) {</span><br /><span class="line"> <span class="number">47</span>:                             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The redis get method arguments mismatch, must only one arguments. interface: "</span> + type.getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", url: "</span> + url);</span><br /><span class="line"> <span class="number">48</span>:                         }</span><br /><span class="line"> <span class="number">49</span>:                         <span class="comment">// 获得值</span></span><br /><span class="line"> <span class="number">50</span>:                         <span class="keyword">byte</span>[] value = resource.get(String.valueOf(invocation.getArguments()[<span class="number">0</span>]).getBytes());</span><br /><span class="line"> <span class="number">51</span>:                         <span class="keyword">if</span> (value == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">52</span>:                             <span class="keyword">return</span> <span class="keyword">new</span> RpcResult();</span><br /><span class="line"> <span class="number">53</span>:                         }</span><br /><span class="line"> <span class="number">54</span>:                         <span class="comment">// 反序列化</span></span><br /><span class="line"> <span class="number">55</span>:                         ObjectInput oin = getSerialization(url).deserialize(url, <span class="keyword">new</span> ByteArrayInputStream(value));</span><br /><span class="line"> <span class="number">56</span>:                         <span class="comment">// 返回结果</span></span><br /><span class="line"> <span class="number">57</span>:                         <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(oin.readObject());</span><br /><span class="line"> <span class="number">58</span>:                     <span class="comment">// Redis set/put 指令</span></span><br /><span class="line"> <span class="number">59</span>:                     } <span class="keyword">else</span> <span class="keyword">if</span> (set.equals(invocation.getMethodName())) {</span><br /><span class="line"> <span class="number">60</span>:                         <span class="keyword">if</span> (invocation.getArguments().length != <span class="number">2</span>) {</span><br /><span class="line"> <span class="number">61</span>:                             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The redis set method arguments mismatch, must be two arguments. interface: "</span> + type.getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", url: "</span> + url);</span><br /><span class="line"> <span class="number">62</span>:                         }</span><br /><span class="line"> <span class="number">63</span>:                         <span class="comment">// 序列化</span></span><br /><span class="line"> <span class="number">64</span>:                         <span class="keyword">byte</span>[] key = String.valueOf(invocation.getArguments()[<span class="number">0</span>]).getBytes();</span><br /><span class="line"> <span class="number">65</span>:                         ByteArrayOutputStream output = <span class="keyword">new</span> ByteArrayOutputStream();</span><br /><span class="line"> <span class="number">66</span>:                         ObjectOutput value = getSerialization(url).serialize(url, output);</span><br /><span class="line"> <span class="number">67</span>:                         value.writeObject(invocation.getArguments()[<span class="number">1</span>]);</span><br /><span class="line"> <span class="number">68</span>:                         <span class="comment">// 设置值</span></span><br /><span class="line"> <span class="number">69</span>:                         resource.set(key, output.toByteArray());</span><br /><span class="line"> <span class="number">70</span>:                         <span class="keyword">if</span> (expiry &gt; <span class="number">1000</span>) {</span><br /><span class="line"> <span class="number">71</span>:                             resource.expire(key, expiry / <span class="number">1000</span>);</span><br /><span class="line"> <span class="number">72</span>:                         }</span><br /><span class="line"> <span class="number">73</span>:                         <span class="comment">// 返回结果</span></span><br /><span class="line"> <span class="number">74</span>:                         <span class="keyword">return</span> <span class="keyword">new</span> RpcResult();</span><br /><span class="line"> <span class="number">75</span>:                     } <span class="keyword">else</span> <span class="keyword">if</span> (delete.equals(invocation.getMethodName())) {</span><br /><span class="line"> <span class="number">76</span>:                         <span class="keyword">if</span> (invocation.getArguments().length != <span class="number">1</span>) {</span><br /><span class="line"> <span class="number">77</span>:                             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The redis delete method arguments mismatch, must only one arguments. interface: "</span> + type.getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", url: "</span> + url);</span><br /><span class="line"> <span class="number">78</span>:                         }</span><br /><span class="line"> <span class="number">79</span>:                         <span class="comment">// 删除值</span></span><br /><span class="line"> <span class="number">80</span>:                         resource.del(String.valueOf(invocation.getArguments()[<span class="number">0</span>]).getBytes());</span><br /><span class="line"> <span class="number">81</span>:                         <span class="comment">// 返回结果</span></span><br /><span class="line"> <span class="number">82</span>:                         <span class="keyword">return</span> <span class="keyword">new</span> RpcResult();</span><br /><span class="line"> <span class="number">83</span>:                     } <span class="keyword">else</span> {</span><br /><span class="line"> <span class="number">84</span>:                         <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Unsupported method "</span> + invocation.getMethodName() + <span class="string">" in redis service."</span>);</span><br /><span class="line"> <span class="number">85</span>:                     }</span><br /><span class="line"> <span class="number">86</span>:                 } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line"> <span class="number">87</span>:                     RpcException re = <span class="keyword">new</span> RpcException(<span class="string">"Failed to invoke redis service method. interface: "</span> + type.getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", url: "</span> + url + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br /><span class="line"> <span class="number">88</span>:                     <span class="keyword">if</span> (t <span class="keyword">instanceof</span> TimeoutException || t <span class="keyword">instanceof</span> SocketTimeoutException) {</span><br /><span class="line"> <span class="number">89</span>:                         re.setCode(RpcException.TIMEOUT_EXCEPTION);</span><br /><span class="line"> <span class="number">90</span>:                     } <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> JedisConnectionException || t <span class="keyword">instanceof</span> IOException) {</span><br /><span class="line"> <span class="number">91</span>:                         re.setCode(RpcException.NETWORK_EXCEPTION);</span><br /><span class="line"> <span class="number">92</span>:                     } <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> JedisDataException) {</span><br /><span class="line"> <span class="number">93</span>:                         re.setCode(RpcException.SERIALIZATION_EXCEPTION);</span><br /><span class="line"> <span class="number">94</span>:                     }</span><br /><span class="line"> <span class="number">95</span>:                     <span class="keyword">throw</span> re;</span><br /><span class="line"> <span class="number">96</span>:                 } <span class="keyword">finally</span> {</span><br /><span class="line"> <span class="number">97</span>:                     <span class="comment">// 归还 Redis Resource</span></span><br /><span class="line"> <span class="number">98</span>:                     <span class="keyword">if</span> (resource != <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">99</span>:                         <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">100</span>:                             jedisPool.returnResource(resource);</span><br /><span class="line"><span class="number">101</span>:                         } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line"><span class="number">102</span>:                             logger.warn(<span class="string">"returnResource error: "</span> + t.getMessage(), t);</span><br /><span class="line"><span class="number">103</span>:                         }</span><br /><span class="line"><span class="number">104</span>:                     }</span><br /><span class="line"><span class="number">105</span>:                 }</span><br /><span class="line"><span class="number">106</span>:             }</span><br /><span class="line"><span class="number">107</span>: </span><br /><span class="line"><span class="number">108</span>:             <span class="meta">@Override</span></span><br /><span class="line"><span class="number">109</span>:             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br /><span class="line"><span class="number">110</span>:                 <span class="comment">// 标记销毁</span></span><br /><span class="line"><span class="number">111</span>:                 <span class="keyword">super</span>.destroy();</span><br /><span class="line"><span class="number">112</span>:                 <span class="comment">// 销毁 Redis Pool</span></span><br /><span class="line"><span class="number">113</span>:                 <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">114</span>:                     jedisPool.destroy();</span><br /><span class="line"><span class="number">115</span>:                 } <span class="keyword">catch</span> (Throwable e) {</span><br /><span class="line"><span class="number">116</span>:                     logger.warn(e.getMessage(), e);</span><br /><span class="line"><span class="number">117</span>:                 }</span><br /><span class="line"><span class="number">118</span>:             }</span><br /><span class="line"><span class="number">119</span>: </span><br /><span class="line"><span class="number">120</span>:         };</span><br /><span class="line"><span class="number">121</span>:     } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line"><span class="number">122</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Failed to refer redis service. interface: "</span> + type.getName() + <span class="string">", url: "</span> + url + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br /><span class="line"><span class="number">123</span>:     }</span><br /><span class="line"><span class="number">124</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>使用 Jedis 访问 Redis Server 。</li>
<li>第 4 至 24 行：创建 GenericObjectPoolConfig 对象，从 Dubbo URL 中读取相关配置。此时，我们可以看到，为什么 Dubbo 的配置类中，有&nbsp;<code>arguments</code>&nbsp;属性了。可以使用它，实现不同 Protocol 协议的自定义属性。</li>
<li>第 25 至 27 行：创建 JedisPool 对象。</li>
<li>
<p>第 29 至 33 行：处理方法名的映射。</p>
<blockquote>
<p>如果方法名和 redis 的标准方法名不相同，则需要配置映射关系：<br /><code>&lt;dubbo:reference id="cache" interface="com.foo.CacheService" url="memcached://10.20.153.10:11211" p:set="putFoo" p:get="getFoo" p:delete="removeFoo" /&gt;</code></p>
</blockquote>
<ul>
<li>当对应的服务接口是&nbsp;<code>java.util.Map</code>&nbsp;时，对应的 Redis 数据结构为&nbsp;<strong>Map</strong>&nbsp;。</li>
</ul>
</li>
<li>
<p>第 35 至 120 行：创建 Invoker 对象。</p>
</li>
</ul>
<h3 id="2-2-1-doInvoke">2.2.1 doInvoke</h3>
<ul>
<li>第 43 行：获得 Redis Resource 对象。</li>
<li>第 44 至 57 行：Redis&nbsp;<strong>get</strong>&nbsp;指令。</li>
<li>第 58 至 74 行：Redis&nbsp;<strong>set/put</strong>&nbsp;指令。</li>
<li>第 75 至 83 行：Redis&nbsp;<strong>delete/remove</strong>&nbsp;指令。</li>
<li>第 84 至 85 行：目前其他命令，暂时不支持。</li>
<li>第 86 至 95 行：翻译异常成 Dubbo 错误码。</li>
<li>第 97 至 105 行：归还 Redis Resource 对象。</li>
</ul>
<h3 id="2-2-2-destroy">2.2.2 destroy</h3>
<ul>
<li>第 111 行：调用&nbsp;<code>super#destroy()</code>&nbsp;方法，标记销毁。</li>
<li>第 112 至 117 行：调用&nbsp;<code>JedisPool#destroy()</code>&nbsp;方法，销毁 Redis Pool 。</li>
</ul>
</div>