<header class="article-header">
<h1 class="article-title">服务调用（九）之远程调用（Memcached）</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>本文接&nbsp;<a href="http://svip.iocoder.cn/Dubbo/rpc-redis/?self">《精尽 Dubbo 源码分析 &mdash;&mdash; 服务调用（八）之远程调用（Redis）》</a>&nbsp;，我们分享&nbsp;<code>memcached://</code>协议的远程调用，主要分成<strong>两个个部分</strong>：</p>
<ul>
<li><del>服务暴露</del></li>
<li>服务引用</li>
<li>服务调用</li>
</ul>
<p>对应项目为&nbsp;<code>dubbo-rpc-memcached</code>&nbsp;。</p>
<p>对应文档为&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/protocol/memcached.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; memcached://》</a>&nbsp;。定义如下：</p>
<blockquote>
<p>基于 Memcached 实现的 RPC 协议。</p>
</blockquote>
<h1 id="2-MemcachedProtocol">2. MemcachedProtocol</h1>
<p><a href="https://github.com/YunaiV/dubbo/blob/master/dubbo-rpc/dubbo-rpc-memcached/src/main/java/com/alibaba/dubbo/rpc/protocol/memcached/MemcachedProtocol.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.rpc.protocol.memcached.MemcachedProtocol</code></a>&nbsp;，实现 AbstractProtocol 抽象类，<code>memcached://</code>&nbsp;协议实现类。</p>
<h2 id="2-1-export">2.1 export</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code" style="background-color: #754182;">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>{</span><br /><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Unsupported export redis service. url: "</span> + invoker.getUrl());</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p>实际访问的就是 Memcached Server 实例，因此无需进行 Dubbo 服务暴露。客户端配置引用方式如下：</p>
<blockquote>
<p>在客户端使用，注册中心读取：<br /><code>&lt;dubbo:reference id="store" interface="java.util.Map" group="member" /&gt;</code></p>
<p>或者，点对点直连：<br /><code>&lt;dubbo:reference id="store" interface="java.util.Map" url="memcached://10.20.153.10:11211"</code></p>
</blockquote>
<h2 id="2-2-refer">2.2 refer</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code" style="background-color: #9160ab;">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; type, <span class="keyword">final</span> URL url)</span> <span class="keyword">throws</span> RpcException </span>{</span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">try</span> {</span><br /><span class="line"> <span class="number">4</span>:         <span class="comment">// 创建 MemcachedClient 对象</span></span><br /><span class="line"> <span class="number">5</span>:         String address = url.getAddress();</span><br /><span class="line"> <span class="number">6</span>:         String backup = url.getParameter(Constants.BACKUP_KEY);</span><br /><span class="line"> <span class="number">7</span>:         <span class="keyword">if</span> (backup != <span class="keyword">null</span> &amp;&amp; backup.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">8</span>:             address += <span class="string">","</span> + backup;</span><br /><span class="line"> <span class="number">9</span>:         }</span><br /><span class="line"><span class="number">10</span>:         MemcachedClientBuilder builder = <span class="keyword">new</span> XMemcachedClientBuilder(AddrUtil.getAddresses(address));</span><br /><span class="line"><span class="number">11</span>:         <span class="keyword">final</span> MemcachedClient memcachedClient = builder.build();</span><br /><span class="line"><span class="number">12</span>: </span><br /><span class="line"><span class="number">13</span>:         <span class="comment">// 处理方法名的映射</span></span><br /><span class="line"><span class="number">14</span>:         <span class="keyword">final</span> <span class="keyword">int</span> expiry = url.getParameter(<span class="string">"expiry"</span>, <span class="number">0</span>);</span><br /><span class="line"><span class="number">15</span>:         <span class="keyword">final</span> String get = url.getParameter(<span class="string">"get"</span>, <span class="string">"get"</span>);</span><br /><span class="line"><span class="number">16</span>:         <span class="keyword">final</span> String set = url.getParameter(<span class="string">"set"</span>, Map.class.equals(type) ? <span class="string">"put"</span> : <span class="string">"set"</span>);</span><br /><span class="line"><span class="number">17</span>:         <span class="keyword">final</span> String delete = url.getParameter(<span class="string">"delete"</span>, Map.class.equals(type) ? <span class="string">"remove"</span> : <span class="string">"delete"</span>);</span><br /><span class="line"><span class="number">18</span>:         <span class="keyword">return</span> <span class="keyword">new</span> AbstractInvoker&lt;T&gt;(type, url) {</span><br /><span class="line"><span class="number">19</span>: </span><br /><span class="line"><span class="number">20</span>:             <span class="meta">@Override</span></span><br /><span class="line"><span class="number">21</span>:             <span class="function"><span class="keyword">protected</span> Result <span class="title">doInvoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>{</span><br /><span class="line"><span class="number">22</span>:                 <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">23</span>:                     <span class="comment">// Memcached get 指令</span></span><br /><span class="line"><span class="number">24</span>:                     <span class="keyword">if</span> (get.equals(invocation.getMethodName())) {</span><br /><span class="line"><span class="number">25</span>:                         <span class="keyword">if</span> (invocation.getArguments().length != <span class="number">1</span>) {</span><br /><span class="line"><span class="number">26</span>:                             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The memcached get method arguments mismatch, must only one arguments. interface: "</span> + type.getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", url: "</span> + url);</span><br /><span class="line"><span class="number">27</span>:                         }</span><br /><span class="line"><span class="number">28</span>:                         <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(memcachedClient.get(String.valueOf(invocation.getArguments()[<span class="number">0</span>])));</span><br /><span class="line"><span class="number">29</span>:                     <span class="comment">// Memcached set 指令</span></span><br /><span class="line"><span class="number">30</span>:                     } <span class="keyword">else</span> <span class="keyword">if</span> (set.equals(invocation.getMethodName())) {</span><br /><span class="line"><span class="number">31</span>:                         <span class="keyword">if</span> (invocation.getArguments().length != <span class="number">2</span>) {</span><br /><span class="line"><span class="number">32</span>:                             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The memcached set method arguments mismatch, must be two arguments. interface: "</span> + type.getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", url: "</span> + url);</span><br /><span class="line"><span class="number">33</span>:                         }</span><br /><span class="line"><span class="number">34</span>:                         memcachedClient.set(String.valueOf(invocation.getArguments()[<span class="number">0</span>]), expiry, invocation.getArguments()[<span class="number">1</span>]);</span><br /><span class="line"><span class="number">35</span>:                         <span class="keyword">return</span> <span class="keyword">new</span> RpcResult();</span><br /><span class="line"><span class="number">36</span>:                     <span class="comment">// Memcached delele 指令</span></span><br /><span class="line"><span class="number">37</span>:                     } <span class="keyword">else</span> <span class="keyword">if</span> (delete.equals(invocation.getMethodName())) {</span><br /><span class="line"><span class="number">38</span>:                         <span class="keyword">if</span> (invocation.getArguments().length != <span class="number">1</span>) {</span><br /><span class="line"><span class="number">39</span>:                             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The memcached delete method arguments mismatch, must only one arguments. interface: "</span> + type.getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", url: "</span> + url);</span><br /><span class="line"><span class="number">40</span>:                         }</span><br /><span class="line"><span class="number">41</span>:                         memcachedClient.delete(String.valueOf(invocation.getArguments()[<span class="number">0</span>]));</span><br /><span class="line"><span class="number">42</span>:                         <span class="keyword">return</span> <span class="keyword">new</span> RpcResult();</span><br /><span class="line"><span class="number">43</span>:                     <span class="comment">// 不支持的指令，抛出异常</span></span><br /><span class="line"><span class="number">44</span>:                     } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">45</span>:                         <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Unsupported method "</span> + invocation.getMethodName() + <span class="string">" in memcached service."</span>);</span><br /><span class="line"><span class="number">46</span>:                     }</span><br /><span class="line"><span class="number">47</span>:                 } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line"><span class="number">48</span>:                     RpcException re = <span class="keyword">new</span> RpcException(<span class="string">"Failed to invoke memcached service method. interface: "</span> + type.getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", url: "</span> + url + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br /><span class="line"><span class="number">49</span>:                     <span class="keyword">if</span> (t <span class="keyword">instanceof</span> TimeoutException || t <span class="keyword">instanceof</span> SocketTimeoutException) {</span><br /><span class="line"><span class="number">50</span>:                         re.setCode(RpcException.TIMEOUT_EXCEPTION);</span><br /><span class="line"><span class="number">51</span>:                     } <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> MemcachedException || t <span class="keyword">instanceof</span> IOException) {</span><br /><span class="line"><span class="number">52</span>:                         re.setCode(RpcException.NETWORK_EXCEPTION);</span><br /><span class="line"><span class="number">53</span>:                     }</span><br /><span class="line"><span class="number">54</span>:                     <span class="keyword">throw</span> re;</span><br /><span class="line"><span class="number">55</span>:                 }</span><br /><span class="line"><span class="number">56</span>:             }</span><br /><span class="line"><span class="number">57</span>: </span><br /><span class="line"><span class="number">58</span>:             <span class="meta">@Override</span></span><br /><span class="line"><span class="number">59</span>:             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br /><span class="line"><span class="number">60</span>:                 <span class="comment">// 标记销毁</span></span><br /><span class="line"><span class="number">61</span>:                 <span class="keyword">super</span>.destroy();</span><br /><span class="line"><span class="number">62</span>:                 <span class="comment">// 关闭 MemcachedClient</span></span><br /><span class="line"><span class="number">63</span>:                 <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">64</span>:                     memcachedClient.shutdown();</span><br /><span class="line"><span class="number">65</span>:                 } <span class="keyword">catch</span> (Throwable e) {</span><br /><span class="line"><span class="number">66</span>:                     logger.warn(e.getMessage(), e);</span><br /><span class="line"><span class="number">67</span>:                 }</span><br /><span class="line"><span class="number">68</span>:             }</span><br /><span class="line"><span class="number">69</span>: </span><br /><span class="line"><span class="number">70</span>:         };</span><br /><span class="line"><span class="number">71</span>:     } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line"><span class="number">72</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Failed to refer memcached service. interface: "</span> + type.getName() + <span class="string">", url: "</span> + url + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br /><span class="line"><span class="number">73</span>:     }</span><br /><span class="line"><span class="number">74</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 4 至 11 行：创建 MemcachedClient 对象。</li>
<li>第 13 至 17 行：处理方法名的映射。此处有个问题，Memcached 不存在 Map 数据结构，因此不存在 put 和 remove 指令。</li>
<li>第 18 至 73 行：创建 Invoker 对象。</li>
</ul>
<h3 id="2-2-1-doInvoke">2.2.1 doInvoke</h3>
<ul>
<li>第 23 至 28 行：Memcached&nbsp;<strong>get</strong>&nbsp;指令。</li>
<li>第 29 至 35 行：Memcached&nbsp;<strong>set</strong>&nbsp;指令。</li>
<li>第 36 至 42 行：Memcached&nbsp;<strong>delete</strong>&nbsp;指令。</li>
<li>第 43 至 46 行：目前其他命令，暂时不支持。</li>
<li>第 47 至 55 行：翻译异常成 Dubbo 错误码。</li>
</ul>
<h3 id="2-2-2-destroy">2.2.2 destroy</h3>
<ul>
<li>第 61 行：调用&nbsp;<code>super#destroy()</code>&nbsp;方法，标记销毁。</li>
<li>第 63 至 67 行：调用&nbsp;<code>Memcached#shutdown()</code>&nbsp;方法，关闭 MemcachedClient 。</li>
</ul>
</div>