<header class="article-header">
<h1 class="article-title">API 配置（一）之应用</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<blockquote>
<p>友情提示，【<strong>配置</strong>】这块的内容，会相对比较枯燥。所以，如果看到一些很难懂的地方，建议先跳过。</p>
<p>对于 Dubbo ，重点是要去理解，多协议、RPC、容错等等模块，而不是【<strong>配置</strong>】。</p>
<p>😈 估计好多胖友被【<strong>配置</strong>】这章劝退了把？？？</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>我们都&ldquo;知道&rdquo;，Dubbo 的配置是非常&ldquo;灵活&rdquo;的。</p>
<p>例如，目前提供了四种<strong>配置方式</strong>：</p>
<ol>
<li>API 配置</li>
<li>属性配置</li>
<li>XML 配置</li>
<li>注解配置</li>
</ol>
<p>ps：🙂 后续的几篇文章也是按照这样的顺序，解析 Dubbo 配置的源码。</p>
<p>再例如，可灵活设置的<strong>配置项</strong>：</p>
<blockquote>
<p>FROM&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/introduction.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; schema 配置参考手册》</a></p>
<p>所有配置项分为三大类，参见下表中的&rdquo;作用&rdquo;一列。</p>
<ul>
<li>服务发现：表示该配置项用于服务的注册与发现，目的是让消费方找到提供方。</li>
<li>服务治理：表示该配置项用于治理服务间的关系，或为开发测试提供便利条件。</li>
<li>性能调优：表示该配置项用于调优性能，不同的选项对性能会产生影响。</li>
</ul>
<p>所有配置最终都将转换为 Dubbo URL 表示，并由服务提供方生成，经注册中心传递给消费方，各属性对应 URL 的参数，参见配置项一览表中的 &ldquo;对应URL参数&rdquo; 列。</p>
</blockquote>
<p>ps：🙂 可能转换成 Dubbo&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java" target="_blank" rel="external nofollow noopener noreferrer">URL</a>&nbsp;不太好理解。良心如笔者，后续有文章会贯串它。</p>
<p>当然，凡事都有两面性，在社区里也存在建议的声音，例如：<a href="https://github.com/alibaba/dubbo/issues/738" target="_blank" rel="external nofollow noopener noreferrer">《ISSUE#738：XML配置项重新梳理》</a>&nbsp;：</p>
<blockquote>
<p>目前有一些配置项存在暴露的位置不正确、暴露不全面、文档和含义不匹配等问题，期望在2.5.7版本将已知问题予以整理修复</p>
<p><strong>如果使用中有遇到的配置问题，请在评论中列出以便改进</strong></p>
</blockquote>
<h1 id="2-配置一览">2. 配置一览</h1>
<p>我们来看看&nbsp;<code>dubbo-config-api</code>&nbsp;的<strong>项目结构</strong>，如下图所示：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_01_07/01.png" alt="dubbo-config-api 项目结构" /></p>
<p>一脸懵逼，好多啊。下面我们来整理下<strong>配置之间的关系</strong>，如下图所示：</p>
<blockquote>
<p>FROM&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/configuration/xml.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; XML 配置》</a><br /><img src="http://static2.iocoder.cn/images/Dubbo/2018_01_07/02.png" alt="配置之间的关系" /></p>
</blockquote>
<p>从这张图中，可以看出分成<strong>四个</strong>部分：</p>
<ol>
<li>application-shared</li>
<li>provider-side</li>
<li>consumer-side</li>
<li>sub-config</li>
</ol>
<p>实际上，上图和目前版本的代码会存在一点点出入，我们在看看实际的<strong>类关系</strong>，如下图所示：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_01_07/03.png" alt="配置类关系" /></p>
<ul>
<li><strong>红勾</strong>部分，application-shared ，在本文进行分享。</li>
<li><strong>黄框</strong>部分，provider-side ，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-api-2/?self">《API 配置（二）之服务提供者》</a>&nbsp;分享。</li>
<li><strong>红框</strong>部分，consumer-side ，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-api-3/?self">《API 配置（三）之服务消费者》</a>&nbsp;分享。</li>
<li><strong>其他</strong>部分，sub-config ，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-api-2/?self">《API 配置（二）之服务提供者》</a>&nbsp;分享。</li>
</ul>
<h1 id="3-Config">3. Config</h1>
<p>我们先来看一段&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/configuration/api.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; API 配置》</a>&nbsp;，提供的消费者的初始化代码：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// 当前应用配置</span></span><br /><span class="line">ApplicationConfig application = <span class="keyword">new</span> ApplicationConfig();</span><br /><span class="line">application.setName(<span class="string">"yyy"</span>);</span><br /><br /><span class="line"><span class="comment">// 连接注册中心配置</span></span><br /><span class="line">RegistryConfig registry = <span class="keyword">new</span> RegistryConfig();</span><br /><span class="line">registry.setAddress(<span class="string">"10.20.130.230:9090"</span>);</span><br /><span class="line">registry.setUsername(<span class="string">"aaa"</span>);</span><br /><span class="line">registry.setPassword(<span class="string">"bbb"</span>);</span><br /><br /><span class="line"><span class="comment">// 注意：ReferenceConfig为重对象，内部封装了与注册中心的连接，以及与服务提供方的连接</span></span><br /><br /><span class="line"><span class="comment">// 引用远程服务</span></span><br /><span class="line">ReferenceConfig&lt;XxxService&gt; reference = <span class="keyword">new</span> ReferenceConfig&lt;XxxService&gt;(); <span class="comment">// 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏</span></span><br /><span class="line">reference.setApplication(application);</span><br /><span class="line">reference.setRegistry(registry); <span class="comment">// 多个注册中心可以用setRegistries()</span></span><br /><span class="line">reference.setInterface(XxxService.class);</span><br /><span class="line">reference.setVersion(<span class="string">"1.0.0"</span>);</span><br /><br /><span class="line"><span class="comment">// 和本地bean一样使用xxxService</span></span><br /><span class="line">XxxService xxxService = reference.get(); <span class="comment">// 注意：此代理对象内部封装了所有通讯细节，对象较重，请缓存复用</span></span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>可以看到，创建了 ApplicationConfig 和 RegistryConfig 对象，设置到 ReferenceConfig 对象。</li>
<li>如果创建 ModuleConfig 或 MonitorConfig 对象，也是可以设置到 ReferenceConfig 对象中。</li>
</ul>
<h2 id="3-1-AbstractConfig">3.1 AbstractConfig</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.config.AbstractConfig</code></a>&nbsp;，<strong>抽象</strong>配置类，除了 ArgumentConfig ，我们可以看到所有的配置类都继承该类。</p>
<p>AbstractConfig 主要提供配置解析与校验相关的工具方法。下面我们开始看看它的代码。</p>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L110" target="_blank" rel="external nofollow noopener noreferrer"><code>id</code></a>&nbsp;属性，配置对象的编号，适用于除了 API 配置<strong>之外</strong>的三种配置方式，标记一个配置对象，可用于对象之间的引用。例如 XML 的&nbsp;<code>&lt;dubbo:service provider="${PROVIDER_ID}"&gt;</code>&nbsp;，其中&nbsp;<code>provider</code>&nbsp;为&nbsp;<code>&lt;dubbo:provider&gt;</code>&nbsp;的 ID 属性。</p>
<p>那为什么说不适用 API 配置呢？直接&nbsp;<code>#setXXX(config)</code>&nbsp;对象即可。</p>
<hr />
<p>配置项校验的工具方法，例如属性值长度限制、格式限制等等，比较简单。相关代码如下：</p>
<ul>
<li><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L49-L67" target="_blank" rel="external nofollow noopener noreferrer">静态属性</a></li>
<li><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L413-L494" target="_blank" rel="external nofollow noopener noreferrer">静态方法</a></li>
</ul>
<hr />
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L244-L313" target="_blank" rel="external nofollow noopener noreferrer"><code>#appendParameters(parameters, config, prefix)</code></a>&nbsp;方法，将配置对象的属性，添加到参数集合。代码如下 ：</p>
<blockquote>
<p>在看具体代码之前，我们先来了解&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-api-1/">「4. URL」</a>&nbsp;和&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-api-1/">「5. @Parameter」</a>&nbsp;。</p>
</blockquote>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">appendParameters</span><span class="params">(Map&lt;String, String&gt; parameters, Object config, String prefix)</span> </span>{</span><br /><span class="line"> <span class="number">2</span>:     <span class="keyword">if</span> (config == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">3</span>:         <span class="keyword">return</span>;</span><br /><span class="line"> <span class="number">4</span>:     }</span><br /><span class="line"> <span class="number">5</span>:     Method[] methods = config.getClass().getMethods();</span><br /><span class="line"> <span class="number">6</span>:     <span class="keyword">for</span> (Method method : methods) {</span><br /><span class="line"> <span class="number">7</span>:         <span class="keyword">try</span> {</span><br /><span class="line"> <span class="number">8</span>:             String name = method.getName();</span><br /><span class="line"> <span class="number">9</span>:             <span class="keyword">if</span> ((name.startsWith(<span class="string">"get"</span>) || name.startsWith(<span class="string">"is"</span>))</span><br /><span class="line"><span class="number">10</span>:                     &amp;&amp; !<span class="string">"getClass"</span>.equals(name)</span><br /><span class="line"><span class="number">11</span>:                     &amp;&amp; Modifier.isPublic(method.getModifiers())</span><br /><span class="line"><span class="number">12</span>:                     &amp;&amp; method.getParameterTypes().length == <span class="number">0</span></span><br /><span class="line"><span class="number">13</span>:                     &amp;&amp; isPrimitive(method.getReturnType())) { <span class="comment">// 方法为获取基本类型，public 的 getting 方法。</span></span><br /><span class="line"><span class="number">14</span>:                 Parameter parameter = method.getAnnotation(Parameter.class);</span><br /><span class="line"><span class="number">15</span>:                 <span class="keyword">if</span> (method.getReturnType() == Object.class || parameter != <span class="keyword">null</span> &amp;&amp; parameter.excluded()) {</span><br /><span class="line"><span class="number">16</span>:                     <span class="keyword">continue</span>;</span><br /><span class="line"><span class="number">17</span>:                 }</span><br /><span class="line"><span class="number">18</span>:                 <span class="comment">// 获得属性名</span></span><br /><span class="line"><span class="number">19</span>:                 <span class="keyword">int</span> i = name.startsWith(<span class="string">"get"</span>) ? <span class="number">3</span> : <span class="number">2</span>;</span><br /><span class="line"><span class="number">20</span>:                 String prop = StringUtils.camelToSplitName(name.substring(i, i + <span class="number">1</span>).toLowerCase() + name.substring(i + <span class="number">1</span>), <span class="string">"."</span>);</span><br /><span class="line"><span class="number">21</span>:                 String key;</span><br /><span class="line"><span class="number">22</span>:                 <span class="keyword">if</span> (parameter != <span class="keyword">null</span> &amp;&amp; parameter.key() != <span class="keyword">null</span> &amp;&amp; parameter.key().length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">23</span>:                     key = parameter.key();</span><br /><span class="line"><span class="number">24</span>:                 } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">25</span>:                     key = prop;</span><br /><span class="line"><span class="number">26</span>:                 }</span><br /><span class="line"><span class="number">27</span>:                 <span class="comment">// 获得属性值</span></span><br /><span class="line"><span class="number">28</span>:                 Object value = method.invoke(config, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br /><span class="line"><span class="number">29</span>:                 String str = String.valueOf(value).trim();</span><br /><span class="line"><span class="number">30</span>:                 <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">31</span>:                     <span class="comment">// 转义</span></span><br /><span class="line"><span class="number">32</span>:                     <span class="keyword">if</span> (parameter != <span class="keyword">null</span> &amp;&amp; parameter.escaped()) {</span><br /><span class="line"><span class="number">33</span>:                         str = URL.encode(str);</span><br /><span class="line"><span class="number">34</span>:                     }</span><br /><span class="line"><span class="number">35</span>:                     <span class="comment">// 拼接，详细说明参见 `Parameter#append()` 方法的说明。</span></span><br /><span class="line"><span class="number">36</span>:                     <span class="keyword">if</span> (parameter != <span class="keyword">null</span> &amp;&amp; parameter.append()) {</span><br /><span class="line"><span class="number">37</span>:                         String pre = parameters.get(Constants.DEFAULT_KEY + <span class="string">"."</span> + key); <span class="comment">// default. 里获取，适用于 ServiceConfig =》ProviderConfig 、ReferenceConfig =》ConsumerConfig 。</span></span><br /><span class="line"><span class="number">38</span>:                         <span class="keyword">if</span> (pre != <span class="keyword">null</span> &amp;&amp; pre.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">39</span>:                             str = pre + <span class="string">","</span> + str;</span><br /><span class="line"><span class="number">40</span>:                         }</span><br /><span class="line"><span class="number">41</span>:                         pre = parameters.get(key); <span class="comment">// 通过 `parameters` 属性配置，例如 `AbstractMethodConfig.parameters` 。</span></span><br /><span class="line"><span class="number">42</span>:                         <span class="keyword">if</span> (pre != <span class="keyword">null</span> &amp;&amp; pre.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">43</span>:                             str = pre + <span class="string">","</span> + str;</span><br /><span class="line"><span class="number">44</span>:                         }</span><br /><span class="line"><span class="number">45</span>:                     }</span><br /><span class="line"><span class="number">46</span>:                     <span class="keyword">if</span> (prefix != <span class="keyword">null</span> &amp;&amp; prefix.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">47</span>:                         key = prefix + <span class="string">"."</span> + key;</span><br /><span class="line"><span class="number">48</span>:                     }</span><br /><span class="line"><span class="number">49</span>:                     parameters.put(key, str);</span><br /><span class="line"><span class="number">50</span>: <span class="comment">//                    System.out.println("kv:" + key + "\t" + str);</span></span><br /><span class="line"><span class="number">51</span>:                 } <span class="keyword">else</span> <span class="keyword">if</span> (parameter != <span class="keyword">null</span> &amp;&amp; parameter.required()) {</span><br /><span class="line"><span class="number">52</span>:                     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(config.getClass().getSimpleName() + <span class="string">"."</span> + key + <span class="string">" == null"</span>);</span><br /><span class="line"><span class="number">53</span>:                 }</span><br /><span class="line"><span class="number">54</span>:             } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"getParameters"</span>.equals(name)</span><br /><span class="line"><span class="number">55</span>:                     &amp;&amp; Modifier.isPublic(method.getModifiers())</span><br /><span class="line"><span class="number">56</span>:                     &amp;&amp; method.getParameterTypes().length == <span class="number">0</span></span><br /><span class="line"><span class="number">57</span>:                     &amp;&amp; method.getReturnType() == Map.class) { <span class="comment">// `#getParameters()` 方法</span></span><br /><span class="line"><span class="number">58</span>:                 Map&lt;String, String&gt; map = (Map&lt;String, String&gt;) method.invoke(config, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br /><span class="line"><span class="number">59</span>:                 <span class="keyword">if</span> (map != <span class="keyword">null</span> &amp;&amp; map.size() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">60</span>:                     String pre = (prefix != <span class="keyword">null</span> &amp;&amp; prefix.length() &gt; <span class="number">0</span> ? prefix + <span class="string">"."</span> : <span class="string">""</span>);</span><br /><span class="line"><span class="number">61</span>:                     <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) {</span><br /><span class="line"><span class="number">62</span>:                         parameters.put(pre + entry.getKey().replace(<span class="string">'-'</span>, <span class="string">'.'</span>), entry.getValue());</span><br /><span class="line"><span class="number">63</span>:                     }</span><br /><span class="line"><span class="number">64</span>:                 }</span><br /><span class="line"><span class="number">65</span>:             }</span><br /><span class="line"><span class="number">66</span>:         } <span class="keyword">catch</span> (Exception e) {</span><br /><span class="line"><span class="number">67</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br /><span class="line"><span class="number">68</span>:         }</span><br /><span class="line"><span class="number">69</span>:     }</span><br /><span class="line"><span class="number">70</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>parameters</code>&nbsp;，参数集合。实际上，该集合会用于&nbsp;<code>URL.parameters</code>&nbsp;。</li>
<li><code>config</code>&nbsp;，配置对象。</li>
<li><code>prefix</code>&nbsp;，属性前缀。用于配置项添加到&nbsp;<code>parameters</code>&nbsp;中时的前缀。</li>
<li>第 5 行：获得所有方法的数组，为下面通过<strong>反射</strong>获得配置项的值做准备。</li>
<li>第 6 行：<strong>循环</strong>每个方法。</li>
<li>第 9 至 13 行：方法为获得<strong>基本类型</strong>&nbsp;+&nbsp;<code>public</code>&nbsp;的 getting 方法。
<ul>
<li>第 14 至 17 行：返回值类型为 Object 或排除(&nbsp;<a href="mailto:%60@Parameter.exclue" target="_blank" rel="external nofollow noopener noreferrer">`@Parameter.exclue</a>=true` )的配置项，跳过。</li>
<li>第 19 至 26 行：获得配置项<strong>名</strong>。</li>
<li>第 28 至 48 行：获得配置项<strong>值</strong>。中间有一些逻辑处理，胖友看下代码的注释。</li>
<li>第 49 行：添加配置项到&nbsp;<code>parameters</code>&nbsp;。</li>
<li>第 51 至 53 行：当&nbsp;<a href="mailto:%60@Parameter.required" target="_blank" rel="external nofollow noopener noreferrer">`@Parameter.required</a>&nbsp;= true` 时，校验配置项非空。</li>
</ul>
</li>
<li>第 54 至 57 行：当方法为&nbsp;<code>#getParameters()</code>&nbsp;时，<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ApplicationConfig.java#L253-L255" target="_blank" rel="external nofollow noopener noreferrer">例如</a>&nbsp;。
<ul>
<li>第 58 行：通过反射，获得&nbsp;<code>#getParameters()</code>&nbsp;的返回值为&nbsp;<code>map</code>&nbsp;。</li>
<li>第 59 至 64 行：将&nbsp;<code>map</code>&nbsp;添加到&nbsp;<code>parameters</code>&nbsp;，kv 格式为&nbsp;<code>prefix:entry.key</code>&nbsp;<code>entry.value</code>&nbsp;。</li>
<li>因此，通过&nbsp;<code>#getParameters()</code>&nbsp;对应的属性，<strong>动态设置配置项，拓展出非 Dubbo 内置好的逻辑</strong>。</li>
</ul>
</li>
</ul>
<hr />
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L326-L363" target="_blank" rel="external nofollow noopener noreferrer"><code>#appendAttributes(parameters, config, prefix)</code></a>&nbsp;方法，将&nbsp;<code>@Parameter(attribute = true)</code>&nbsp;配置对象的属性，添加到参数集合。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">appendAttributes</span><span class="params">(Map&lt;Object, Object&gt; parameters, Object config, String prefix)</span> </span>{</span><br /><span class="line"> <span class="number">2</span>:     <span class="keyword">if</span> (config == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">3</span>:         <span class="keyword">return</span>;</span><br /><span class="line"> <span class="number">4</span>:     }</span><br /><span class="line"> <span class="number">5</span>:     Method[] methods = config.getClass().getMethods();</span><br /><span class="line"> <span class="number">6</span>:     <span class="keyword">for</span> (Method method : methods) {</span><br /><span class="line"> <span class="number">7</span>:         <span class="keyword">try</span> {</span><br /><span class="line"> <span class="number">8</span>:             String name = method.getName();</span><br /><span class="line"> <span class="number">9</span>:             <span class="keyword">if</span> ((name.startsWith(<span class="string">"get"</span>) || name.startsWith(<span class="string">"is"</span>))</span><br /><span class="line"><span class="number">10</span>:                     &amp;&amp; !<span class="string">"getClass"</span>.equals(name)</span><br /><span class="line"><span class="number">11</span>:                     &amp;&amp; Modifier.isPublic(method.getModifiers())</span><br /><span class="line"><span class="number">12</span>:                     &amp;&amp; method.getParameterTypes().length == <span class="number">0</span></span><br /><span class="line"><span class="number">13</span>:                     &amp;&amp; isPrimitive(method.getReturnType())) { <span class="comment">// 方法为获取基本类型，public 的 getting 方法。</span></span><br /><span class="line"><span class="number">14</span>:                 Parameter parameter = method.getAnnotation(Parameter.class);</span><br /><span class="line"><span class="number">15</span>:                 <span class="keyword">if</span> (parameter == <span class="keyword">null</span> || !parameter.attribute())</span><br /><span class="line"><span class="number">16</span>:                     <span class="keyword">continue</span>;</span><br /><span class="line"><span class="number">17</span>:                 <span class="comment">// 获得属性名</span></span><br /><span class="line"><span class="number">18</span>:                 String key;</span><br /><span class="line"><span class="number">19</span>:                 <span class="keyword">if</span> (parameter != <span class="keyword">null</span> &amp;&amp; parameter.key() != <span class="keyword">null</span> &amp;&amp; parameter.key().length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">20</span>:                     key = parameter.key();</span><br /><span class="line"><span class="number">21</span>:                 } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">22</span>:                     <span class="keyword">int</span> i = name.startsWith(<span class="string">"get"</span>) ? <span class="number">3</span> : <span class="number">2</span>;</span><br /><span class="line"><span class="number">23</span>:                     key = name.substring(i, i + <span class="number">1</span>).toLowerCase() + name.substring(i + <span class="number">1</span>);</span><br /><span class="line"><span class="number">24</span>:                 }</span><br /><span class="line"><span class="number">25</span>:                 <span class="comment">// 获得属性值，存在则添加到 `parameters` 集合</span></span><br /><span class="line"><span class="number">26</span>:                 Object value = method.invoke(config, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br /><span class="line"><span class="number">27</span>:                 <span class="keyword">if</span> (value != <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">28</span>:                     <span class="keyword">if</span> (prefix != <span class="keyword">null</span> &amp;&amp; prefix.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">29</span>:                         key = prefix + <span class="string">"."</span> + key;</span><br /><span class="line"><span class="number">30</span>:                     }</span><br /><span class="line"><span class="number">31</span>:                     parameters.put(key, value);</span><br /><span class="line"><span class="number">32</span>:                 }</span><br /><span class="line"><span class="number">33</span>:             }</span><br /><span class="line"><span class="number">34</span>:         } <span class="keyword">catch</span> (Exception e) {</span><br /><span class="line"><span class="number">35</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br /><span class="line"><span class="number">36</span>:         }</span><br /><span class="line"><span class="number">37</span>:     }</span><br /><span class="line"><span class="number">38</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>不同于&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L326-L363" target="_blank" rel="external nofollow noopener noreferrer"><code>#appendAttributes(parameters, config, prefix)</code></a>&nbsp;方法，主要用于&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/events-notify.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 事件通知》</a>&nbsp;，注解&nbsp;<code>@Parameter(attribute = true)</code>&nbsp;的属性如下图：<img src="http://static2.iocoder.cn/images/Dubbo/2018_01_07/05.png" alt="@Parameter(attribute = true)" /></li>
<li>第 9 至 13 行：方法为获得<strong>基本类型</strong>&nbsp;+&nbsp;<code>public</code>&nbsp;的 getting 方法。</li>
<li>第 14 至 16 行：<strong>需要</strong>(&nbsp;<a href="mailto:%60@Parameter.exclue" target="_blank" rel="external nofollow noopener noreferrer">`@Parameter.exclue</a>=true` )的配置项。</li>
<li>第 17 至 24 行：获得配置项<strong>名</strong>。</li>
<li>第 26 至 30 行：获得配置项<strong>值</strong>。</li>
<li>第 31 行：添加配置项到&nbsp;<code>parameters</code>&nbsp;。</li>
</ul>
<hr />
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L139-L212" target="_blank" rel="external nofollow noopener noreferrer"><code>#appendProperties(config)</code></a>&nbsp;方法，读取环境变量和 properties 配置到配置对象。在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-properties/?self">《精进 Dubbo 源码解析 &mdash;&mdash; 属性配置》</a>&nbsp;详细解析。</p>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L505-L541" target="_blank" rel="external nofollow noopener noreferrer"><code>#appendAnnotation(annotationClass, annotation)</code></a>&nbsp;方法，读取注解配置到配置对象。在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-api-1/TODO">《精进 Dubbo 源码解析 &mdash;&mdash; 注解配置》</a>&nbsp;详细解析。</p>
<h2 id="3-2-ApplicationConfig">3.2 ApplicationConfig</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ApplicationConfig.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.config.ApplicationConfig</code></a>&nbsp;，应用配置。</p>
<ul>
<li>具体属性的解释，参见&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-application.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; dubbo:application》</a>&nbsp;文档。</li>
</ul>
<h2 id="3-3-RegistryConfig">3.3 RegistryConfig</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/RegistryConfig.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.config.RegistryConfig</code></a>&nbsp;，注册中心配置。</p>
<ul>
<li>具体属性的解释，参见&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-registry.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; dubbo:registry》</a>&nbsp;文档。</li>
</ul>
<h2 id="3-4-ModuleConfig">3.4 ModuleConfig</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ModuleConfig.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.config.ModuleConfig</code></a>&nbsp;，模块信息配置。</p>
<ul>
<li>具体属性的解释，参见&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-module.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; dubbo:module》</a>&nbsp;文档。</li>
</ul>
<h2 id="3-5-MonitorConfig">3.5 MonitorConfig</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/MonitorConfig.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.config.MonitorConfig</code></a>&nbsp;，监控中心配置。</p>
<ul>
<li>具体属性的解释，参见&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-monitor.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; dubbo:monitor》</a>&nbsp;文档。</li>
</ul>
<h2 id="3-6-ArgumentConfig">3.6 ArgumentConfig</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ArgumentConfig.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.config.ArgumentConfig</code></a>&nbsp;，方法参数配置。</p>
<ul>
<li>具体属性的解释，参见&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-argument.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; dubbo:argument》</a>&nbsp;文档。</li>
<li>该配置类设置到 MethodConfig 对象中，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-api-2/?self">《API 配置（二）之服务提供者》</a>&nbsp;我们会看到。</li>
<li>在&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/callback-parameter.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 参数回调》</a>&nbsp;特性中使用。</li>
</ul>
<h1 id="4-URL">4. URL</h1>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.common.URL</code></a>&nbsp;，Dubbo URL 。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">URL</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 协议名</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String protocol;</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 用户名</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 密码</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String password;</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * by default, host to registry</span></span><br /><span class="line"><span class="comment">     * 地址</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * by default, port to registry</span></span><br /><span class="line"><span class="comment">     * 端口</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 路径（服务名）</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String path;</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 参数集合</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; parameters;</span><br />    <br /><span class="line">    <span class="comment">// ... 省略其他代码</span></span><br />    <br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p>上文我们提到<strong>所有配置最终都将转换为 Dubbo URL 表示，并由服务提供方生成，经注册中心传递给消费方，各属性对应 URL 的参数，参见配置项一览表中的 &ldquo;对应URL参数&rdquo; 列</strong>。那么一个 Service 注册到注册中心的格式如下：</p>
<figure class="highlight plain">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">dubbo://192.168.3.17:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;default.delay=-1&amp;default.retries=0&amp;default.service.filter=demoFilter&amp;delay=-1&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=19031&amp;side=provider&amp;timestamp=1519651641799</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>格式为&nbsp;<code>protocol://username:password@host:port/path?key=value&amp;key=value</code>&nbsp;，通过&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java#L1176-L1217" target="_blank" rel="external nofollow noopener noreferrer"><code>URL#buildString(...)</code></a>&nbsp;方法生成。</li>
</ul>
</li>
<li>
<p><code>parameters</code>&nbsp;属性，参数集合。从上面的 Service URL 例子我们可以看到，里面的&nbsp;<code>key=value</code>&nbsp;，实际上就是 Service 对应的配置项。该属性，通过&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L244-L313" target="_blank" rel="external nofollow noopener noreferrer"><code>AbstractConfig#appendParameters(parameters, config, prefix)</code></a>&nbsp;方法生成。</p>
</li>
<li>🙂 在后续的文章中，我们会发现 URL 作为一个<strong>通用模型</strong>，贯穿整个 RPC 流程。</li>
</ul>
<h1 id="5-Parameter">5. @Parameter</h1>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/support/Parameter.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.config.support.@Parameter</code></a>&nbsp;，Parameter 参数<strong>注解</strong>，用于 Dubbo URL 的&nbsp;<code>parameters</code>&nbsp;拼接。</p>
<p>在配置对象的 getting 方法上，我们可以看到该注解的使用，例如下图：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_01_07/04.png" alt="@Parameter 使用场景" /></p>
<p>@Parameter 代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Documented</span></span><br /><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br /><span class="line"><span class="meta">@Target</span>({ElementType.METHOD})</span><br /><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Parameter {</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 键（别名）</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 是否必填</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 是否忽略</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">excluded</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 是否转义</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">escaped</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 是否为属性</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 目前用于《事件通知》http://dubbo.apache.org/zh-cn/docs/user/demos/events-notify.html</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">attribute</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 是否拼接默认属性，参见 {<span class="doctag">@link</span> com.alibaba.dubbo.config.AbstractConfig#appendParameters(Map, Object, String)} 方法。</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 我们来看看 `#append() = true` 的属性，有如下四个：</span></span><br /><span class="line"><span class="comment">     *   + {<span class="doctag">@link</span> AbstractInterfaceConfig#getFilter()}</span></span><br /><span class="line"><span class="comment">     *   + {<span class="doctag">@link</span> AbstractInterfaceConfig#getListener()}</span></span><br /><span class="line"><span class="comment">     *   + {<span class="doctag">@link</span> AbstractReferenceConfig#getFilter()}</span></span><br /><span class="line"><span class="comment">     *   + {<span class="doctag">@link</span> AbstractReferenceConfig#getListener()}</span></span><br /><span class="line"><span class="comment">     *   + {<span class="doctag">@link</span> AbstractServiceConfig#getFilter()}</span></span><br /><span class="line"><span class="comment">     *   + {<span class="doctag">@link</span> AbstractServiceConfig#getListener()}</span></span><br /><span class="line"><span class="comment">     * 那么，以 AbstractServiceConfig 举例子。</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 我们知道 ProviderConfig 和 ServiceConfig 继承 AbstractServiceConfig 类，那么 `filter` , `listener` 对应的相同的键。</span></span><br /><span class="line"><span class="comment">     * 下面我们以 `filter` 举例子。</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 在 ServiceConfig 中，默认会&lt;b&gt;继承&lt;/b&gt; ProviderConfig 配置的 `filter` 和 `listener` 。</span></span><br /><span class="line"><span class="comment">     * 所以这个属性，就是用于，像 ServiceConfig 的这种情况，从 ProviderConfig 读取父属性。</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 举个例子，如果 `ProviderConfig.filter=aaaFilter` ，`ServiceConfig.filter=bbbFilter` ，最终暴露到 Dubbo URL 时，参数为 `service.filter=aaaFilter,bbbFilter` 。</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">append</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>胖友可以简单看下代码中的<strong>注释</strong>，结合具体使用的方法，在细细理解。</li>
</ul>
</div>