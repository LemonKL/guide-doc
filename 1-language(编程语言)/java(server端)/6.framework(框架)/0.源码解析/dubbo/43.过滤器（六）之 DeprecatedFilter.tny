<header class="article-header">
<h1 class="article-title">过滤器（六）之 DeprecatedFilter</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>本文分享过滤器 DeprecatedFilter ，用于服务<strong>消费者</strong>中，通过&nbsp;<code>&lt;dubbo: service /&gt;</code>&nbsp;或&nbsp;<code>&lt;dubbo:reference /&gt;</code>&nbsp;或&nbsp;<code>&lt;dubbo:method /&gt;</code>&nbsp;的&nbsp;<code>"deprecated"</code>&nbsp;配置项为&nbsp;<code>true</code>&nbsp;来开启。</p>
<h1 id="2-DeprecatedFilter">2. DeprecatedFilter</h1>
<p><code>com.alibaba.dubbo.rpc.filter.DeprecatedFilter</code>&nbsp;，实现 Filter 接口，废弃调用的过滤器实现类。当调用废弃的服务方法时，打印错误日志提醒。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Activate</span>(group = Constants.CONSUMER, value = Constants.DEPRECATED_KEY)</span><br /><span class="line"> <span class="number">2</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeprecatedFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{</span><br /><span class="line"> <span class="number">3</span>: </span><br /><span class="line"> <span class="number">4</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DeprecatedFilter.class);</span><br /><span class="line"> <span class="number">5</span>: </span><br /><span class="line"> <span class="number">6</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment"> 7:      * 已经打印日志的方法集合</span></span><br /><span class="line"><span class="comment"> 8:      */</span></span><br /><span class="line"> <span class="number">9</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; logged = <span class="keyword">new</span> ConcurrentHashSet&lt;String&gt;();</span><br /><span class="line"><span class="number">10</span>: </span><br /><span class="line"><span class="number">11</span>:     <span class="meta">@Override</span></span><br /><span class="line"><span class="number">12</span>:     <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>{</span><br /><span class="line"><span class="number">13</span>:         <span class="comment">// 获得方法名</span></span><br /><span class="line"><span class="number">14</span>:         String key = invoker.getInterface().getName() + <span class="string">"."</span> + invocation.getMethodName();</span><br /><span class="line"><span class="number">15</span>:         <span class="comment">// 打印告警日志</span></span><br /><span class="line"><span class="number">16</span>:         <span class="keyword">if</span> (!logged.contains(key)) {</span><br /><span class="line"><span class="number">17</span>:             logged.add(key);</span><br /><span class="line"><span class="number">18</span>:             <span class="keyword">if</span> (invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.DEPRECATED_KEY, <span class="keyword">false</span>)) {</span><br /><span class="line"><span class="number">19</span>:                 LOGGER.error(<span class="string">"The service method "</span> + invoker.getInterface().getName() + <span class="string">"."</span> + getMethodSignature(invocation) + <span class="string">" is DEPRECATED! Declare from "</span> + invoker.getUrl());</span><br /><span class="line"><span class="number">20</span>:             }</span><br /><span class="line"><span class="number">21</span>:         }</span><br /><span class="line"><span class="number">22</span>:         <span class="keyword">return</span> invoker.invoke(invocation);</span><br /><span class="line"><span class="number">23</span>:     }</span><br /><span class="line"><span class="number">24</span>: </span><br /><span class="line"><span class="number">25</span>:     </span><br /><span class="line"><span class="number">26</span>:     <span class="comment">// 省略 getMethodSignature 方法</span></span><br /><span class="line"><span class="number">27</span>: </span><br /><span class="line"><span class="number">28</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>logged</code>&nbsp;<strong>静态</strong>属性，已经打印日志的方法集合。</li>
<li>第 14 行：获得方法名。</li>
<li>
<p>第 16 至 21 行：打印告警日志。一个服务的方法，<strong>有且仅有</strong>打印一次。例如：</p>
<figure class="highlight plain">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">[14/04/18 11:51:35:035 CST] main ERROR filter.DeprecatedFilter:  [DUBBO] The service method com.alibaba.dubbo.demo.DemoService.say01(String) is DEPRECATED! Declare from dubbo://192.168.3.17:20880/com.alibaba.dubbo.demo.DemoService?accesslog=true&amp;anyhost=true&amp;application=demo-consumer&amp;callbacks=1000&amp;check=false&amp;client=netty4&amp;default.delay=-1&amp;default.retries=0&amp;delay=-1&amp;deprecated=false&amp;dubbo=2.0.0&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello,callbackParam,say03,say04,say01,bye,say02&amp;payload=1000&amp;pid=16820&amp;qos.port=33333&amp;register.ip=192.168.3.17&amp;remote.timestamp=1523720843597&amp;say01.deprecated=true&amp;sayHello.async=true&amp;server=netty4&amp;service.filter=demo&amp;side=consumer&amp;timeout=100000&amp;timestamp=1523721049491, dubbo version: 2.0.0, current host: 192.168.3.17</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>注意，【第 18 行】会根据方法在判断。因为，一个服务里，可能只有<strong>部分</strong>方法废弃。</li>
</ul>
</li>
<li>
<p>第 22 行：调用&nbsp;<code>Invoker#invoke(invocation)</code>&nbsp;方法，服务调用。</p>
</li>
</ul>
<h1 id="3-DeprecatedInvokerListener">3. DeprecatedInvokerListener</h1>
<p>功能<strong>类似</strong>，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/reference-refer-local/?self">《精尽 Dubbo 源码分析 &mdash;&mdash; 服务引用（一）之本地引用（Injvm）》「5.2 DeprecatedInvokerListener」</a>&nbsp;中，已经有详细解析。</p>
</div>