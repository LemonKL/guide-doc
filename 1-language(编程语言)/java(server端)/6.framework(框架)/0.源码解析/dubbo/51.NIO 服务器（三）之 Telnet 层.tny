<header class="article-header">
<h1 class="article-title">NIO 服务器（三）之 Telnet 层</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>本文接&nbsp;<a href="http://svip.iocoder.cn/Dubbo/remoting-api-transport//?self">《精尽 Dubbo 源码分析 &mdash;&mdash; NIO 服务器（二）之抽象 API》</a>&nbsp;一文，分享&nbsp;<code>dubbo-remoting-api</code>模块，&nbsp;<code>telnet</code>&nbsp;包，<strong>Telnet 命令</strong>。</p>
<p>在&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/telnet.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; Telnet 命令参考手册》</a>&nbsp;一文中，我们可以看到，Dubbo 支持通过 telnet 命令，用来服务治理。其中，<code>clear</code>&nbsp;<code>exit</code>&nbsp;<code>help</code>&nbsp;<code>log</code>&nbsp;<code>status</code>&nbsp;<strong>通用指令</strong>，通过&nbsp;<code>telnet</code>&nbsp;包实现。而其它几个指令，需要不同协议( Protocol )自己实现。目前，<strong>仅有</strong>&nbsp;Dubbo Protocol 实现了自定义指令。</p>
<p>本文涉及<strong>类图</strong>如下：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_12_07/01.png" alt="类图" /></p>
<p>从<strong>用途</strong>上，上述类可以分成三种：</p>
<ul>
<li>TelnetCodec ：负责编解码 Telnet 命令与结果。</li>
<li>TelnetHandlerAdapter ：负责接收来自 HeaderExchangeHandler 的 telnet 命令，分发给对应的 TelnetHandler 实现类，进行处理，<strong>返回命令结果</strong>。
<ul>
<li>🙂 为什么来自 HeaderExchangeHandler ，我们后续文章分享。</li>
</ul>
</li>
<li>XXXTelnetHandler ：处理对应的 telnet 命令，返回结果。</li>
</ul>
<p><strong>流程</strong>如下图：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_12_07/02.png" alt="流程" /></p>
<p>下面我们来看看具体的代码实现。</p>
<h1 id="2-TelnetCodec">2. TelnetCodec</h1>
<blockquote>
<p>艿艿对 telnet server 不熟悉，如果有错误，还请包涵。🙂 本文主要起到抛砖的作用。</p>
</blockquote>
<p><a href="http://svip.iocoder.cn/Dubbo/remoting-api-telnet/TODO"><code>com.alibaba.dubbo.remoting.telnet.codec.TelnetCodec</code></a>&nbsp;，实现 TransportCodec 类，Telnet 命令编解码器。</p>
<p><strong>解码</strong></p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">  <span class="number">1</span>: <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br /><span class="line">  <span class="number">2</span>: <span class="function"><span class="keyword">protected</span> Object <span class="title">decode</span><span class="params">(Channel channel, ChannelBuffer buffer, <span class="keyword">int</span> readable, <span class="keyword">byte</span>[] message)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">  <span class="number">3</span>:     <span class="comment">// 【TODO 8025】为啥 client 侧，直接返回</span></span><br /><span class="line">  <span class="number">4</span>:     <span class="keyword">if</span> (isClientSide(channel)) {</span><br /><span class="line">  <span class="number">5</span>:         <span class="keyword">return</span> toString(message, getCharset(channel));</span><br /><span class="line">  <span class="number">6</span>:     }</span><br /><span class="line">  <span class="number">7</span>:     <span class="comment">// 检查长度</span></span><br /><span class="line">  <span class="number">8</span>:     checkPayload(channel, readable);</span><br /><span class="line">  <span class="number">9</span>:     <span class="keyword">if</span> (message == <span class="keyword">null</span> || message.length == <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">10</span>:         <span class="keyword">return</span> DecodeResult.NEED_MORE_INPUT;</span><br /><span class="line"> <span class="number">11</span>:     }</span><br /><span class="line"> <span class="number">12</span>: </span><br /><span class="line"> <span class="number">13</span>:     <span class="comment">// 处理退格的情况。</span></span><br /><span class="line"> <span class="number">14</span>:     <span class="keyword">if</span> (message[message.length - <span class="number">1</span>] == <span class="string">'\b'</span>) { <span class="comment">// Windows backspace echo</span></span><br /><span class="line"> <span class="number">15</span>:         <span class="keyword">try</span> {</span><br /><span class="line"> <span class="number">16</span>:             <span class="comment">// 32=空格 8=退格</span></span><br /><span class="line"> <span class="number">17</span>:             <span class="keyword">boolean</span> doublechar = message.length &gt;= <span class="number">3</span> &amp;&amp; message[message.length - <span class="number">3</span>] &lt; <span class="number">0</span>; <span class="comment">// double byte char</span></span><br /><span class="line"> <span class="number">18</span>:             channel.send(<span class="keyword">new</span> String(doublechar ? <span class="keyword">new</span> <span class="keyword">byte</span>[]{<span class="number">32</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">8</span>} : <span class="keyword">new</span> <span class="keyword">byte</span>[]{<span class="number">32</span>, <span class="number">8</span>}, getCharset(channel).name()));</span><br /><span class="line"> <span class="number">19</span>:         } <span class="keyword">catch</span> (RemotingException e) {</span><br /><span class="line"> <span class="number">20</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IOException(StringUtils.toString(e));</span><br /><span class="line"> <span class="number">21</span>:         }</span><br /><span class="line"> <span class="number">22</span>:         <span class="keyword">return</span> DecodeResult.NEED_MORE_INPUT;</span><br /><span class="line"> <span class="number">23</span>:     }</span><br /><span class="line"> <span class="number">24</span>: </span><br /><span class="line"> <span class="number">25</span>:     <span class="comment">// 关闭指令</span></span><br /><span class="line"> <span class="number">26</span>:     <span class="keyword">for</span> (Object command : EXIT) {</span><br /><span class="line"> <span class="number">27</span>:         <span class="keyword">if</span> (isEquals(message, (<span class="keyword">byte</span>[]) command)) {</span><br /><span class="line"> <span class="number">28</span>:             <span class="keyword">if</span> (logger.isInfoEnabled()) {</span><br /><span class="line"> <span class="number">29</span>:                 logger.info(<span class="keyword">new</span> Exception(<span class="string">"Close channel "</span> + channel + <span class="string">" on exit command: "</span> + Arrays.toString((<span class="keyword">byte</span>[]) command)));</span><br /><span class="line"> <span class="number">30</span>:             }</span><br /><span class="line"> <span class="number">31</span>:             channel.close(); <span class="comment">// 关闭通道</span></span><br /><span class="line"> <span class="number">32</span>:             <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line"> <span class="number">33</span>:         }</span><br /><span class="line"> <span class="number">34</span>:     }</span><br /><span class="line"> <span class="number">35</span>: </span><br /><span class="line"> <span class="number">36</span>:     <span class="comment">// 使用历史的命令</span></span><br /><span class="line"> <span class="number">37</span>:     <span class="keyword">boolean</span> up = endsWith(message, UP);</span><br /><span class="line"> <span class="number">38</span>:     <span class="keyword">boolean</span> down = endsWith(message, DOWN);</span><br /><span class="line"> <span class="number">39</span>:     <span class="keyword">if</span> (up || down) {</span><br /><span class="line"> <span class="number">40</span>:         LinkedList&lt;String&gt; history = (LinkedList&lt;String&gt;) channel.getAttribute(HISTORY_LIST_KEY);</span><br /><span class="line"> <span class="number">41</span>:         <span class="keyword">if</span> (history == <span class="keyword">null</span> || history.isEmpty()) {</span><br /><span class="line"> <span class="number">42</span>:             <span class="keyword">return</span> DecodeResult.NEED_MORE_INPUT;</span><br /><span class="line"> <span class="number">43</span>:         }</span><br /><span class="line"> <span class="number">44</span>:         <span class="comment">// 获得历史命令数组的位置</span></span><br /><span class="line"> <span class="number">45</span>:         Integer index = (Integer) channel.getAttribute(HISTORY_INDEX_KEY);</span><br /><span class="line"> <span class="number">46</span>:         Integer old = index;</span><br /><span class="line"> <span class="number">47</span>:         <span class="keyword">if</span> (index == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">48</span>:             index = history.size() - <span class="number">1</span>;</span><br /><span class="line"> <span class="number">49</span>:         } <span class="keyword">else</span> {</span><br /><span class="line"> <span class="number">50</span>:             <span class="keyword">if</span> (up) { <span class="comment">// 向上</span></span><br /><span class="line"> <span class="number">51</span>:                 index = index - <span class="number">1</span>;</span><br /><span class="line"> <span class="number">52</span>:                 <span class="keyword">if</span> (index &lt; <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">53</span>:                     index = history.size() - <span class="number">1</span>;</span><br /><span class="line"> <span class="number">54</span>:                 }</span><br /><span class="line"> <span class="number">55</span>:             } <span class="keyword">else</span> { <span class="comment">// 向下</span></span><br /><span class="line"> <span class="number">56</span>:                 index = index + <span class="number">1</span>;</span><br /><span class="line"> <span class="number">57</span>:                 <span class="keyword">if</span> (index &gt; history.size() - <span class="number">1</span>) {</span><br /><span class="line"> <span class="number">58</span>:                     index = <span class="number">0</span>;</span><br /><span class="line"> <span class="number">59</span>:                 }</span><br /><span class="line"> <span class="number">60</span>:             }</span><br /><span class="line"> <span class="number">61</span>:         }</span><br /><span class="line"> <span class="number">62</span>:         <span class="comment">// 获得历史命令，并发送给客户端</span></span><br /><span class="line"> <span class="number">63</span>:         <span class="keyword">if</span> (old == <span class="keyword">null</span> || !old.equals(index)) {</span><br /><span class="line"> <span class="number">64</span>:             <span class="comment">// 设置当前位置</span></span><br /><span class="line"> <span class="number">65</span>:             channel.setAttribute(HISTORY_INDEX_KEY, index);</span><br /><span class="line"> <span class="number">66</span>:             <span class="comment">// 获得历史命令</span></span><br /><span class="line"> <span class="number">67</span>:             String value = history.get(index);</span><br /><span class="line"> <span class="number">68</span>:             <span class="comment">// 拼接退格，以清除客户端原有命令</span></span><br /><span class="line"> <span class="number">69</span>:             <span class="keyword">if</span> (old != <span class="keyword">null</span> &amp;&amp; old &gt;= <span class="number">0</span> &amp;&amp; old &lt; history.size()) {</span><br /><span class="line"> <span class="number">70</span>:                 String ov = history.get(old);</span><br /><span class="line"> <span class="number">71</span>:                 StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br /><span class="line"> <span class="number">72</span>:                 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ov.length(); i++) {</span><br /><span class="line"> <span class="number">73</span>:                     buf.append(<span class="string">"\b"</span>); <span class="comment">// 退格</span></span><br /><span class="line"> <span class="number">74</span>:                 }</span><br /><span class="line"> <span class="number">75</span>:                 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ov.length(); i++) {</span><br /><span class="line"> <span class="number">76</span>:                     buf.append(<span class="string">" "</span>);</span><br /><span class="line"> <span class="number">77</span>:                 }</span><br /><span class="line"> <span class="number">78</span>:                 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ov.length(); i++) {</span><br /><span class="line"> <span class="number">79</span>:                     buf.append(<span class="string">"\b"</span>); <span class="comment">// 退格</span></span><br /><span class="line"> <span class="number">80</span>:                 }</span><br /><span class="line"> <span class="number">81</span>:                 value = buf.toString() + value;</span><br /><span class="line"> <span class="number">82</span>:             }</span><br /><span class="line"> <span class="number">83</span>:             <span class="comment">// 发送命令</span></span><br /><span class="line"> <span class="number">84</span>:             <span class="keyword">try</span> {</span><br /><span class="line"> <span class="number">85</span>:                 channel.send(value);</span><br /><span class="line"> <span class="number">86</span>:             } <span class="keyword">catch</span> (RemotingException e) {</span><br /><span class="line"> <span class="number">87</span>:                 <span class="keyword">throw</span> <span class="keyword">new</span> IOException(StringUtils.toString(e));</span><br /><span class="line"> <span class="number">88</span>:             }</span><br /><span class="line"> <span class="number">89</span>:         }</span><br /><span class="line"> <span class="number">90</span>:         <span class="comment">// 返回，需要更多指令</span></span><br /><span class="line"> <span class="number">91</span>:         <span class="keyword">return</span> DecodeResult.NEED_MORE_INPUT;</span><br /><span class="line"> <span class="number">92</span>:     }</span><br /><span class="line"> <span class="number">93</span>: </span><br /><span class="line"> <span class="number">94</span>:     <span class="comment">// 关闭指令</span></span><br /><span class="line"> <span class="number">95</span>:     <span class="keyword">for</span> (Object command : EXIT) {</span><br /><span class="line"> <span class="number">96</span>:         <span class="keyword">if</span> (isEquals(message, (<span class="keyword">byte</span>[]) command)) {</span><br /><span class="line"> <span class="number">97</span>:             <span class="keyword">if</span> (logger.isInfoEnabled()) {</span><br /><span class="line"> <span class="number">98</span>:                 logger.info(<span class="keyword">new</span> Exception(<span class="string">"Close channel "</span> + channel + <span class="string">" on exit command "</span> + command));</span><br /><span class="line"> <span class="number">99</span>:             }</span><br /><span class="line"><span class="number">100</span>:             channel.close();</span><br /><span class="line"><span class="number">101</span>:             <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line"><span class="number">102</span>:         }</span><br /><span class="line"><span class="number">103</span>:     }</span><br /><span class="line"><span class="number">104</span>:     <span class="comment">// 查找是否回车结尾。若不是，说明一条 telnet 指令没结束。</span></span><br /><span class="line"><span class="number">105</span>:     <span class="keyword">byte</span>[] enter = <span class="keyword">null</span>;</span><br /><span class="line"><span class="number">106</span>:     <span class="keyword">for</span> (Object command : ENTER) {</span><br /><span class="line"><span class="number">107</span>:         <span class="keyword">if</span> (endsWith(message, (<span class="keyword">byte</span>[]) command)) {</span><br /><span class="line"><span class="number">108</span>:             enter = (<span class="keyword">byte</span>[]) command;</span><br /><span class="line"><span class="number">109</span>:             <span class="keyword">break</span>;</span><br /><span class="line"><span class="number">110</span>:         }</span><br /><span class="line"><span class="number">111</span>:     }</span><br /><span class="line"><span class="number">112</span>:     <span class="keyword">if</span> (enter == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">113</span>:         <span class="keyword">return</span> DecodeResult.NEED_MORE_INPUT;</span><br /><span class="line"><span class="number">114</span>:     }</span><br /><span class="line"><span class="number">115</span>:     <span class="comment">// 移除历史命令数组的位置</span></span><br /><span class="line"><span class="number">116</span>:     LinkedList&lt;String&gt; history = (LinkedList&lt;String&gt;) channel.getAttribute(HISTORY_LIST_KEY);</span><br /><span class="line"><span class="number">117</span>:     Integer index = (Integer) channel.getAttribute(HISTORY_INDEX_KEY);</span><br /><span class="line"><span class="number">118</span>:     channel.removeAttribute(HISTORY_INDEX_KEY);</span><br /><span class="line"><span class="number">119</span>:     <span class="comment">// 将历史命令拼接</span></span><br /><span class="line"><span class="number">120</span>:     <span class="keyword">if</span> (history != <span class="keyword">null</span> &amp;&amp; !history.isEmpty() &amp;&amp; index != <span class="keyword">null</span> &amp;&amp; index &gt;= <span class="number">0</span> &amp;&amp; index &lt; history.size()) {</span><br /><span class="line"><span class="number">121</span>:         String value = history.get(index);</span><br /><span class="line"><span class="number">122</span>:         <span class="keyword">if</span> (value != <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">123</span>:             <span class="keyword">byte</span>[] b1 = value.getBytes();</span><br /><span class="line"><span class="number">124</span>:             <span class="keyword">byte</span>[] b2 = <span class="keyword">new</span> <span class="keyword">byte</span>[b1.length + message.length];</span><br /><span class="line"><span class="number">125</span>:             System.arraycopy(b1, <span class="number">0</span>, b2, <span class="number">0</span>, b1.length);</span><br /><span class="line"><span class="number">126</span>:             System.arraycopy(message, <span class="number">0</span>, b2, b1.length, message.length);</span><br /><span class="line"><span class="number">127</span>:             message = b2;</span><br /><span class="line"><span class="number">128</span>:         }</span><br /><span class="line"><span class="number">129</span>:     }</span><br /><span class="line"><span class="number">130</span>:     <span class="comment">// 将命令字节数组，转成具体的一条命令</span></span><br /><span class="line"><span class="number">131</span>:     String result = toString(message, getCharset(channel));</span><br /><span class="line"><span class="number">132</span>:     <span class="comment">// 添加到历史</span></span><br /><span class="line"><span class="number">133</span>:     <span class="keyword">if</span> (result.trim().length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">134</span>:         <span class="keyword">if</span> (history == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">135</span>:             history = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br /><span class="line"><span class="number">136</span>:             channel.setAttribute(HISTORY_LIST_KEY, history);</span><br /><span class="line"><span class="number">137</span>:         }</span><br /><span class="line"><span class="number">138</span>:         <span class="keyword">if</span> (history.isEmpty()) {</span><br /><span class="line"><span class="number">139</span>:             history.addLast(result);</span><br /><span class="line"><span class="number">140</span>:         } <span class="keyword">else</span> <span class="keyword">if</span> (!result.equals(history.getLast())) {</span><br /><span class="line"><span class="number">141</span>:             <span class="comment">// 添加当前命令到历史尾部</span></span><br /><span class="line"><span class="number">142</span>:             history.remove(result);</span><br /><span class="line"><span class="number">143</span>:             history.addLast(result);</span><br /><span class="line"><span class="number">144</span>:             <span class="comment">// 超过上限，移除历史的头部</span></span><br /><span class="line"><span class="number">145</span>:             <span class="keyword">if</span> (history.size() &gt; <span class="number">10</span>) {</span><br /><span class="line"><span class="number">146</span>:                 history.removeFirst();</span><br /><span class="line"><span class="number">147</span>:             }</span><br /><span class="line"><span class="number">148</span>:         }</span><br /><span class="line"><span class="number">149</span>:     }</span><br /><span class="line"><span class="number">150</span>:     <span class="keyword">return</span> result;</span><br /><span class="line"><span class="number">151</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>笔者在测试代码，使用了两种支持 telnet 连接的工具，从表现上存在差异：
<ul>
<li>使用&nbsp;<code>brew install telnet</code>&nbsp;工具：每次输入完命令，敲完回车，Dubbo Server 才收到请求。</li>
<li>使用 ShellCraft 工具：每次输入<strong>任何一个</strong>字母，Dubbo Server 都会收到请求。</li>
<li>🙂 推荐两种工具都尝试下。</li>
</ul>
</li>
<li>第 3 至 6 行：【TODO 8025】为啥 client 侧，直接返回</li>
<li>第 7 至 11 行：调用&nbsp;<code>#checkPayload(channel, readable)</code>&nbsp;方法，检查长度。</li>
<li>
<p>第 14 至 23 行：处理<strong>退格</strong>的情况。例如在 ShellCraft 工具的情况下，输错一个字母时，使用退格键，需要向 Client 发送 32( 空格 ) + 8( 退格 )。</p>
<blockquote>
<p>FROM&nbsp;<a href="http://blog.51cto.com/wchrt/1627262" target="_blank" rel="external nofollow noopener noreferrer">《telnet编程 客户端 服务器》</a></p>
<p>写服务器要自己处理很多情况，比如说我要删除一个字符。BS退格，但是不能删除，也没有相应的删除ASCII。这里可以这样处理：先向客户端发送退格，再发送空格（覆盖要删除的字符），再发送退格。这样就实现了删除一个位置的字符。</p>
</blockquote>
</li>
<li>
<p>第 25 至 34 行：调用&nbsp;<code>#isEquals(message, command)</code>&nbsp;方法，判断是否使用退出命令。若是，关闭连接。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;?&gt; EXIT = Arrays.asList(<span class="keyword">new</span> Object[]{<span class="keyword">new</span> <span class="keyword">byte</span>[]{<span class="number">3</span>} <span class="comment">/* Windows Ctrl+C */</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[]{-<span class="number">1</span>, -<span class="number">12</span>, -<span class="number">1</span>, -<span class="number">3</span>, <span class="number">6</span>} <span class="comment">/* Linux Ctrl+C */</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[]{-<span class="number">1</span>, -<span class="number">19</span>, -<span class="number">1</span>, -<span class="number">3</span>, <span class="number">6</span>} <span class="comment">/* Linux Pause */</span>});</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEquals</span><span class="params">(<span class="keyword">byte</span>[] message, <span class="keyword">byte</span>[] command)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">return</span> message.length == command.length &amp;&amp; endsWith(message, command);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p>第 36 至 92 行：通过<strong>向上</strong>或<strong>向下</strong>键，从 Dubbo Server 获得历史的命令。因为可以多次向上或向下，所以 Server 需要记录位置( Index )。相关代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 历史命令列表</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HISTORY_LIST_KEY = <span class="string">"telnet.history.list"</span>;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 历史命令位置（用户向上或向下）</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HISTORY_INDEX_KEY = <span class="string">"telnet.history.index"</span>;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 向上</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] UP = <span class="keyword">new</span> <span class="keyword">byte</span>[]{<span class="number">27</span>, <span class="number">91</span>, <span class="number">65</span>};</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 向下</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] DOWN = <span class="keyword">new</span> <span class="keyword">byte</span>[]{<span class="number">27</span>, <span class="number">91</span>, <span class="number">66</span>};</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>🙂 代码比较复杂，有多种边界场景，胖友认真读下代码注释，并自己调试下。</li>
</ul>
</li>
<li>
<p>第 95 至 103 行：关闭指令。<strong>历史命令的情况下</strong>。</p>
</li>
<li>
<p>第 104 至 114 行：调用&nbsp;<code>#endsWith(message, command)</code>&nbsp;方法，查找是否<strong>回车</strong>结尾。若不是，说明一条 telnet 命令还没结束。</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;?&gt; ENTER = Arrays.asList(<span class="keyword">new</span> Object[]{<span class="keyword">new</span> <span class="keyword">byte</span>[]{<span class="string">'\r'</span>, <span class="string">'\n'</span>} <span class="comment">/* Windows Enter */</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[]{<span class="string">'\n'</span>} <span class="comment">/* Linux Enter */</span>});</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(<span class="keyword">byte</span>[] message, <span class="keyword">byte</span>[] command)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">if</span> (message.length &lt; command.length) {</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">int</span> offset = message.length - command.length;</span><br /><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = command.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br /><span class="line">        <span class="keyword">if</span> (message[offset + i] != command[i]) {</span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p>第 115 至 118 行：移除历史命令数组的位置。</p>
</li>
<li>第 119 至 129 行：将历史命令拼接到当前命令<strong>前面</strong>。此处会存在一个 Bug ，复现流程如下：
<ul>
<li>1、输入&nbsp;<code>ls</code>&nbsp;回车</li>
<li>2、输入&nbsp;<code>pwd</code>&nbsp;，向上，回车。此处 Dubbo Server 解析的最终结果为&nbsp;<code>lspwd</code>&nbsp;。理论来说，应该是&nbsp;<code>ls</code>&nbsp;。</li>
</ul>
</li>
<li>
<p>第 131 行：将命令字节数组，转成具体的一条命令。</p>
<ul>
<li>调用&nbsp;<a href="https://github.com/apache/incubator-dubbo/blob/bb8884e04433677d6abc6f05c6ad9d39e3dcf236/dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/telnet/codec/TelnetCodec.java#L55-L85" target="_blank" rel="external nofollow noopener noreferrer"><code>#getCharset(channel)</code></a>&nbsp;方法，获得通道的字符集。🙂 代码比较简单，胖友点击查看。</li>
<li>
<p>调用&nbsp;<code>#toString(message, charset)</code>&nbsp;方法，将命令字节数组，转成具体的一条命令。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">byte</span>[] message, Charset charset)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>{</span><br /><span class="line">            <span class="keyword">byte</span>[] copy = <span class="keyword">new</span> <span class="keyword">byte</span>[message.length];</span><br /><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br /><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; message.length; i++) {</span><br /><span class="line">                <span class="keyword">byte</span> b = message[i];</span><br /><span class="line">                <span class="comment">// 退格，尾部减小</span></span><br /><span class="line">                <span class="keyword">if</span> (b == <span class="string">'\b'</span>) { <span class="comment">// backspace</span></span><br /><span class="line">                    <span class="keyword">if</span> (index &gt; <span class="number">0</span>) {</span><br /><span class="line">                        index--;</span><br /><span class="line">                    }</span><br /><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">2</span> &amp;&amp; message[i - <span class="number">2</span>] &lt; <span class="number">0</span>) { <span class="comment">// double byte char</span></span><br /><span class="line">                        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) {</span><br /><span class="line">                            index--;</span><br /><span class="line">                        }</span><br /><span class="line">                    }</span><br /><span class="line">                <span class="comment">// 换码(溢出)</span></span><br /><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">27</span>) { <span class="comment">// escape</span></span><br /><span class="line">                    <span class="keyword">if</span> (i &lt; message.length - <span class="number">4</span> &amp;&amp; message[i + <span class="number">4</span>] == <span class="number">126</span>) {</span><br /><span class="line">                        i = i + <span class="number">4</span>;</span><br /><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; message.length - <span class="number">3</span> &amp;&amp; message[i + <span class="number">3</span>] == <span class="number">126</span>) {</span><br /><span class="line">                        i = i + <span class="number">3</span>;</span><br /><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; message.length - <span class="number">2</span>) {</span><br /><span class="line">                        i = i + <span class="number">2</span>;</span><br /><span class="line">                    }</span><br /><span class="line">                <span class="comment">// 握手</span></span><br /><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (b == -<span class="number">1</span> &amp;&amp; i &lt; message.length - <span class="number">2</span></span><br /><span class="line">                        &amp;&amp; (message[i + <span class="number">1</span>] == -<span class="number">3</span> || message[i + <span class="number">1</span>] == -<span class="number">5</span>)) { <span class="comment">// handshake</span></span><br /><span class="line">                    i = i + <span class="number">2</span>;</span><br /><span class="line">                } <span class="keyword">else</span> {</span><br /><span class="line">                    copy[index++] = message[i];</span><br /><span class="line">                }</span><br /><span class="line">            }</span><br /><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) {</span><br /><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br /><span class="line">            }</span><br /><span class="line">            <span class="comment">// 创建字符串</span></span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(copy, <span class="number">0</span>, index, charset.name()).trim();</span><br /><span class="line">        }</span><br /><span class="line">        ``` </span><br /><span class="line">        * x   </span><br /><br /><span class="line">😈 建议多调试，这样会更好理解。</span><br /><br /><span class="line">如下是 TelnetCodec 的被**调用栈**：![调用栈](http:<span class="comment">//static2.iocoder.cn/images/Dubbo/2018_12_07/03.png)</span></span><br /><br /><span class="line">**编码**</span><br /><br /><span class="line">```Java</span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(Channel channel, ChannelBuffer buffer, Object message)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="comment">// telnet 命令结果</span></span><br /><span class="line">    <span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) {</span><br /><span class="line">        <span class="keyword">if</span> (isClientSide(channel)) { <span class="comment">// 【TODO 8025】为啥 client 侧，需要多加 \r\n</span></span><br /><span class="line">            message = message + <span class="string">"\r\n"</span>;</span><br /><span class="line">        }</span><br /><span class="line">        <span class="comment">// 写入</span></span><br /><span class="line">        <span class="keyword">byte</span>[] msgData = ((String) message).getBytes(getCharset(channel).name());</span><br /><span class="line">        buffer.writeBytes(msgData);</span><br /><span class="line">    <span class="comment">// 非 telnet 命令结果。目前不会出现</span></span><br /><span class="line">    } <span class="keyword">else</span> {</span><br /><span class="line">        <span class="keyword">super</span>.encode(channel, buffer, message);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
</li>
</ul>
<h1 id="3-TelnetHandler">3. TelnetHandler</h1>
<p><code>com.alibaba.dubbo.remoting.telnet.TelnetHandler</code>&nbsp;，telnet 命令处理器。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@SPI</span></span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TelnetHandler</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * telnet.</span></span><br /><span class="line"><span class="comment">     * 处理 telnet 命令</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel 通道</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> message telnet 命令</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function">String <span class="title">telnet</span><span class="params">(Channel channel, String message)</span> <span class="keyword">throws</span> RemotingException</span>;</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>@SPI</code>&nbsp;注解，Dubbo SPI&nbsp;<strong>拓展点</strong>。</li>
<li><strong>每种</strong>&nbsp;telnet 命令，对应一个 TelnetHandler 实现类。</li>
</ul>
<h1 id="4-TelnetHandlerAdapter">4. TelnetHandlerAdapter</h1>
<p><code>com.alibaba.dubbo.remoting.telnet.support.TelnetHandlerAdapter</code>&nbsp;，实现 TelnetHandler 接口，继承 ChannelHandlerAdapter 类，telnet 处理器<strong>适配器</strong>，负责接收来自 HeaderExchangeHandler 的 telnet 命令，分发给对应的 TelnetHandler 实现类，进行处理，<strong>返回命令结果</strong>。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelnetHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">TelnetHandler</span> </span>{</span><br /><span class="line"> <span class="number">2</span>: </span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">private</span> <span class="keyword">final</span> ExtensionLoader&lt;TelnetHandler&gt; extensionLoader = ExtensionLoader.getExtensionLoader(TelnetHandler.class);</span><br /><span class="line"> <span class="number">4</span>: </span><br /><span class="line"> <span class="number">5</span>:     <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">6</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">telnet</span><span class="params">(Channel channel, String message)</span> <span class="keyword">throws</span> RemotingException </span>{</span><br /><span class="line"> <span class="number">7</span>:         <span class="comment">// 处理 telnet 提示键</span></span><br /><span class="line"> <span class="number">8</span>:         String prompt = channel.getUrl().getParameterAndDecoded(Constants.PROMPT_KEY, Constants.DEFAULT_PROMPT);</span><br /><span class="line"> <span class="number">9</span>:         <span class="keyword">boolean</span> noprompt = message.contains(<span class="string">"--no-prompt"</span>);</span><br /><span class="line"><span class="number">10</span>:         message = message.replace(<span class="string">"--no-prompt"</span>, <span class="string">""</span>);</span><br /><span class="line"><span class="number">11</span>:         <span class="comment">// 拆出 telnet 命令和参数</span></span><br /><span class="line"><span class="number">12</span>:         StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br /><span class="line"><span class="number">13</span>:         message = message.trim();</span><br /><span class="line"><span class="number">14</span>:         String command; <span class="comment">// 命令</span></span><br /><span class="line"><span class="number">15</span>:         <span class="keyword">if</span> (message.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">16</span>:             <span class="keyword">int</span> i = message.indexOf(<span class="string">' '</span>);</span><br /><span class="line"><span class="number">17</span>:             <span class="keyword">if</span> (i &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">18</span>:                 command = message.substring(<span class="number">0</span>, i).trim(); <span class="comment">// 命令</span></span><br /><span class="line"><span class="number">19</span>:                 message = message.substring(i + <span class="number">1</span>).trim(); <span class="comment">// 参数</span></span><br /><span class="line"><span class="number">20</span>:             } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">21</span>:                 command = message; <span class="comment">// 命令</span></span><br /><span class="line"><span class="number">22</span>:                 message = <span class="string">""</span>; <span class="comment">// 参数</span></span><br /><span class="line"><span class="number">23</span>:             }</span><br /><span class="line"><span class="number">24</span>:         } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">25</span>:             command = <span class="string">""</span>; <span class="comment">// 命令</span></span><br /><span class="line"><span class="number">26</span>:         }</span><br /><span class="line"><span class="number">27</span>:         <span class="keyword">if</span> (command.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">28</span>:             <span class="comment">// 查找到对应的 TelnetHandler 对象，执行命令</span></span><br /><span class="line"><span class="number">29</span>:             <span class="keyword">if</span> (extensionLoader.hasExtension(command)) {</span><br /><span class="line"><span class="number">30</span>:                 <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">31</span>:                     String result = extensionLoader.getExtension(command).telnet(channel, message);</span><br /><span class="line"><span class="number">32</span>:                     <span class="keyword">if</span> (result == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">33</span>:                         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line"><span class="number">34</span>:                     }</span><br /><span class="line"><span class="number">35</span>:                     buf.append(result);</span><br /><span class="line"><span class="number">36</span>:                 } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line"><span class="number">37</span>:                     buf.append(t.getMessage());</span><br /><span class="line"><span class="number">38</span>:                 }</span><br /><span class="line"><span class="number">39</span>:             <span class="comment">// 查找不到对应的 TelnetHandler 对象，返回报错。</span></span><br /><span class="line"><span class="number">40</span>:             } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">41</span>:                 buf.append(<span class="string">"Unsupported command: "</span>);</span><br /><span class="line"><span class="number">42</span>:                 buf.append(command);</span><br /><span class="line"><span class="number">43</span>:             }</span><br /><span class="line"><span class="number">44</span>:         }</span><br /><span class="line"><span class="number">45</span>:         <span class="comment">// 添加 telnet 提示语</span></span><br /><span class="line"><span class="number">46</span>:         <span class="keyword">if</span> (buf.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">47</span>:             buf.append(<span class="string">"\r\n"</span>);</span><br /><span class="line"><span class="number">48</span>:         }</span><br /><span class="line"><span class="number">49</span>:         <span class="keyword">if</span> (prompt != <span class="keyword">null</span> &amp;&amp; prompt.length() &gt; <span class="number">0</span> &amp;&amp; !noprompt) {</span><br /><span class="line"><span class="number">50</span>:             buf.append(prompt);</span><br /><span class="line"><span class="number">51</span>:         }</span><br /><span class="line"><span class="number">52</span>:         <span class="comment">// 返回</span></span><br /><span class="line"><span class="number">53</span>:         <span class="keyword">return</span> buf.toString();</span><br /><span class="line"><span class="number">54</span>:     }</span><br /><span class="line"><span class="number">55</span>: </span><br /><span class="line"><span class="number">56</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 8 至 10 行：处理 telnet 提示语，默认为&nbsp;<code>"dubbo"</code>&nbsp;，可通过&nbsp;<code>&lt;dubbo:application prompt="" /&gt;</code>&nbsp;配置。提示语的效果，如下图所示红框部分：<img src="http://static2.iocoder.cn/images/Dubbo/2018_12_07/04.png" alt="提示语" /></li>
<li>第 11 至 26 行：拆除 telnet 命令和参数<strong>两</strong>部分。</li>
<li>第 28 至 38 行：查找到对应的 TelnetHandler 对象，执行命令，返回结果。</li>
<li>第 39 至 43 行：查找不到对应的 TelnetHandler 对象，返回<strong>报错提示</strong>。</li>
<li>第 45 至 53 行：添加 telnet 提示语，并最终返回。</li>
</ul>
<p>下面我们来看下 HeaderExchangeHandler 对 TelnetHandlerAdapter 的调用，简化代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ExchangeHandler handler;</span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>{</span><br /><span class="line">    <span class="comment">// ... 省略代码</span></span><br /><span class="line">    <span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) {</span><br /><span class="line">        <span class="keyword">if</span> (isClientSide(channel)) {</span><br /><span class="line">            Exception e = <span class="keyword">new</span> Exception(<span class="string">"Dubbo client can not supported string message: "</span> + message + <span class="string">" in channel: "</span> + channel + <span class="string">", url: "</span> + channel.getUrl());</span><br /><span class="line">            logger.error(e.getMessage(), e);</span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            String echo = handler.telnet(channel, (String) message);</span><br /><span class="line">            <span class="keyword">if</span> (echo != <span class="keyword">null</span> &amp;&amp; echo.length() &gt; <span class="number">0</span>) {</span><br /><span class="line">                channel.send(echo);</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br />    <br /><span class="line">    <span class="comment">// ... 省略代码</span></span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>在该方法中，我们可以看到，会调用&nbsp;<code>handler</code>&nbsp;的&nbsp;<code>#telnet(channel, message)</code>&nbsp;方法，处理 telnet 命令，并将执行命令的结果，发送给客户端。</li>
<li>🙂 可能胖友会懵逼，<code>handler</code>&nbsp;不是 ExchangeHandler 类型么？在后面的文章，我们会看到 ExchangeHandler 实现 TelnetHandler 接口。</li>
</ul>
<p>这样就完了么？不不不。为什么 TelnetHandlerAdapter 会继承 ChannelHandlerAdapter 类呢？因为后文会看到的 ExchangeHandlerAdapter ，实现了 TelnetHandlerAdapter 类，而 Java 不支持多继承，所以使用 TelnetHandlerAdapter 继承 ChannelHandlerAdapter 类。多少有些无奈？这是艿艿的理解，也不一定正确，欢迎一起探讨。</p>
<h1 id="5-TelnetHandler-命令实现">5. TelnetHandler 命令实现</h1>
<p>在&nbsp;<code>command</code>&nbsp;包下，我们可以看到多种 TelnetHandler 命令的实现类，如下图所示：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_12_07/05.png" alt="command" /></p>
<ul>
<li>ClearTelnetHandler</li>
<li>ExitTelnetHandler</li>
<li>HelpTelnetHandler</li>
<li>LogTelnetHandler</li>
<li>StatusTelnetHandler</li>
</ul>
<p>😈 具体每个类的实现，本文就省略，胖友对哪个感兴趣，可以自己瞅瞅。</p>
<p>在每个实现类上，我们会看到添加有&nbsp;<code>@Help</code>&nbsp;注解，用于每个 telnet 指令的帮助文档。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Documented</span></span><br /><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br /><span class="line"><span class="meta">@Target</span>({ElementType.TYPE})</span><br /><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Help {</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 参数说明</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function">String <span class="title">parameter</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 简要提示</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function">String <span class="title">summary</span><span class="params">()</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 详细提示</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function">String <span class="title">detail</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</div>