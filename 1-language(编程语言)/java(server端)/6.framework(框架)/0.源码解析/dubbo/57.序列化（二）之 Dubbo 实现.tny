<header class="article-header">
<h1 class="article-title">序列化（二）之 Dubbo 实现</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>本文分享基于 Dubbo&nbsp;<strong>自己实现</strong>的序列化拓展。要实现序列化的高性能，需要考虑两方面：</p>
<ul>
<li>序列化和反序列化<strong>速度快</strong></li>
<li>从<strong>传输</strong>角度，数据压缩效果好，即序列化后的数据量<strong>体积小</strong></li>
</ul>
<blockquote>
<p>旁白君：从以下开始，<strong>Dubbo 指的是 Dubbo 序列化拓展</strong>，而不是 Dubbo PRC 框架。请注意。</p>
</blockquote>
<p>在&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/perf-test.html" target="_blank" rel="external nofollow noopener noreferrer">《用户指南 &mdash;&mdash; 性能测试报告》</a>&nbsp;和&nbsp;<a href="https://dangdangdotcom.github.io/dubbox/serialization.html" target="_blank" rel="external nofollow noopener noreferrer">《在Dubbo中使用高效的Java序列化（Kryo和FST）》</a>&nbsp;中，我们可以看到，Dubbo 是一种相对优秀的实现方式。虽然，在最新版本的 Dubbo 项目中，<code>dubbo-serialize</code>&nbsp;模块已经去除了 Dubbo 序列化的实现，猜测因为引入 Kryo 和 FST ，相比来说更优秀。</p>
<p>当然，即使如此，艿艿觉得了解下 Dubbo 序列化是如何实现的，<strong>是一种非常棒的眼界提升</strong>，特别是序列化的数据压缩，在很多场景下都会使用，例如 Lucene 的数据存储。</p>
<p>下面，我们跟着代码，一起愉快的玩耍把。本文涉及代码如下：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_02_18/01.png" alt="类图" /></p>
<blockquote>
<p>写的有点匆忙，也有点着急，如果有错误，或者不清晰的地方，请往死里抽（告诉）我。哈哈哈。</p>
</blockquote>
<h1 id="2-GenericDataFlags">2. GenericDataFlags</h1>
<p>Dubbo ，是一种<strong>有序、紧凑</strong>的序列化方式。如下是序列化后的二进制数据流的示意图：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_02_18/02.png" alt="二进制数据流" /></p>
<ul>
<li>不同于 JSON / XML 等序列化方式，无需序列化每个<strong>属性名</strong>。通过 Builder 对象，创建每个类的序列化和反序列化的<strong>具体</strong>代码。
<ul>
<li>这样，我们就避免了<strong>属性名</strong>的序列化，提升了速度，减少了数据的体积。</li>
<li>当然，反过来说，如果对象发生了<strong>变化</strong>( 增加或删除属性 )，可能会出现 Client 和 Server 序列化的<strong>不兼容</strong>，因为属性的<strong>顺序</strong>发生了变化。</li>
</ul>
</li>
<li>属性值和属性值之间<strong>无间隔</strong>，通过属性值的<strong>标志位</strong>&nbsp;Flag 保证，也就是本小节要分享的 GenericDataFlags 。</li>
</ul>
<p>下面，我们来看看&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/GenericDataFlags.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.common.serialize.support.dubbo.GenericDataFlags</code></a>&nbsp;，通用数据<strong>标记位</strong>枚举，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericDataFlags</span> </span>{</span><br /><br /><span class="line">    <span class="comment">// prefix three bits</span></span><br /><span class="line">    <span class="keyword">byte</span> VARINT = <span class="number">0</span>, <span class="comment">// 0 数字</span></span><br /><span class="line">        OBJECT = (<span class="keyword">byte</span>) <span class="number">0x80</span>; <span class="comment">// -128 对象</span></span><br /><br /><span class="line">    <span class="comment">// varint tag</span></span><br /><span class="line">    <span class="keyword">byte</span> VARINT8 = VARINT, VARINT16 = VARINT | <span class="number">1</span>, VARINT24 = VARINT | <span class="number">2</span>, VARINT32 = VARINT | <span class="number">3</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT40 = VARINT | <span class="number">4</span>, VARINT48 = VARINT | <span class="number">5</span>, VARINT56 = VARINT | <span class="number">6</span>, VARINT64 = VARINT | <span class="number">7</span>;</span><br /><br /><span class="line">    <span class="comment">// varint contants</span></span><br /><span class="line">    <span class="keyword">byte</span> VARINT_NF = VARINT | <span class="number">10</span>, VARINT_NE = VARINT | <span class="number">11</span>, VARINT_ND = VARINT | <span class="number">12</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_NC = VARINT | <span class="number">13</span>, VARINT_NB = VARINT | <span class="number">14</span>, VARINT_NA = VARINT | <span class="number">15</span>, VARINT_N9 = VARINT | <span class="number">16</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_N8 = VARINT | <span class="number">17</span>, VARINT_N7 = VARINT | <span class="number">18</span>, VARINT_N6 = VARINT | <span class="number">19</span>, VARINT_N5 = VARINT | <span class="number">20</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_N4 = VARINT | <span class="number">21</span>, VARINT_N3 = VARINT | <span class="number">22</span>, VARINT_N2 = VARINT | <span class="number">23</span>, VARINT_N1 = VARINT | <span class="number">24</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_0 = VARINT | <span class="number">25</span>, VARINT_1 = VARINT | <span class="number">26</span>, VARINT_2 = VARINT | <span class="number">27</span>, VARINT_3 = VARINT | <span class="number">28</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_4 = VARINT | <span class="number">29</span>, VARINT_5 = VARINT | <span class="number">30</span>, VARINT_6 = VARINT | <span class="number">31</span>, VARINT_7 = VARINT | <span class="number">32</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_8 = VARINT | <span class="number">33</span>, VARINT_9 = VARINT | <span class="number">34</span>, VARINT_A = VARINT | <span class="number">35</span>, VARINT_B = VARINT | <span class="number">36</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_C = VARINT | <span class="number">37</span>, VARINT_D = VARINT | <span class="number">38</span>, VARINT_E = VARINT | <span class="number">39</span>, VARINT_F = VARINT | <span class="number">40</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_10 = VARINT | <span class="number">41</span>, VARINT_11 = VARINT | <span class="number">42</span>, VARINT_12 = VARINT | <span class="number">43</span>, VARINT_13 = VARINT | <span class="number">44</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_14 = VARINT | <span class="number">45</span>, VARINT_15 = VARINT | <span class="number">46</span>, VARINT_16 = VARINT | <span class="number">47</span>, VARINT_17 = VARINT | <span class="number">48</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_18 = VARINT | <span class="number">49</span>, VARINT_19 = VARINT | <span class="number">50</span>, VARINT_1A = VARINT | <span class="number">51</span>, VARINT_1B = VARINT | <span class="number">52</span>;</span><br /><span class="line">    <span class="keyword">byte</span> VARINT_1C = VARINT | <span class="number">53</span>, VARINT_1D = VARINT | <span class="number">54</span>, VARINT_1E = VARINT | <span class="number">55</span>, VARINT_1F = VARINT | <span class="number">56</span>;</span><br /><br /><span class="line">    <span class="comment">// object tag</span></span><br /><span class="line">    <span class="keyword">byte</span> OBJECT_REF = OBJECT | <span class="number">1</span>, OBJECT_STREAM = OBJECT | <span class="number">2</span>, OBJECT_BYTES = OBJECT | <span class="number">3</span>;</span><br /><span class="line">    <span class="keyword">byte</span> OBJECT_VALUE = OBJECT | <span class="number">4</span>, OBJECT_VALUES = OBJECT | <span class="number">5</span>, OBJECT_MAP = OBJECT | <span class="number">6</span>;</span><br /><span class="line">    <span class="keyword">byte</span> OBJECT_DESC = OBJECT | <span class="number">10</span>, OBJECT_DESC_ID = OBJECT | <span class="number">11</span>;</span><br /><br /><span class="line">    <span class="comment">// object constants</span></span><br /><span class="line">    <span class="keyword">byte</span> OBJECT_NULL = OBJECT | <span class="number">20</span>, OBJECT_DUMMY = OBJECT | <span class="number">21</span>;</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p>😜 是不是有点一脸懵逼？！我们把枚举做一次规整，如下图所示：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_02_18/09.png" alt="协议整理" /></p>
<ul>
<li>在每个属性值( 即 field )的<strong>首个 Byte 位</strong>，称为<strong>标志位 Flag</strong>&nbsp;。目前我们分成两大类( 图中，绿色部分 )：
<ul>
<li>Varint ，<strong>变长数字</strong>，占用 Byte 值的&nbsp;<code>[0, 128)</code>&nbsp;区间。</li>
<li>Object ，<strong>对象</strong>，占用 Byte 值的&nbsp;<code>[-128, 0)</code>&nbsp;区间。</li>
</ul>
</li>
<li>标志位 Flag 根据<strong>用途</strong>，可以分成两种<strong>类型</strong>（注意，值是<strong>不重叠</strong>的）：
<ul>
<li>Tag ，<strong>标签</strong>( 图中，橙色部分 )。
<ul>
<li>以 VarInt 举例子，<strong>数字</strong>分成 BYTE、SHORT、INT、LONG 四种数据类型。 通过标记位，表示数字占用<strong>多少</strong>Byte ，从而实现<strong>变长</strong>，节省 Byte 的占用。例如，属性值类型为&nbsp;<strong>Long</strong>&nbsp;，但是值是&nbsp;<strong>100L</strong>&nbsp;，那么只需要要 1 Byte( 标记位为&nbsp;<strong>VARINT8</strong>&nbsp;) + 1 Byte(&nbsp;<strong>100L</strong>&nbsp;) = 2 Byte 。</li>
<li>当然，这种方式也有缺点，对于<strong>大整数</strong>，会多占用一个<strong>标记位</strong>，例如&nbsp;<code>Integer.MAX_VALUE</code>&nbsp;。从统计上来说，业务系统更多的是<strong>小整数</strong>。所以，这个缺点也是能够接受的。</li>
</ul>
</li>
<li>CONSTANTS ，&nbsp;<strong>枚举</strong>( 图中，黄色部分 )，用于<strong>常用</strong>属性值。
<ul>
<li>以 Varint 举例子，在业务系统中，<code>[ -15, 31 ]</code>&nbsp;是<strong>非常常用</strong>。通过枚举，进一步减少数据提及，提升序列化速度。所以 Varint 的二进制数据流示意图如下：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_18/10.png" alt="二进制数据流" /></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>可能有胖友会问，上面只提到了数字怎么序列化，<strong>那么对象怎么序列化呢</strong>？我们以 POJO 为例子，简单说下。实际上，我们可以把对象理解成<strong>一个属性值的集合</strong>，通过下面会看到的 Builder 类，生成该对象的序列化和反序列化的过程的代码即可。</p>
<p>当然，对象不仅仅有 POJO ，还有 MAP，数组等等，下面我们都会看到具体的处理代码。</p>
<p>🙂 嗯，哔哔了这么多，让我们愉快的开始看代码把。</p>
<h1 id="3-Data">3. Data</h1>
<h2 id="3-1-GenericDataOutput">3.1 GenericDataOutput</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/GenericDataOutput.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.common.serialize.support.dubbo.GenericDataOutput</code></a>&nbsp;，实现 DataOutput，GenericDataFlags 接口，Dubbo 数据输出实现类。</p>
<h3 id="3-1-1-构造方法">3.1.1 构造方法</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 默认 {<span class="doctag">@link</span> #mCharBuf} 大小</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHAR_BUF_SIZE = <span class="number">256</span>;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 序列化字符串的临时结果的 Buffer 数组，用于 {<span class="doctag">@link</span> #writeUTF(String)} 中。</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span>[] mCharBuf = <span class="keyword">new</span> <span class="keyword">char</span>[CHAR_BUF_SIZE];</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 序列化 Varint 的临时结果的 Buffer 数组，用于 {<span class="doctag">@link</span> #writeVarint32(int)} 和 {<span class="doctag">@link</span> #writeVarint64(long)} 中。</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] mTemp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">9</span>];</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 序列化结果的 Buffer 数组</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] mBuffer;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * {<span class="doctag">@link</span> #mBuffer} 容量大小</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mLimit;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * {<span class="doctag">@link</span> #mBuffer} 当前写入位置</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mPosition = <span class="number">0</span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 结果输出</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OutputStream mOutput;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>mCharBuf</code>&nbsp;属性，序列化<strong>字符串</strong>的临时结果的 Buffer 数组，用于&nbsp;<code>#writeUTF(String v)</code>&nbsp;方法中。
<ul>
<li><code>#CHAR_BUF_SIZE</code>&nbsp;<strong>静态</strong>属性，默认大小。</li>
</ul>
</li>
<li><code>mTemp</code>&nbsp;属性，序列化&nbsp;<strong>Varint</strong>&nbsp;的临时结果的 Buffer 数组，用于&nbsp;<code>#writeVarint32(int)</code>&nbsp;和&nbsp;<code>#writeVarint64(long)</code>&nbsp;方法中。
<ul>
<li>数组大小为 9 ，因为 Varint 最大占用 9 字节，Tag( 1 Byte ) + Long( 8 Bytes ) 。</li>
</ul>
</li>
<li><code>mBuffer</code>&nbsp;属性，序列化<strong>结果</strong>的 Buffer 数组。
<ul>
<li><code>mPosition</code>&nbsp;属性，<strong>当前</strong>写入位置。</li>
<li><code>mLimit</code>&nbsp;属性，容量大小。</li>
<li><code>mOutput</code>&nbsp;属性，结果输出，<code>mBuffer =&gt; mOutput</code>&nbsp;中。</li>
</ul>
</li>
</ul>
<h3 id="3-1-2-writeBool">3.1.2 writeBool</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeBool</span><span class="params">(<span class="keyword">boolean</span> v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    write0(v ? VARINT_1 : VARINT_0);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>通过 1 表示 TRUE ，0 表示 FALSE 。占用 1 Byte ，使用&nbsp;<strong>CONSTANTS</strong>( VARINT_1、VARINT_0 ) 即可。</li>
<li>
<p>调用&nbsp;<code>#write0(byte b)</code>&nbsp;方法，写入&nbsp;<code>mBuffer</code>&nbsp;中。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write0</span><span class="params">(<span class="keyword">byte</span> b)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="comment">// 超过 mBuffer 容量上限，刷入 mOutput 中</span></span><br /><span class="line">    <span class="keyword">if</span> (mPosition == mLimit) {</span><br /><span class="line">        flushBuffer();</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 写入 mBuffer 中。</span></span><br /><span class="line">    mBuffer[mPosition++] = b;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>#flushBuffer()</code>&nbsp;方法，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flushBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">if</span> (mPosition &gt; <span class="number">0</span>) {</span><br /><span class="line">        <span class="comment">// 写入 mOutput</span></span><br /><span class="line">        mOutput.write(mBuffer, <span class="number">0</span>, mPosition);</span><br /><span class="line">        <span class="comment">// 重置当前写入位置</span></span><br /><span class="line">        mPosition = <span class="number">0</span>;</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
</li>
</ul>
<h3 id="3-1-3-writeByte">3.1.3 writeByte</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeByte</span><span class="params">(<span class="keyword">byte</span> v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">switch</span> (v) {</span><br /><span class="line"> <span class="number">4</span>:         <span class="comment">// TODO 【8034】为什么没有负数的枚举</span></span><br /><span class="line"> <span class="number">5</span>:         <span class="comment">// 符合 Varint 枚举值，写入对应的枚举值</span></span><br /><span class="line"> <span class="number">6</span>:         <span class="keyword">case</span> <span class="number">0</span>:</span><br /><span class="line"> <span class="number">7</span>:             write0(VARINT_0);</span><br /><span class="line"> <span class="number">8</span>:             <span class="keyword">break</span>;</span><br /><span class="line"> <span class="number">9</span>:         <span class="comment">// ... 省略中间，[1, 30] 重复的 case 处理</span></span><br /><span class="line"><span class="number">10</span>:         <span class="keyword">case</span> <span class="number">31</span>:</span><br /><span class="line"><span class="number">11</span>:             write0(VARINT_1F);</span><br /><span class="line"><span class="number">12</span>:             <span class="keyword">break</span>;</span><br /><span class="line"><span class="number">13</span>:         <span class="comment">// 不符合 Varint 枚举值，写入 Tag + 具体值</span></span><br /><span class="line"><span class="number">14</span>:         <span class="keyword">default</span>:</span><br /><span class="line"><span class="number">15</span>:             <span class="comment">// 写入 VARINT8</span></span><br /><span class="line"><span class="number">16</span>:             write0(VARINT8);</span><br /><span class="line"><span class="number">17</span>:             <span class="comment">// 写入 BYTE 具体值</span></span><br /><span class="line"><span class="number">18</span>:             write0(v);</span><br /><span class="line"><span class="number">19</span>:     }</span><br /><span class="line"><span class="number">20</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 4 行：// TODO 【8034】为什么没有负数的枚举</li>
<li>第 5 至 12 行：符合 Varint&nbsp;<strong>CONSTANTS</strong>&nbsp;，写入对应的&nbsp;<strong>CONSTANTS</strong>。</li>
<li>第 13 至 19 行：不符合 Varint CONSTANTS ，调用两次&nbsp;<code>#write0(byte b)</code>&nbsp;方法，写入&nbsp;<strong>VARINT8</strong>&nbsp;+ 具体值&nbsp;<code>v</code>。</li>
</ul>
<h3 id="3-1-4-writeShort">3.1.4 writeShort</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeShort</span><span class="params">(<span class="keyword">short</span> v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    writeVarint32(v);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>调用&nbsp;<code>#writeVarint32(int v)</code>&nbsp;方法，写入。代码如下：</li>
</ul>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeVarint32</span><span class="params">(<span class="keyword">int</span> v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"> <span class="number">2</span>:     <span class="keyword">switch</span> (v) {</span><br /><span class="line"> <span class="number">3</span>:         <span class="comment">// 符合 Varint 枚举值，写入对应的枚举值</span></span><br /><span class="line"> <span class="number">4</span>:         <span class="keyword">case</span> -<span class="number">15</span>:</span><br /><span class="line"> <span class="number">5</span>:             write0(VARINT_NF);</span><br /><span class="line"> <span class="number">6</span>:             <span class="keyword">break</span>;</span><br /><span class="line"> <span class="number">7</span>:         <span class="comment">// ... 省略中间，[-14, 30] 重复的 case 处理</span></span><br /><span class="line"> <span class="number">8</span>:         <span class="keyword">case</span> <span class="number">31</span>:</span><br /><span class="line"> <span class="number">9</span>:             write0(VARINT_1F);</span><br /><span class="line"><span class="number">10</span>:             <span class="keyword">break</span>;</span><br /><span class="line"><span class="number">11</span>:         <span class="comment">// 不符合 Varint 枚举值，写入 Tag + 具体值</span></span><br /><span class="line"><span class="number">12</span>:         <span class="keyword">default</span>:</span><br /><span class="line"><span class="number">13</span>:             <span class="keyword">int</span> t = v, <span class="comment">// 值</span></span><br /><span class="line"><span class="number">14</span>:                 ix = <span class="number">0</span>; <span class="comment">// 当前写入位置</span></span><br /><span class="line"><span class="number">15</span>:             <span class="keyword">byte</span>[] b = mTemp;</span><br /><span class="line"><span class="number">16</span>:             <span class="comment">// 顺序读取字节，存到 mTemp 中</span></span><br /><span class="line"><span class="number">17</span>:             <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br /><span class="line"><span class="number">18</span>:                 b[++ix] = (<span class="keyword">byte</span>) (v &amp; <span class="number">0xff</span>); <span class="comment">// 大于等于 128 时，会截取到最高位的 1 ，变成负数。</span></span><br /><span class="line"><span class="number">19</span>:                 <span class="keyword">if</span> ((v &gt;&gt;&gt;= <span class="number">8</span>) == <span class="number">0</span>) { <span class="comment">// 无可读字节</span></span><br /><span class="line"><span class="number">20</span>:                     <span class="keyword">break</span>;</span><br /><span class="line"><span class="number">21</span>:                 }</span><br /><span class="line"><span class="number">22</span>:             }</span><br /><span class="line"><span class="number">23</span>: </span><br /><span class="line"><span class="number">24</span>:             <span class="keyword">if</span> (t &gt; <span class="number">0</span>) { <span class="comment">// 正数</span></span><br /><span class="line"><span class="number">25</span>:                 <span class="comment">// [ 0a e2 =&gt; 0a e2 00 ] [ 92 =&gt; 92 00 ]</span></span><br /><span class="line"><span class="number">26</span>:                 <span class="comment">// 最后一次取余，大于等于 128 时，在 (byte) 转换后，变成了负数，需要补一个 0 的 BYTE 到 mTemp 中，否则反序列化后会被误认为负数。</span></span><br /><span class="line"><span class="number">27</span>:                 <span class="keyword">if</span> (b[ix] &lt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">28</span>:                     b[++ix] = <span class="number">0</span>;</span><br /><span class="line"><span class="number">29</span>:                 }</span><br /><span class="line"><span class="number">30</span>:             } <span class="keyword">else</span> { <span class="comment">// 负数</span></span><br /><span class="line"><span class="number">31</span>:                 <span class="comment">// [ 01 ff ff ff =&gt; 01 ff ] [ e0 ff ff ff =&gt; e0 ]</span></span><br /><span class="line"><span class="number">32</span>:                 <span class="comment">// 负数使用补码表示，高位是大量的 1 ，需要去除。</span></span><br /><span class="line"><span class="number">33</span>:                 <span class="comment">// 另外，LONG 的位数比 INT 更多，所以，相同数字，LONG 型会比 INT 型更多，例如 long v = -662L 和 int v = -662 。</span></span><br /><span class="line"><span class="number">34</span>:                 <span class="keyword">while</span> (b[ix] == (<span class="keyword">byte</span>) <span class="number">0xff</span> &amp;&amp; b[ix - <span class="number">1</span>] &lt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">35</span>:                     ix--;</span><br /><span class="line"><span class="number">36</span>:                 }</span><br /><span class="line"><span class="number">37</span>:             }</span><br /><span class="line"><span class="number">38</span>: </span><br /><span class="line"><span class="number">39</span>:             <span class="comment">// 写入 Tag ，到首 Byte 位</span></span><br /><span class="line"><span class="number">40</span>:             b[<span class="number">0</span>] = (<span class="keyword">byte</span>) (VARINT + ix - <span class="number">1</span>);</span><br /><span class="line"><span class="number">41</span>:             <span class="comment">// 写入 Tag + Bytes 到 mBuffer 中</span></span><br /><span class="line"><span class="number">42</span>:             write0(b, <span class="number">0</span>, ix + <span class="number">1</span>);</span><br /><span class="line"><span class="number">43</span>:     }</span><br /><span class="line"><span class="number">44</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 5 至 12 行：符合 Varint&nbsp;<strong>CONSTANTS</strong>&nbsp;，写入对应的&nbsp;<strong>CONSTANTS</strong>。</li>
<li>
<p>第 11 至 43 行：不符合 Varint CONSTANTS ，写入&nbsp;<strong>TAG</strong>&nbsp;+ 具体值 。</p>
<ul>
<li>第 16 至 22 行：顺序<strong>循环</strong>读取<strong>每个字节</strong>，存到&nbsp;<code>b</code>&nbsp;数组中。
<ul>
<li>第 18 行：先&nbsp;<code>0xff</code>&nbsp;做&nbsp;<code>%256</code>&nbsp;取余，获取到<strong>一个字节</strong>。再&nbsp;<strong>(byte)</strong>&nbsp;转换成 BYTE 值。因为，BYTE 数据范围为&nbsp;<code>[-128, 127]</code>&nbsp;，所以取余的结果为&nbsp;<code>[128, 255]</code>&nbsp;范围时，则会被<strong>高位截取</strong>，变成负数。例如，255 会变成 -1 。也因此，<strong>反序列化</strong>时，需要做一次&nbsp;<code>0xff |</code>&nbsp;操作，来补齐<strong>高位的 1</strong>。</li>
<li>第 18 行：<code>b[++ix]</code>&nbsp;，先增加&nbsp;<code>ix</code>&nbsp;的值，在写入&nbsp;<code>b</code>&nbsp;数组中。因为，首 Byte 位为&nbsp;<strong>TAG</strong>&nbsp;。</li>
<li>第 19 至 21 行：无可读字节，结束循环。</li>
</ul>
</li>
<li>第 24 至 29 行：最后一次取余，大于等于 128 时，在&nbsp;<strong>(byte)</strong>&nbsp;转换后，变成了负数，需要补一个 0 到&nbsp;<code>b</code>&nbsp;中，否则反序列化后会被误认为负数。例如：<code>v = 255</code>&nbsp;。</li>
<li>
<p>第 30 至 37 行：负数使用补码表示，高位是大量的 1 ，需要<strong>循环</strong>去除。另外，LONG 的位数比 INT 更多，所以，相同数字，LONG 型会比 INT 型更多，例如&nbsp;<code>long v = -662L</code>&nbsp;和&nbsp;<code>int v = -662</code>&nbsp;。示例如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">INT</span><br /><span class="line">-<span class="number">110</span> -<span class="number">3</span> -<span class="number">1</span> -<span class="number">1</span></span><br /><br /><span class="line">LONG</span><br /><span class="line">-<span class="number">110</span> -<span class="number">3</span> -<span class="number">1</span> -<span class="number">1</span> -<span class="number">1</span> -<span class="number">1</span> -<span class="number">1</span> -<span class="number">1</span></span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>x</li>
</ul>
</li>
<li>涉及大量的<strong>位操作</strong>，不熟悉的胖友，请 Google 复习下大学课程。😈</li>
<li>第 40 行：写入&nbsp;<strong>TAG</strong>&nbsp;，到&nbsp;<code>b</code>&nbsp;的首位。</li>
<li>
<p>第 42 行：调用&nbsp;<code>#write0(byte[] b, int off, int le)</code>&nbsp;方法，<strong>批量</strong>写入&nbsp;<code>mBuffer</code>&nbsp;中。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write0</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">int</span> rem = mLimit - mPosition;</span><br /><span class="line">    <span class="comment">// 未超过 mBuffer 容量上限，批量写入 mBuffer 中</span></span><br /><span class="line">    <span class="keyword">if</span> (rem &gt; len) {</span><br /><span class="line">        System.arraycopy(b, off, mBuffer, mPosition, len);</span><br /><span class="line">        mPosition += len;</span><br /><span class="line">    } <span class="keyword">else</span> {</span><br /><span class="line">        <span class="comment">// 部分批量写满 mBuffer 中</span></span><br /><span class="line">        System.arraycopy(b, off, mBuffer, mPosition, rem);</span><br /><span class="line">        mPosition = mLimit;</span><br /><span class="line">        <span class="comment">// 刷入 mOutput 中</span></span><br /><span class="line">        flushBuffer();</span><br /><br /><span class="line">        off += rem; <span class="comment">// 新的开始位置</span></span><br /><span class="line">        len -= rem; <span class="comment">// 新的长度</span></span><br /><br /><span class="line">        <span class="comment">// 未超过 mBuffer 容量上限，批量写入 mBuffer 中</span></span><br /><span class="line">        <span class="keyword">if</span> (mLimit &gt; len) {</span><br /><span class="line">            System.arraycopy(b, off, mBuffer, <span class="number">0</span>, len);</span><br /><span class="line">            mPosition = len;</span><br /><span class="line">        <span class="comment">// 超过 mBuffer 容量上限，批量写入 mOutput 中</span></span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            mOutput.write(b, off, len);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
</li>
</ul>
<h3 id="3-1-5-writeInt">3.1.5 writeInt</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeInt</span><span class="params">(<span class="keyword">int</span> v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    writeVarint32(v);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="3-1-6-writeLong">3.1.6 writeLong</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeInt</span><span class="params">(<span class="keyword">int</span> v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    writeVarint64(v);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>调用&nbsp;<code>#writeVarint64(long v)</code>&nbsp;方法，写入。代码如下：</li>
</ul>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeVarint64</span><span class="params">(<span class="keyword">long</span> v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"> <span class="number">2</span>:     <span class="comment">// 数据范围在 INT 内</span></span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">int</span> i = (<span class="keyword">int</span>) v;</span><br /><span class="line"> <span class="number">4</span>:     <span class="keyword">if</span> (v == i) {</span><br /><span class="line"> <span class="number">5</span>:         writeVarint32(i);</span><br /><span class="line"> <span class="number">6</span>:     <span class="comment">// 数据范围在 LONG 内，不符合 Varint 枚举值，写入 Tag + 具体值。和 writeVarint32 是一致的</span></span><br /><span class="line"> <span class="number">7</span>:     } <span class="keyword">else</span> {</span><br /><span class="line"> <span class="number">8</span>:         <span class="keyword">long</span> t = v;</span><br /><span class="line"> <span class="number">9</span>:         <span class="keyword">int</span> ix = <span class="number">0</span>;</span><br /><span class="line"><span class="number">10</span>:         <span class="keyword">byte</span>[] b = mTemp;</span><br /><span class="line"><span class="number">11</span>: </span><br /><span class="line"><span class="number">12</span>:         <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br /><span class="line"><span class="number">13</span>:             b[++ix] = (<span class="keyword">byte</span>) (v &amp; <span class="number">0xff</span>);</span><br /><span class="line"><span class="number">14</span>:             <span class="keyword">if</span> ((v &gt;&gt;&gt;= <span class="number">8</span>) == <span class="number">0</span>)</span><br /><span class="line"><span class="number">15</span>:                 <span class="keyword">break</span>;</span><br /><span class="line"><span class="number">16</span>:         }</span><br /><span class="line"><span class="number">17</span>: </span><br /><span class="line"><span class="number">18</span>:         <span class="keyword">if</span> (t &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">19</span>:             <span class="comment">// [ 0a e2 =&gt; 0a e2 00 ] [ 92 =&gt; 92 00 ]</span></span><br /><span class="line"><span class="number">20</span>:             <span class="keyword">if</span> (b[ix] &lt; <span class="number">0</span>)</span><br /><span class="line"><span class="number">21</span>:                 b[++ix] = <span class="number">0</span>;</span><br /><span class="line"><span class="number">22</span>:         } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">23</span>:             <span class="comment">// [ 01 ff ff ff =&gt; 01 ff ] [ e0 ff ff ff =&gt; e0 ]</span></span><br /><span class="line"><span class="number">24</span>:             <span class="keyword">while</span> (b[ix] == (<span class="keyword">byte</span>) <span class="number">0xff</span> &amp;&amp; b[ix - <span class="number">1</span>] &lt; <span class="number">0</span>)</span><br /><span class="line"><span class="number">25</span>:                 ix--;</span><br /><span class="line"><span class="number">26</span>:         }</span><br /><span class="line"><span class="number">27</span>: </span><br /><span class="line"><span class="number">28</span>:         b[<span class="number">0</span>] = (<span class="keyword">byte</span>) (VARINT + ix - <span class="number">1</span>);</span><br /><span class="line"><span class="number">29</span>:         write0(b, <span class="number">0</span>, ix + <span class="number">1</span>);</span><br /><span class="line"><span class="number">30</span>:     }</span><br /><span class="line"><span class="number">31</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 2 至 5 行：当&nbsp;<code>v</code>&nbsp;数据范围在 INT 内时，调用&nbsp;<code>#writeVarint32(int v)</code>&nbsp;处理。</li>
<li>第 7 至 30 行：当&nbsp;<code>v</code>&nbsp;数据范围在 LONG 内时， 不符合 Varint&nbsp;<strong>CONSTANTS</strong>&nbsp;，写入&nbsp;<strong>TAG</strong>&nbsp;+ 具体值，和&nbsp;<code>#writeVarint32(int v)</code>&nbsp;<strong>后半段</strong>的代码是一致的。</li>
</ul>
<h3 id="3-1-7-writeFloat">3.1.7 writeFloat</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFloat</span><span class="params">(<span class="keyword">float</span> v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    writeVarint32(Float.floatToRawIntBits(v));</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="3-1-8-writeDouble">3.1.8 writeDouble</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeDouble</span><span class="params">(<span class="keyword">double</span> v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    writeVarint64(Double.doubleToRawLongBits(v));</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="3-1-9-writeUInt">3.1.9 writeUInt</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeUInt</span><span class="params">(<span class="keyword">int</span> v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">byte</span> tmp;</span><br /><span class="line">    <span class="comment">// 循环写入</span></span><br /><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br /><span class="line">        <span class="comment">// 获得最后 7 Bits</span></span><br /><span class="line">        tmp = (<span class="keyword">byte</span>) (v &amp; <span class="number">0x7f</span>);</span><br /><span class="line">        <span class="comment">// 无后续的 Byte ，修改 tmp 首 Bit 为 1 ，写入 mBuffer 中，并结束。</span></span><br /><span class="line">        <span class="keyword">if</span> ((v &gt;&gt;&gt;= <span class="number">7</span>) == <span class="number">0</span>) {</span><br /><span class="line">            write0((<span class="keyword">byte</span>) (tmp | <span class="number">0x80</span>));</span><br /><span class="line">            <span class="keyword">return</span>;</span><br /><span class="line">        <span class="comment">// 有后续的 Byte ，写入 mBuffer 中</span></span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            write0(tmp);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>UInt ，Unsingned Int ，无符号整数(&nbsp;<strong>正数</strong>&nbsp;)。被用于表示字符串、数组的长度。序列化时，和上文我们看到的 Varint 一样，也是<strong>变长数字</strong>，但是方式<strong>不同</strong>。因为是<strong>正整数</strong>，所以可以使用&nbsp;<strong>Byte 最高位的 1</strong>&nbsp;，原来用来表示负数，现在来表示是否有<strong>后续的 BYTE</strong>&nbsp;，也是正整数的一部分。</li>
<li>🙂 代码已经添加注释，胖友自己看看哈。</li>
<li>推荐阅读&nbsp;<a href="https://www.cnblogs.com/smark/archive/2012/05/03/2480034.html" target="_blank" rel="external nofollow noopener noreferrer">《数值压缩存储方法Varint》</a>&nbsp;，里面 Varint 和 UInt 一样采用最高位来表示是否有后续数字，但是更加强大通用，使用&nbsp;<strong>Zag 算法</strong>解决负数问题，在 Protobuf 中采用该方式。😈 文章中的 Varint 和本文我们看到的 Varint&nbsp;<strong>不同</strong>。如果胖友对 Protobuf 的实现感兴趣，推荐阅读&nbsp;<a href="https://blog.csdn.net/carson_ho/article/details/70568606" target="_blank" rel="external nofollow noopener noreferrer">《 Protocol Buffer 序列化原理大揭秘 - 为什么Protocol Buffer性能这么好？》</a>。</li>
</ul>
<h3 id="3-1-10-writeBytes">3.1.10 writeBytes</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeBytes</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"> <span class="number">3</span>:     <span class="comment">// NULL ，使用 OBJECT_NULL 写入 mBuffer</span></span><br /><span class="line"> <span class="number">4</span>:     <span class="keyword">if</span> (b == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">5</span>:         write0(OBJECT_NULL);</span><br /><span class="line"> <span class="number">6</span>:     <span class="comment">// 其他，写入 mBuffer</span></span><br /><span class="line"> <span class="number">7</span>:     } <span class="keyword">else</span> {</span><br /><span class="line"> <span class="number">8</span>:         writeBytes(b, <span class="number">0</span>, b.length);</span><br /><span class="line"> <span class="number">9</span>:     }</span><br /><span class="line"><span class="number">10</span>: }</span><br /><span class="line"><span class="number">11</span>: </span><br /><span class="line"><span class="number">12</span>: <span class="meta">@Override</span></span><br /><span class="line"><span class="number">13</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeBytes</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"><span class="number">14</span>:     <span class="comment">// 空数组，使用 OBJECT_DUMMY 写入 mBuffer</span></span><br /><span class="line"><span class="number">15</span>:     <span class="keyword">if</span> (len == <span class="number">0</span>) {</span><br /><span class="line"><span class="number">16</span>:         write0(OBJECT_DUMMY);</span><br /><span class="line"><span class="number">17</span>:     <span class="comment">// 数组非空，写入 OBJECT_BYTES + Length + 具体数据到 mBuffer</span></span><br /><span class="line"><span class="number">18</span>:     } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">19</span>:         write0(OBJECT_BYTES);</span><br /><span class="line"><span class="number">20</span>:         writeUInt(len); <span class="comment">// UInt</span></span><br /><span class="line"><span class="number">21</span>:         write0(b, off, len);</span><br /><span class="line"><span class="number">22</span>:     }</span><br /><span class="line"><span class="number">23</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_02_18/03.png" alt="writeBytes" /></p>
<h3 id="3-1-11-writeUTF">3.1.11 writeUTF</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeUTF</span><span class="params">(String v)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"> <span class="number">3</span>:     <span class="comment">// NULL ，使用 OBJECT_NULL 写入 mBuffer</span></span><br /><span class="line"> <span class="number">4</span>:     <span class="keyword">if</span> (v == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">5</span>:         write0(OBJECT_NULL);</span><br /><span class="line"> <span class="number">6</span>:     } <span class="keyword">else</span> {</span><br /><span class="line"> <span class="number">7</span>:         <span class="comment">// 空字符串，使用 OBJECT_DUMMY 写入 mBuffer</span></span><br /><span class="line"> <span class="number">8</span>:         <span class="keyword">int</span> len = v.length();</span><br /><span class="line"> <span class="number">9</span>:         <span class="keyword">if</span> (len == <span class="number">0</span>) {</span><br /><span class="line"><span class="number">10</span>:             write0(OBJECT_DUMMY);</span><br /><span class="line"><span class="number">11</span>:         <span class="comment">// 字符串非空，写入 OBJECT_BYTES + Length + 具体数据到 mBuffer</span></span><br /><span class="line"><span class="number">12</span>:         } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">13</span>:             <span class="comment">// 写入 OBJECT_BYTES 到 mBuffer 中</span></span><br /><span class="line"><span class="number">14</span>:             write0(OBJECT_BYTES);</span><br /><span class="line"><span class="number">15</span>:             <span class="comment">// 写入 Length 到 mBuffer 中</span></span><br /><span class="line"><span class="number">16</span>:             writeUInt(len);</span><br /><span class="line"><span class="number">17</span>: </span><br /><span class="line"><span class="number">18</span>:             <span class="keyword">int</span> off = <span class="number">0</span>,</span><br /><span class="line"><span class="number">19</span>:                 limit = mLimit - <span class="number">3</span>, <span class="comment">// -3 的原因，因为若 Char 在 [2048, 65536) 范围内，需要占用三个字节，事先无法得知。</span></span><br /><span class="line"><span class="number">20</span>:                 size;</span><br /><span class="line"><span class="number">21</span>:             <span class="keyword">char</span>[] buf = mCharBuf;</span><br /><span class="line"><span class="number">22</span>:             <span class="keyword">do</span> {</span><br /><span class="line"><span class="number">23</span>:                 <span class="comment">// 读取数量，不超过 CHAR_BUF_SIZE 上限，同时不超过可读上限</span></span><br /><span class="line"><span class="number">24</span>:                 size = Math.min(len - off, CHAR_BUF_SIZE);</span><br /><span class="line"><span class="number">25</span>:                 <span class="comment">// 读取字符串到 buf 中</span></span><br /><span class="line"><span class="number">26</span>:                 v.getChars(off, off + size, buf, <span class="number">0</span>);</span><br /><span class="line"><span class="number">27</span>: </span><br /><span class="line"><span class="number">28</span>:                 <span class="comment">// 写入数据到 mBuffer 中</span></span><br /><span class="line"><span class="number">29</span>:                 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br /><span class="line"><span class="number">30</span>:                     <span class="keyword">char</span> c = buf[i];</span><br /><span class="line"><span class="number">31</span>:                     <span class="comment">// Java Character 数据范围为 [0, 65535]</span></span><br /><span class="line"><span class="number">32</span>:                     <span class="keyword">if</span> (mPosition &gt; limit) {</span><br /><span class="line"><span class="number">33</span>:                         <span class="keyword">if</span> (c &lt; <span class="number">0x80</span>) { <span class="comment">// [0, 128) ASCII 码</span></span><br /><span class="line"><span class="number">34</span>:                             <span class="comment">// 0X80 =&gt; 10 00 00 00 取七位 [0, 64)</span></span><br /><span class="line"><span class="number">35</span>: </span><br /><span class="line"><span class="number">36</span>:                             write0((<span class="keyword">byte</span>) c);</span><br /><span class="line"><span class="number">37</span>:                         } <span class="keyword">else</span> <span class="keyword">if</span> (c &lt; <span class="number">0x800</span>) { <span class="comment">// [128, 2048)</span></span><br /><span class="line"><span class="number">38</span>:                             <span class="comment">// 0xC0 =&gt; 11 00 00 00 取六位 [0, 32)</span></span><br /><span class="line"><span class="number">39</span>:                             <span class="comment">// 0x80 =&gt; 10 00 00 00 取七位 [0, 64)</span></span><br /><span class="line"><span class="number">40</span>: </span><br /><span class="line"><span class="number">41</span>:                             <span class="comment">// 0x1F =&gt; 00 01 11 11</span></span><br /><span class="line"><span class="number">42</span>:                             <span class="comment">// 0x3F =&gt; 00 11 11 11</span></span><br /><span class="line"><span class="number">43</span>: </span><br /><span class="line"><span class="number">44</span>:                             write0((<span class="keyword">byte</span>) (<span class="number">0xC0</span> | ((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x1F</span>)));</span><br /><span class="line"><span class="number">45</span>:                             write0((<span class="keyword">byte</span>) (<span class="number">0x80</span> | (c &amp; <span class="number">0x3F</span>)));</span><br /><span class="line"><span class="number">46</span>:                         } <span class="keyword">else</span> { <span class="comment">// [2048, 65536)</span></span><br /><span class="line"><span class="number">47</span>:                             <span class="comment">// 0xE0 =&gt; 11 10 00 00 取五位 [0, 15]</span></span><br /><span class="line"><span class="number">48</span>:                             <span class="comment">// 0x80 =&gt; 10 00 00 00 取七位 [0, 63]</span></span><br /><span class="line"><span class="number">49</span>:                             <span class="comment">// 0x80 =&gt; 10 00 00 00 取七位 [0, 63]</span></span><br /><span class="line"><span class="number">50</span>: </span><br /><span class="line"><span class="number">51</span>:                             <span class="comment">// 0x0F =&gt; 00 00 11 11</span></span><br /><span class="line"><span class="number">52</span>:                             <span class="comment">// 0x3F =&gt; 00 11 11 11</span></span><br /><span class="line"><span class="number">53</span>:                             <span class="comment">// 0x3F =&gt; 00 11 11 11</span></span><br /><span class="line"><span class="number">54</span>: </span><br /><span class="line"><span class="number">55</span>:                             write0((<span class="keyword">byte</span>) (<span class="number">0xE0</span> | ((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>)));</span><br /><span class="line"><span class="number">56</span>:                             write0((<span class="keyword">byte</span>) (<span class="number">0x80</span> | ((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>)));</span><br /><span class="line"><span class="number">57</span>:                             write0((<span class="keyword">byte</span>) (<span class="number">0x80</span> | (c &amp; <span class="number">0x3F</span>)));</span><br /><span class="line"><span class="number">58</span>:                         }</span><br /><span class="line"><span class="number">59</span>:                     } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">60</span>:                         <span class="keyword">if</span> (c &lt; <span class="number">0x80</span>) {</span><br /><span class="line"><span class="number">61</span>:                             mBuffer[mPosition++] = (<span class="keyword">byte</span>) c;</span><br /><span class="line"><span class="number">62</span>:                         } <span class="keyword">else</span> <span class="keyword">if</span> (c &lt; <span class="number">0x800</span>) {</span><br /><span class="line"><span class="number">63</span>:                             mBuffer[mPosition++] = (<span class="keyword">byte</span>) (<span class="number">0xC0</span> | ((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x1F</span>));</span><br /><span class="line"><span class="number">64</span>:                             mBuffer[mPosition++] = (<span class="keyword">byte</span>) (<span class="number">0x80</span> | (c &amp; <span class="number">0x3F</span>));</span><br /><span class="line"><span class="number">65</span>:                         } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">66</span>:                             mBuffer[mPosition++] = (<span class="keyword">byte</span>) (<span class="number">0xE0</span> | ((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>));</span><br /><span class="line"><span class="number">67</span>:                             mBuffer[mPosition++] = (<span class="keyword">byte</span>) (<span class="number">0x80</span> | ((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>));</span><br /><span class="line"><span class="number">68</span>:                             mBuffer[mPosition++] = (<span class="keyword">byte</span>) (<span class="number">0x80</span> | (c &amp; <span class="number">0x3F</span>));</span><br /><span class="line"><span class="number">69</span>:                         }</span><br /><span class="line"><span class="number">70</span>:                     }</span><br /><span class="line"><span class="number">71</span>:                 }</span><br /><span class="line"><span class="number">72</span>: </span><br /><span class="line"><span class="number">73</span>:                 <span class="comment">// 计算 buf 新的开始读取位置。</span></span><br /><span class="line"><span class="number">74</span>:                 off += size;</span><br /><span class="line"><span class="number">75</span>:             } <span class="keyword">while</span> (off &lt; len);</span><br /><span class="line"><span class="number">76</span>:         }</span><br /><span class="line"><span class="number">77</span>:     }</span><br /><span class="line"><span class="number">78</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>字符串和字节数组，<strong>二进制数据流</strong>的结构是一致的，差异点在字符串的<strong>每个字符</strong>，写入到&nbsp;<code>mBuffer</code>&nbsp;中，即【第 18 至 75 行】。</li>
<li>第 19 行：<code>-3</code>&nbsp;的原因，因为每个<strong>字符</strong>最多需要占用<strong>三个</strong>字节，事先无法得知。而【第 32 至 58 行】和【第 59 至 69 行】，逻辑上是<strong>一致</strong>的，相比来说【第 32 至 58 行】的&nbsp;<code>#write0(byte b)</code>&nbsp;方法，多<strong>一个判断</strong>，考虑到性能，就分成了<strong>两段</strong>的逻辑，也就因此，多了这里的&nbsp;<code>-3</code>&nbsp;。</li>
<li>第 22 至 25 行：<strong>循环</strong>读取字符到&nbsp;<code>buf</code>&nbsp;中。因为每次读取有&nbsp;<code>CHAR_BUF_SIZE</code>&nbsp;最大限制，所以超过时，需要<strong>多次</strong>读取。读取完一批，处理完一批，不断<strong>重用</strong>&nbsp;<code>buf</code>&nbsp;数组。</li>
<li>第 28 至 71 行：写入&nbsp;<code>buf</code>&nbsp;到&nbsp;<code>mBuffer</code>&nbsp;中。因为 Java&nbsp;<strong>Character</strong>&nbsp;的数据范围为&nbsp;<code>[0, 65535]</code>&nbsp;，超过&nbsp;<strong>BYTE</strong>&nbsp;上限。所以写入每个字符时，分成<strong>三种</strong>情况：
<ul>
<li>第 33 至 36 行：<code>[0, 128)</code>&nbsp;，占用一个字符。取七位，2 的 七次方为 128 ，从而满足数据范围。</li>
<li>第 37 至 45 行：<code>[128, 2048)</code>&nbsp;，占用两个字符。取六位、七位，2 的十三次方为 2048 ，从而满足数据范围。</li>
<li>第 46 至 58 行：<code>[2048, 65536)</code>&nbsp;，占用三个字符。取五位、七位、七位，2 的十九次方为 65536 ，从而满足数据范围。</li>
<li><strong>为什么首位取的不同的位数呢</strong>？在反序列化时，可以根据首位数的<strong>高位</strong>来判断，到底完整的字符，占用了几个字节。🙂 或者，我们可以理解成，<strong>这是一种针对当前场景实现的变长整数</strong>。</li>
</ul>
</li>
<li>第 74 行：计算&nbsp;<code>buf</code>&nbsp;新的开始<strong>读取</strong>位置。</li>
</ul>
<h2 id="3-2-GenericDataInput">3.2 GenericDataInput</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/GenericDataInput.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.common.serialize.support.dubbo.GenericDataInput</code></a>&nbsp;，实现 DataInput，GenericDataFlags 接口，Dubbo 数据输入实现类。</p>
<h3 id="3-2-1-构造方法">3.2.1 构造方法</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 空字符串</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMPTY_STRING = <span class="string">""</span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 空字节数组</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] EMPTY_BYTES = {};</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 输入流</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> InputStream mInput;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 读取 Buffer 数组</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] mBuffer;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * {<span class="doctag">@link</span> #mBuffer} 当前读取位置</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mRead = <span class="number">0</span>;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * {<span class="doctag">@link</span> #mBuffer} 最大可读取位置</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mPosition = <span class="number">0</span>;</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenericDataInput</span><span class="params">(InputStream is)</span> </span>{</span><br /><span class="line">    <span class="keyword">this</span>(is, <span class="number">1024</span>);</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenericDataInput</span><span class="params">(InputStream is, <span class="keyword">int</span> buffSize)</span> </span>{</span><br /><span class="line">    mInput = is;</span><br /><span class="line">    mBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[buffSize];</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>mBuffer</code>&nbsp;属性，读取 Buffer 数组。
<ul>
<li><code>mRead</code>&nbsp;属性，当前读取位置。</li>
<li><code>mPosition</code>&nbsp;属性，最大可读取位置。</li>
<li><code>mInput</code>&nbsp;属性，输入流。</li>
</ul>
</li>
</ul>
<h3 id="3-2-2-readBool">3.2.2 readBool</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">readBool</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="comment">// 读取字节</span></span><br /><span class="line">    <span class="keyword">byte</span> b = read0();</span><br /><span class="line">    <span class="comment">// 判断 true / false</span></span><br /><span class="line">    <span class="keyword">switch</span> (b) {</span><br /><span class="line">        <span class="keyword">case</span> VARINT_0: <span class="comment">// false</span></span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br /><span class="line">        <span class="keyword">case</span> VARINT_1: <span class="comment">// true</span></span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br /><span class="line">        <span class="keyword">default</span>: <span class="comment">// 非法</span></span><br /><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Tag error, expect BYTE_TRUE|BYTE_FALSE, but get "</span> + b);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p>调用&nbsp;<code>#read0()</code>&nbsp;方法，读取字节。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">byte</span> <span class="title">read0</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="comment">// 读取到达上限，从 mInput 读取到 mBuffer 中。</span></span><br /><span class="line">    <span class="keyword">if</span> (mPosition == mRead) {</span><br /><span class="line">        fillBuffer();</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 从 mBuffer 中，读取字节。</span></span><br /><span class="line">    <span class="keyword">return</span> mBuffer[mPosition++];</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>#fillBuffer()</code>&nbsp;方法，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fillBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="comment">// 重置 mPosition</span></span><br /><span class="line">    mPosition = <span class="number">0</span>;</span><br /><span class="line">    <span class="comment">// 读取 mInput 到 mBuffer 中</span></span><br /><span class="line">    mRead = mInput.read(mBuffer);</span><br /><span class="line">    <span class="comment">// 未读取到，抛出 EOFException 异常</span></span><br /><span class="line">    <span class="keyword">if</span> (mRead == -<span class="number">1</span>) {</span><br /><span class="line">        mRead = <span class="number">0</span>;</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-3-readByte">3.2.3 readByte</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">readByte</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"> <span class="number">3</span>:     <span class="comment">// 读取字节</span></span><br /><span class="line"> <span class="number">4</span>:     <span class="keyword">byte</span> b = read0();</span><br /><span class="line"> <span class="number">5</span>:     <span class="keyword">switch</span> (b) {</span><br /><span class="line"> <span class="number">6</span>:         <span class="comment">// 不符合 Varint 枚举值，读取字节返回</span></span><br /><span class="line"> <span class="number">7</span>:         <span class="keyword">case</span> VARINT8:</span><br /><span class="line"> <span class="number">8</span>:             <span class="keyword">return</span> read0();</span><br /><span class="line"> <span class="number">9</span>:         <span class="comment">// 符合 Varint 枚举值，返回对应的值</span></span><br /><span class="line"><span class="number">10</span>:         <span class="keyword">case</span> VARINT_0:</span><br /><span class="line"><span class="number">11</span>:             <span class="keyword">return</span> <span class="number">0</span>;</span><br /><span class="line"><span class="number">12</span>:         <span class="comment">// ... 省略中间，[1, 30] 重复的 case 处理</span></span><br /><span class="line"><span class="number">13</span>:         <span class="keyword">case</span> VARINT_1F:</span><br /><span class="line"><span class="number">14</span>:             <span class="keyword">return</span> <span class="number">31</span>;</span><br /><span class="line"><span class="number">15</span>:         <span class="keyword">default</span>: <span class="comment">// 非法，抛出 IOException 异常</span></span><br /><span class="line"><span class="number">16</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Tag error, expect VARINT, but get "</span> + b);</span><br /><span class="line"><span class="number">17</span>:     }</span><br /><span class="line"><span class="number">18</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 4 行：调用&nbsp;<code>#read0()</code>&nbsp;方法，读取字节。</li>
<li>第 6 至 8 行：不符合 Varint&nbsp;<strong>CONSTANTS</strong>&nbsp;，调用&nbsp;<code>#read0()</code>&nbsp;方法，读取字节返回。</li>
<li>第 9 至 14 行：符合 Varint CONSTANTS，返回对应的值。</li>
</ul>
<h3 id="3-2-4-readShort">3.2.4 readShort</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">short</span> <span class="title">readShort</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">return</span> (<span class="keyword">short</span>) readVarint32();</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>调用&nbsp;<code>#readVarint32()</code>&nbsp;方法，读取。代码如下：</li>
</ul>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">readVarint32</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"> <span class="number">2</span>:     <span class="comment">// 读取首位 Byte 字节</span></span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">byte</span> b = read0();</span><br /><span class="line"> <span class="number">4</span>:     <span class="comment">// </span></span><br /><span class="line"> <span class="number">5</span>:     <span class="keyword">switch</span> (b) {</span><br /><span class="line"> <span class="number">6</span>:         <span class="comment">// 不符合 Varint 枚举值，读取 Tag + 具体值</span></span><br /><span class="line"> <span class="number">7</span>:         <span class="keyword">case</span> VARINT8:</span><br /><span class="line"> <span class="number">8</span>:             <span class="keyword">return</span> read0();</span><br /><span class="line"> <span class="number">9</span>:         <span class="keyword">case</span> VARINT16: {</span><br /><span class="line"><span class="number">10</span>:             <span class="keyword">byte</span> b1 = read0(), b2 = read0();</span><br /><span class="line"><span class="number">11</span>:             <span class="keyword">return</span> (<span class="keyword">short</span>) ((b1 &amp; <span class="number">0xff</span>) |</span><br /><span class="line"><span class="number">12</span>:                     ((b2 &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span>));</span><br /><span class="line"><span class="number">13</span>:         }</span><br /><span class="line"><span class="number">14</span>:         <span class="keyword">case</span> VARINT24: {</span><br /><span class="line"><span class="number">15</span>:             <span class="keyword">byte</span> b1 = read0(), b2 = read0(), b3 = read0();</span><br /><span class="line"><span class="number">16</span>:             <span class="keyword">int</span> ret = (b1 &amp; <span class="number">0xff</span>) |</span><br /><span class="line"><span class="number">17</span>:                     ((b2 &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span>) |</span><br /><span class="line"><span class="number">18</span>:                     ((b3 &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span>);</span><br /><span class="line"><span class="number">19</span>:             <span class="keyword">if</span> (b3 &lt; <span class="number">0</span>) { <span class="comment">// 补齐负数的高位</span></span><br /><span class="line"><span class="number">20</span>:                 <span class="keyword">return</span> ret | <span class="number">0xff000000</span>;</span><br /><span class="line"><span class="number">21</span>:             }</span><br /><span class="line"><span class="number">22</span>:             <span class="keyword">return</span> ret;</span><br /><span class="line"><span class="number">23</span>:         }</span><br /><span class="line"><span class="number">24</span>:         <span class="keyword">case</span> VARINT32: {</span><br /><span class="line"><span class="number">25</span>:             <span class="keyword">byte</span> b1 = read0(), b2 = read0(), b3 = read0(), b4 = read0();</span><br /><span class="line"><span class="number">26</span>:             <span class="keyword">return</span> ((b1 &amp; <span class="number">0xff</span>) |</span><br /><span class="line"><span class="number">27</span>:                     ((b2 &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span>) |</span><br /><span class="line"><span class="number">28</span>:                     ((b3 &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span>) |</span><br /><span class="line"><span class="number">29</span>:                     ((b4 &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>));</span><br /><span class="line"><span class="number">30</span>:         }</span><br /><span class="line"><span class="number">31</span>:         <span class="comment">// 符合 Varint 枚举值，返回对应的值</span></span><br /><span class="line"><span class="number">32</span>:         <span class="keyword">case</span> VARINT_NF:</span><br /><span class="line"><span class="number">33</span>:             <span class="keyword">return</span> -<span class="number">15</span>;</span><br /><span class="line"><span class="number">34</span>:         <span class="comment">// ... 省略中间，[-14, 30] 重复的 case 处理</span></span><br /><span class="line"><span class="number">35</span>:         <span class="keyword">case</span> VARINT_1F:</span><br /><span class="line"><span class="number">36</span>:             <span class="keyword">return</span> <span class="number">31</span>;</span><br /><span class="line"><span class="number">37</span>:         <span class="keyword">default</span>:</span><br /><span class="line"><span class="number">38</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Tag error, expect VARINT, but get "</span> + b);</span><br /><span class="line"><span class="number">39</span>:     }</span><br /><span class="line"><span class="number">40</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 3 行：调用&nbsp;<code>#read0()</code>&nbsp;方法，读取<strong>首位</strong>&nbsp;Byte 字节。</li>
<li>第 6 至 30 行：不符合 Varint&nbsp;<strong>CONSTANTS</strong>，读取&nbsp;<strong>TAG</strong>&nbsp;+ 具体值。
<ul>
<li><code>&amp; 0xff</code>&nbsp;操作，补回<strong>被截取最高的 1</strong>，从而恢复<strong>原数</strong>，对应&nbsp;<code>#writeVarint32(int v)</code>&nbsp;方法的【第 18 位】。</li>
<li><code>| 0xff000000</code>&nbsp;操作，补齐负数的<strong>高位</strong>，对应&nbsp;<code>#writeVarint32(int v)</code>&nbsp;方法的【第 30 至 36 位】。</li>
</ul>
</li>
<li>第 31 至 36 行：符合 Varint&nbsp;<strong>CONSTANTS</strong>，返回对应的值。</li>
</ul>
<h3 id="3-2-5-readInt">3.2.5 readInt</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">return</span> readVarint32();</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="3-2-6-readLong">3.2.6 readLong</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">readLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">return</span> readVarint64();</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><a href="https://github.com/YunaiV/dubbo/blob/335c72aeb45923681148d1a706f24ee2e6ba1020/dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/GenericDataInput.java#L386-L555" target="_blank" rel="external nofollow noopener noreferrer"><code>#readVarint64()</code></a>&nbsp;和&nbsp;<code>#readVarint32()</code>&nbsp;基本一致，胖友自己查看。</li>
</ul>
<h3 id="3-2-7-readFloat">3.2.7 readFloat</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">readFloat</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">return</span> Float.intBitsToFloat(readVarint32());</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="3-2-8-readDouble">3.2.8 readDouble</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">readDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">return</span> Double.longBitsToDouble(readVarint64());</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="3-2-9-readUInt">3.2.9 readUInt</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">readUInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="comment">// 读取字节</span></span><br /><span class="line">    <span class="keyword">byte</span> tmp = read0(); <span class="comment">// 用于暂存当前读取结果</span></span><br /><span class="line">    <span class="comment">// 【第一次】</span></span><br /><span class="line">    <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) { <span class="comment">// 负数，意味着无后续</span></span><br /><span class="line">        <span class="keyword">return</span> tmp &amp; <span class="number">0x7f</span>;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">int</span> ret = tmp &amp; <span class="number">0x7f</span>; <span class="comment">// 最终结果</span></span><br /><span class="line">    <span class="comment">// 【第二次】</span></span><br /><span class="line">    <span class="keyword">if</span> ((tmp = read0()) &lt; <span class="number">0</span>) { <span class="comment">// 负数，意味着无后续</span></span><br /><span class="line">        ret |= (tmp &amp; <span class="number">0x7f</span>) &lt;&lt; <span class="number">7</span>; <span class="comment">// 拼接 tmp + ret</span></span><br /><span class="line">    } <span class="keyword">else</span> {</span><br /><span class="line">        ret |= tmp &lt;&lt; <span class="number">7</span>;</span><br /><span class="line">        <span class="comment">// 【第三次】</span></span><br /><span class="line">        <span class="keyword">if</span> ((tmp = read0()) &lt; <span class="number">0</span>) { <span class="comment">// 负数，意味着无后续</span></span><br /><span class="line">            ret |= (tmp &amp; <span class="number">0x7f</span>) &lt;&lt; <span class="number">14</span>;</span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            ret |= tmp &lt;&lt; <span class="number">14</span>;</span><br /><span class="line">            <span class="comment">// 【第四次】</span></span><br /><span class="line">            <span class="keyword">if</span> ((tmp = read0()) &lt; <span class="number">0</span>) { <span class="comment">// 负数，意味着无后续</span></span><br /><span class="line">                ret |= (tmp &amp; <span class="number">0x7f</span>) &lt;&lt; <span class="number">21</span>;</span><br /><span class="line">            <span class="comment">// 【第五次】5 * 7 &gt; 32 ，所以可以结束</span></span><br /><span class="line">            } <span class="keyword">else</span> {</span><br /><span class="line">                ret |= tmp &lt;&lt; <span class="number">21</span>;</span><br /><span class="line">                ret |= (read0() &amp; <span class="number">0x7f</span>) &lt;&lt; <span class="number">28</span>;</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> ret;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="3-2-10-readBytes">3.2.10 readBytes</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] readBytes() <span class="keyword">throws</span> IOException {</span><br /><span class="line">    <span class="comment">// 读取字节</span></span><br /><span class="line">    <span class="keyword">byte</span> b = read0();</span><br /><span class="line">    <span class="keyword">switch</span> (b) {</span><br /><span class="line">        <span class="keyword">case</span> OBJECT_BYTES: <span class="comment">// 数组非空</span></span><br /><span class="line">            <span class="keyword">return</span> read0(readUInt());</span><br /><span class="line">        <span class="keyword">case</span> OBJECT_NULL: <span class="comment">// NULL</span></span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line">        <span class="keyword">case</span> OBJECT_DUMMY: <span class="comment">// 数组为空</span></span><br /><span class="line">            <span class="keyword">return</span> EMPTY_BYTES;</span><br /><span class="line">        <span class="keyword">default</span>:</span><br /><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Tag error, expect BYTES|BYTES_NULL|BYTES_EMPTY, but get "</span> + b);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>#read0(int len)</code>&nbsp;方法，批量读取字节。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] read0(<span class="keyword">int</span> len) <span class="keyword">throws</span> IOException {</span><br /><span class="line">    <span class="keyword">int</span> rem = mRead - mPosition;</span><br /><span class="line">    <span class="keyword">byte</span>[] ret = <span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br /><span class="line">    <span class="comment">// 未超过 mBuffer 剩余可读取，批量写入 mBuffer 中。mBuffer =&gt; ret</span></span><br /><span class="line">    <span class="keyword">if</span> (len &lt;= rem) {</span><br /><span class="line">        System.arraycopy(mBuffer, mPosition, ret, <span class="number">0</span>, len);</span><br /><span class="line">        mPosition += len;</span><br /><span class="line">    } <span class="keyword">else</span> {</span><br /><span class="line">        <span class="comment">// 部分批量写入 ref 中。mBuffer =&gt; ret</span></span><br /><span class="line">        System.arraycopy(mBuffer, mPosition, ret, <span class="number">0</span>, rem);</span><br /><span class="line">        mPosition = mRead;</span><br /><br /><span class="line">        len -= rem;</span><br /><span class="line">        <span class="keyword">int</span> read, pos = rem; <span class="comment">// 新的 ret 读取起点</span></span><br /><br /><span class="line">        <span class="comment">// mInput =&gt; ret</span></span><br /><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) {</span><br /><span class="line">            read = mInput.read(ret, pos, len);</span><br /><span class="line">            <span class="keyword">if</span> (read == -<span class="number">1</span>) {</span><br /><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</span><br /><span class="line">            }</span><br /><span class="line">            pos += read; <span class="comment">// 新的 ret 读取起点</span></span><br /><span class="line">            len -= read;</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> ret;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<h3 id="3-2-11-readUTF">3.2.11 readUTF</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> String <span class="title">readUTF</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"> <span class="number">3</span>:     <span class="comment">// 读取字节</span></span><br /><span class="line"> <span class="number">4</span>:     <span class="keyword">byte</span> b = read0();</span><br /><span class="line"> <span class="number">5</span>:     <span class="keyword">switch</span> (b) {</span><br /><span class="line"> <span class="number">6</span>:         <span class="comment">// 字符串非空</span></span><br /><span class="line"> <span class="number">7</span>:         <span class="keyword">case</span> OBJECT_BYTES:</span><br /><span class="line"> <span class="number">8</span>:             <span class="comment">// 读取长度</span></span><br /><span class="line"> <span class="number">9</span>:             <span class="keyword">int</span> len = readUInt();</span><br /><span class="line"><span class="number">10</span>:             <span class="comment">// 反序列化出字符串</span></span><br /><span class="line"><span class="number">11</span>:             StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br /><span class="line"><span class="number">12</span>:             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br /><span class="line"><span class="number">13</span>:                 <span class="comment">// 读取首位</span></span><br /><span class="line"><span class="number">14</span>:                 <span class="keyword">byte</span> b1 = read0();</span><br /><span class="line"><span class="number">15</span>:                 <span class="keyword">if</span> ((b1 &amp; <span class="number">0x80</span>) == <span class="number">0</span>) { <span class="comment">// [0, 128) ASCII 码</span></span><br /><span class="line"><span class="number">16</span>:                     sb.append((<span class="keyword">char</span>) b1);</span><br /><span class="line"><span class="number">17</span>:                 } <span class="keyword">else</span> <span class="keyword">if</span> ((b1 &amp; <span class="number">0xE0</span>) == <span class="number">0xC0</span>) { <span class="comment">// [128, 2048)</span></span><br /><span class="line"><span class="number">18</span>:                     <span class="keyword">byte</span> b2 = read0();</span><br /><span class="line"><span class="number">19</span>:                     sb.append((<span class="keyword">char</span>) (((b1 &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>) | (b2 &amp; <span class="number">0x3F</span>)));</span><br /><span class="line"><span class="number">20</span>:                 } <span class="keyword">else</span> <span class="keyword">if</span> ((b1 &amp; <span class="number">0xF0</span>) == <span class="number">0xE0</span>) { <span class="comment">// [2048, 65536)</span></span><br /><span class="line"><span class="number">21</span>:                     <span class="keyword">byte</span> b2 = read0(), b3 = read0();</span><br /><span class="line"><span class="number">22</span>:                     sb.append((<span class="keyword">char</span>) (((b1 &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) | ((b2 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) | (b3 &amp; <span class="number">0x3F</span>)));</span><br /><span class="line"><span class="number">23</span>:                 } <span class="keyword">else</span></span><br /><span class="line"><span class="number">24</span>:                     <span class="keyword">throw</span> <span class="keyword">new</span> UTFDataFormatException(<span class="string">"Bad utf-8 encoding at "</span> + b1);</span><br /><span class="line"><span class="number">25</span>:             }</span><br /><span class="line"><span class="number">26</span>:             <span class="keyword">return</span> sb.toString();</span><br /><span class="line"><span class="number">27</span>:         <span class="comment">// NULL</span></span><br /><span class="line"><span class="number">28</span>:         <span class="keyword">case</span> OBJECT_NULL:</span><br /><span class="line"><span class="number">29</span>:             <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line"><span class="number">30</span>:         <span class="comment">// 字符串为空</span></span><br /><span class="line"><span class="number">31</span>:         <span class="keyword">case</span> OBJECT_DUMMY:</span><br /><span class="line"><span class="number">32</span>:             <span class="keyword">return</span> EMPTY_STRING;</span><br /><span class="line"><span class="number">33</span>:         <span class="keyword">default</span>:</span><br /><span class="line"><span class="number">34</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Tag error, expect BYTES|BYTES_NULL|BYTES_EMPTY, but get "</span> + b);</span><br /><span class="line"><span class="number">35</span>:     }</span><br /><span class="line"><span class="number">36</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 13 至 25 行：反序列化<strong>每个字符</strong>，通过首位数的<strong>高位</strong>来判断，到底完整的字符，占用了几个字节:
<ul>
<li>第 15 至 16 行：数据范围是&nbsp;<code>[0, 128)</code>&nbsp;，最大数 127 的二进制为&nbsp;<code>01 11 11 11</code>&nbsp;，使用&nbsp;<code>&amp; 0x80</code>&nbsp;运算后，会等于 0 。</li>
<li>第 17 至 19 行：数据范围是&nbsp;<code>[128, 2048)</code>&nbsp;，因为首位数取六位，并且使用&nbsp;<code>0xC0 |</code>&nbsp;运算后，所以二进制为&nbsp;<code>11 XX XX XX</code>&nbsp;，使用&nbsp;<code>&amp; 0xE0</code>&nbsp;运算后，会等于&nbsp;<code>0XC0</code>&nbsp;。
<ul>
<li>【第 15 至 16 行】如果使用&nbsp;<code>&amp; 0x80</code>&nbsp;运算， 不会等于 0 ，不符合要求。
<ul>
<li>第 20 至 22 行：数据范围是&nbsp;<code>[2048, 65536)</code>&nbsp;，因为首位数取五位，并且使用&nbsp;<code>0xE0 |</code>&nbsp;运算后，所以二进制为&nbsp;<code>11 1X XX XX</code>&nbsp;，使用&nbsp;<code>&amp; 0xF0</code>&nbsp;运算后，会等于&nbsp;<code>0xE0</code>&nbsp;。</li>
</ul>
</li>
<li>【第 15 至 16 行】如果使用&nbsp;<code>&amp; 0x80</code>&nbsp;运算， 不会等于 0 ，不符合要求。</li>
<li>【第 17 至 19 行】如果使用&nbsp;<code>&amp; 0xE0</code>&nbsp;运算，不会等于&nbsp;<code>0xC0</code>&nbsp;，不符合要求。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="4-Object">4. Object</h1>
<h2 id="4-1-GenericObjectOutput">4.1 GenericObjectOutput</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/GenericObjectOutput.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.common.serialize.support.dubbo.GenericObjectOutput</code></a>&nbsp;，实现 ObjectOutput 接口，继承 GenericObjectOutput 类，Dubbo 对象输出实现类。</p>
<h3 id="4-1-1-构造方法">4.1.1 构造方法</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 对象是否允许不实现 {<span class="doctag">@link</span> java.io.Serializable} 接口</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isAllowNonSerializable;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 类描述匹配器</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> ClassDescriptorMapper mMapper;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 循环引用集合</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * KEY ：对象</span></span><br /><span class="line"><span class="comment"> * VALUE ：引用编号</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> Map&lt;Object, Integer&gt; mRefs = <span class="keyword">new</span> ConcurrentHashMap&lt;Object, Integer&gt;();</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>isAllowNonSerializable</code>&nbsp;属性，对象是否允许不实现 Serializable 接口。Dubbo 序列化无需强制实现 Serializable 接口。考虑到通用性，默认&nbsp;<code>false</code>&nbsp;<strong>不允许</strong>。</li>
<li><code>mMapper</code>&nbsp;属性，类描述匹配器。通过该匹配器，可以将类描述，转换成对应的描述编号，从而加速序列化的速度，减少体积，类似 Kryo 的<strong>注册</strong>。默认使用 Builder 的&nbsp;<strong>DEFAULT_CLASS_DESCRIPTOR_MAPPER</strong>&nbsp;实现类。</li>
<li><code>mRefs</code>&nbsp;属性，循环引用集合，和 FastJSON 的&nbsp;<a href="https://github.com/alibaba/fastjson/wiki/%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8" target="_blank" rel="external nofollow noopener noreferrer">《循环引用》</a>&nbsp;上，概念是一致的。在 AbstractObjectBuilder 中，我们会看到<strong>循环引用</strong>的实现。</li>
</ul>
<h3 id="4-1-2-writeObject">4.1.2 writeObject</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="meta">@SuppressWarnings</span>({<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>})</span><br /><span class="line"> <span class="number">3</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"> <span class="number">4</span>:     <span class="comment">// NULL ，使用 OBJECT_NULL 写入 mBuffer</span></span><br /><span class="line"> <span class="number">5</span>:     <span class="keyword">if</span> (obj == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">6</span>:         write0(OBJECT_NULL);</span><br /><span class="line"> <span class="number">7</span>:         <span class="keyword">return</span>;</span><br /><span class="line"> <span class="number">8</span>:     }</span><br /><span class="line"> <span class="number">9</span>:     <span class="comment">// 空对象，使用 OBJECT_DUMMY 写入 mBuffer</span></span><br /><span class="line"><span class="number">10</span>:     Class&lt;?&gt; c = obj.getClass();</span><br /><span class="line"><span class="number">11</span>:     <span class="keyword">if</span> (c == Object.class) {</span><br /><span class="line"><span class="number">12</span>:         write0(OBJECT_DUMMY);</span><br /><span class="line"><span class="number">13</span>:     } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">14</span>:         <span class="comment">// 获得类描述</span></span><br /><span class="line"><span class="number">15</span>:         String desc = ReflectUtils.getDesc(c);</span><br /><span class="line"><span class="number">16</span>:         <span class="comment">// 查询类描述编号</span></span><br /><span class="line"><span class="number">17</span>:         <span class="keyword">int</span> index = mMapper.getDescriptorIndex(desc);</span><br /><span class="line"><span class="number">18</span>:         <span class="comment">// 不存在，使用 OBJECT_DESC + 类描述 写入 mBuffer</span></span><br /><span class="line"><span class="number">19</span>:         <span class="keyword">if</span> (index &lt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">20</span>:             write0(OBJECT_DESC);</span><br /><span class="line"><span class="number">21</span>:             writeUTF(desc);</span><br /><span class="line"><span class="number">22</span>:         <span class="comment">// 存在，使用 OBJECT_DESC_ID + 类描述编号 写入 mBuffer</span></span><br /><span class="line"><span class="number">23</span>:         } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">24</span>:             write0(OBJECT_DESC_ID);</span><br /><span class="line"><span class="number">25</span>:             writeUInt(index);</span><br /><span class="line"><span class="number">26</span>:         }</span><br /><span class="line"><span class="number">27</span>:         <span class="comment">// 获得类对应的序列化 Builder</span></span><br /><span class="line"><span class="number">28</span>:         Builder b = Builder.register(c, isAllowNonSerializable);</span><br /><span class="line"><span class="number">29</span>:         <span class="comment">// 序列化到 mBuffer 中</span></span><br /><span class="line"><span class="number">30</span>:         b.writeTo(obj, <span class="keyword">this</span>);</span><br /><span class="line"><span class="number">31</span>:     }</span><br /><span class="line"><span class="number">32</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>【第一种】第 4 至 8 行：对象为 NULL ，写入&nbsp;<strong>OBJECT_NULL</strong>&nbsp;到&nbsp;<code>mBuffer</code>&nbsp;。</li>
<li>【第二种】第 9 至 12 行：对象为 Object 类型，写入&nbsp;<strong>OBJECT_DUMMY</strong>&nbsp;到&nbsp;<code>mBuffer</code>&nbsp;。</li>
<li>
<p>【第三种】第 13 至 30 行：对象非空，写入&nbsp;<strong>类描述 + 对象</strong>&nbsp;到&nbsp;<code>mBuffer</code>&nbsp;。</p>
<ul>
<li>
<p>第 15 行：调用&nbsp;<code>ReflectUtils#getDesc(c)</code>&nbsp;方法，获得类描述。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDesc</span><span class="params">(Class&lt;?&gt; c)</span> </span>{</span><br /><span class="line">    StringBuilder ret = <span class="keyword">new</span> StringBuilder();</span><br /><span class="line">    <span class="comment">// Array</span></span><br /><span class="line">    <span class="keyword">while</span> (c.isArray()) {</span><br /><span class="line">        ret.append(<span class="string">'['</span>);</span><br /><span class="line">        c = c.getComponentType();</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 基本类型</span></span><br /><span class="line">    <span class="keyword">if</span> (c.isPrimitive()) {</span><br /><span class="line">        String t = c.getName();</span><br /><span class="line">        <span class="keyword">if</span> (<span class="string">"void"</span>.equals(t)) ret.append(JVM_VOID);</span><br /><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"boolean"</span>.equals(t)) ret.append(JVM_BOOLEAN);</span><br /><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"byte"</span>.equals(t)) ret.append(JVM_BYTE);</span><br /><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"char"</span>.equals(t)) ret.append(JVM_CHAR);</span><br /><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"double"</span>.equals(t)) ret.append(JVM_DOUBLE);</span><br /><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"float"</span>.equals(t)) ret.append(JVM_FLOAT);</span><br /><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"int"</span>.equals(t)) ret.append(JVM_INT);</span><br /><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"long"</span>.equals(t)) ret.append(JVM_LONG);</span><br /><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"short"</span>.equals(t)) ret.append(JVM_SHORT);</span><br /><span class="line">    <span class="comment">// 类</span></span><br /><span class="line">    } <span class="keyword">else</span> {</span><br /><span class="line">        ret.append(<span class="string">'L'</span>);</span><br /><span class="line">        ret.append(c.getName().replace(<span class="string">'.'</span>, <span class="string">'/'</span>));</span><br /><span class="line">        ret.append(<span class="string">';'</span>);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> ret.toString();</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>x</li>
</ul>
</li>
<li>第 17 行：调用&nbsp;<code>ClassDescriptorMapper#getDescriptorIndex(desc)</code>&nbsp;方法，获得类描述<strong>编号</strong>。
<ul>
<li>【不存在】第18 至 21 行：写入&nbsp;<strong>OBJECT_DESC</strong>&nbsp;+&nbsp;<strong>类描述</strong>(字符串) 到&nbsp;<code>mBuffer</code>&nbsp;中。</li>
<li>【已存在】第 22 至 26 行：写入&nbsp;<strong>OBJECT_DESC_ID</strong>&nbsp;+&nbsp;<strong>类描述编号</strong>(编号) 到&nbsp;<code>mBuffer</code>&nbsp;中。</li>
<li>🙂 很明显，第二种的性能和体积都更好。当然，需要保证 Server 和 Client 的类描述编号是一致的。大多数情况下，我们只注册<strong>常用</strong>的数据类型到 ClassDescriptorMapper 中。</li>
</ul>
</li>
<li>第 28 行：调用&nbsp;<code>Builder#register(Class&lt;T&gt; c, boolean isAllowNonSerializable)</code>&nbsp;方法，获得类<strong>对应</strong>的 Builder 对象。</li>
<li>第 30 行：调用&nbsp;<code>Builder#writeToT obj, GenericObjectOutput out)</code>&nbsp;方法，<strong>序列化</strong>对象到 GenericObjectOutput 中的输出流。<strong>为什么可以这么做</strong>？看完&nbsp;<a href="http://svip.iocoder.cn/Dubbo/serialize-2-dubbo/">「6. Builder」</a>&nbsp;的分享，胖友就会找到答案。🙂 卖个小关子。</li>
</ul>
</li>
</ul>
<h3 id="4-1-3-addRef">4.1.3 addRef</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 添加循环引用</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj 对象</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRef</span><span class="params">(Object obj)</span> </span>{</span><br /><span class="line">    mRefs.put(obj, mRefs.size() <span class="comment">/** 引用编号 **/</span> );</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="4-1-4-getRef">4.1.4 getRef</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 获得循环引用编号</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj 对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@return</span> 引用编号</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRef</span><span class="params">(Object obj)</span> </span>{</span><br /><span class="line">    Integer ref = mRefs.get(obj);</span><br /><span class="line">    <span class="keyword">if</span> (ref == <span class="keyword">null</span>) {</span><br /><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> ref;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="4-2-GenericObjectInput">4.2 GenericObjectInput</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/GenericObjectInput.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.common.serialize.support.dubbo.GenericObjectInput</code></a>&nbsp;，实现 ObjectInput 接口，继承 GenericDataInput 类，Dubbo 对象<strong>输入</strong>实现类。</p>
<h3 id="4-2-1-构造方法">4.2.1 构造方法</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * {<span class="doctag">@link</span> #skipAny()} 空对象</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object SKIPPED_OBJECT = <span class="keyword">new</span> Object();</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 类描述匹配器</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> ClassDescriptorMapper mMapper;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 循环引用数组</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> List&lt;Object&gt; mRefs = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="4-2-2-readObject">4.2.2 readObject</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> Object <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line"> <span class="number">3</span>:     String desc;</span><br /><span class="line"> <span class="number">4</span>:     <span class="comment">// 读取字节</span></span><br /><span class="line"> <span class="number">5</span>:     <span class="keyword">byte</span> b = read0();</span><br /><span class="line"> <span class="number">6</span>:     <span class="keyword">switch</span> (b) {</span><br /><span class="line"> <span class="number">7</span>:         <span class="keyword">case</span> OBJECT_NULL: <span class="comment">// NULL</span></span><br /><span class="line"> <span class="number">8</span>:             <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line"> <span class="number">9</span>:         <span class="keyword">case</span> OBJECT_DUMMY: <span class="comment">// 空对象</span></span><br /><span class="line"><span class="number">10</span>:             <span class="keyword">return</span> <span class="keyword">new</span> Object();</span><br /><span class="line"><span class="number">11</span>:         <span class="keyword">case</span> OBJECT_DESC: { <span class="comment">// 类描述</span></span><br /><span class="line"><span class="number">12</span>:             desc = readUTF();</span><br /><span class="line"><span class="number">13</span>:             <span class="keyword">break</span>;</span><br /><span class="line"><span class="number">14</span>:         }</span><br /><span class="line"><span class="number">15</span>:         <span class="keyword">case</span> OBJECT_DESC_ID: { <span class="comment">// 类描述编号</span></span><br /><span class="line"><span class="number">16</span>:             <span class="comment">// 读取类描述编号</span></span><br /><span class="line"><span class="number">17</span>:             <span class="keyword">int</span> index = readUInt();</span><br /><span class="line"><span class="number">18</span>:             <span class="comment">// 获得类描述</span></span><br /><span class="line"><span class="number">19</span>:             desc = mMapper.getDescriptor(index);</span><br /><span class="line"><span class="number">20</span>:             <span class="keyword">if</span> (desc == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">21</span>:                 <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Can not find desc id: "</span> + index);</span><br /><span class="line"><span class="number">22</span>:             }</span><br /><span class="line"><span class="number">23</span>:             <span class="keyword">break</span>;</span><br /><span class="line"><span class="number">24</span>:         }</span><br /><span class="line"><span class="number">25</span>:         <span class="keyword">default</span>:</span><br /><span class="line"><span class="number">26</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Flag error, expect OBJECT_NULL|OBJECT_DUMMY|OBJECT_DESC|OBJECT_DESC_ID, get "</span> + b);</span><br /><span class="line"><span class="number">27</span>:     }</span><br /><span class="line"><span class="number">28</span>:     <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">29</span>:         <span class="comment">// 获得类</span></span><br /><span class="line"><span class="number">30</span>:         Class&lt;?&gt; c = ReflectUtils.desc2class(desc);</span><br /><span class="line"><span class="number">31</span>:         <span class="comment">// 获得类对应的序列化 Builder</span></span><br /><span class="line"><span class="number">32</span>:         <span class="comment">// 反序列化成对象返回</span></span><br /><span class="line"><span class="number">33</span>:         <span class="keyword">return</span> Builder.register(c).parseFrom(<span class="keyword">this</span>);</span><br /><span class="line"><span class="number">34</span>:     } <span class="keyword">catch</span> (ClassNotFoundException e) {</span><br /><span class="line"><span class="number">35</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Read object failed, class not found. "</span> + StringUtils.toString(e));</span><br /><span class="line"><span class="number">36</span>:     }</span><br /><span class="line"><span class="number">37</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 30 行：调用&nbsp;<code>ReflectUtils#desc2class(desc)</code>&nbsp;方法，获得类。</li>
<li>第 33 行：调用&nbsp;<code>Builder#register(Class&lt;T&gt; c, boolean isAllowNonSerializable)</code>&nbsp;方法，获得类<strong>对应</strong>的 Builder 对象。</li>
<li>第 33 行：调用&nbsp;<code>Builder#parseFrom(GenericObjectInput)</code>&nbsp;方法，反序列化成<strong>对象</strong>返回。</li>
</ul>
<h3 id="4-2-3-addRef">4.2.3 addRef</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 添加循环引用</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj 对象</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRef</span><span class="params">(Object obj)</span> </span>{</span><br /><span class="line">    mRefs.add(obj);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="4-2-4-getRef">4.2.4 getRef</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 获得循环引用</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 引用编号</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@return</span> 对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 当发生 IO 异常时</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getRef</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= mRefs.size()) {</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 获得对象</span></span><br /><span class="line">    Object ret = mRefs.get(index);</span><br /><span class="line">    <span class="comment">// 在 skyAny() 设置</span></span><br /><span class="line">    <span class="keyword">if</span> (ret == SKIPPED_OBJECT) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Ref skipped-object."</span>);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> ret;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="4-2-5-skipAny">4.2.5 skipAny</h3>
<p>【TODO 8035】1、已经限制的大小，这块代码没用了啊？！</p>
<p>胖友可先无视这个方法。</p>
<h1 id="5-ClassDescriptorMapper">5. ClassDescriptorMapper</h1>
<p><code>com.alibaba.dubbo.common.serialize.support.dubbo.ClassDescriptorMapper</code>&nbsp;，类描述匹配器接口。方法如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// 根据类描述编号，获得类描述</span></span><br /><span class="line"><span class="function">String <span class="title">getDescriptor</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br /><br /><span class="line"><span class="comment">// 根据类描述，获得类描述编号</span></span><br /><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDescriptorIndex</span><span class="params">(String desc)</span></span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="5-1-DEFAULT-CLASS-DESCRIPTOR-MAPPER">5.1 DEFAULT_CLASS_DESCRIPTOR_MAPPER</h2>
<blockquote>
<p>DEFAULT_CLASS_DESCRIPTOR_MAPPER 是 Builder 的内部属性。</p>
</blockquote>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 类描述数组</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; mDescList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 类描述映射</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; mDescMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Integer&gt;();</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * ClassDescriptorMapper 默认实现类</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ClassDescriptorMapper DEFAULT_CLASS_DESCRIPTOR_MAPPER = <span class="keyword">new</span> ClassDescriptorMapper() {</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescriptor</span><span class="params">(<span class="keyword">int</span> index)</span> </span>{</span><br /><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= mDescList.size()) {</span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">return</span> mDescList.get(index);</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDescriptorIndex</span><span class="params">(String desc)</span> </span>{</span><br /><span class="line">        Integer ret = mDescMap.get(desc);</span><br /><span class="line">        <span class="keyword">return</span> ret == <span class="keyword">null</span> ? -<span class="number">1</span> : ret;</span><br /><span class="line">    }</span><br /><br /><span class="line">};</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p>在 Builder 的&nbsp;<strong>static</strong>&nbsp;代码块，会初始化&nbsp;<code>mDescMap</code>&nbsp;属性，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">static</span> {</span><br /><span class="line">    addDesc(<span class="keyword">boolean</span>[].class);</span><br /><span class="line">    addDesc(<span class="keyword">byte</span>[].class);</span><br /><span class="line">    addDesc(<span class="keyword">char</span>[].class);</span><br /><span class="line">    addDesc(<span class="keyword">short</span>[].class);</span><br /><span class="line">    addDesc(<span class="keyword">int</span>[].class);</span><br /><span class="line">    addDesc(<span class="keyword">long</span>[].class);</span><br /><span class="line">    addDesc(<span class="keyword">float</span>[].class);</span><br /><span class="line">    addDesc(<span class="keyword">double</span>[].class);</span><br /><br /><span class="line">    addDesc(Boolean.class);</span><br /><span class="line">    addDesc(Byte.class);</span><br /><span class="line">    addDesc(Character.class);</span><br /><span class="line">    addDesc(Short.class);</span><br /><span class="line">    addDesc(Integer.class);</span><br /><span class="line">    addDesc(Long.class);</span><br /><span class="line">    addDesc(Float.class);</span><br /><span class="line">    addDesc(Double.class);</span><br /><br /><span class="line">    addDesc(String.class);</span><br /><span class="line">    addDesc(String[].class);</span><br /><br /><span class="line">    addDesc(ArrayList.class);</span><br /><span class="line">    addDesc(HashMap.class);</span><br /><span class="line">    addDesc(HashSet.class);</span><br /><span class="line">    addDesc(Date.class);</span><br /><span class="line">    addDesc(java.sql.Date.class);</span><br /><span class="line">    addDesc(java.sql.Time.class);</span><br /><span class="line">    addDesc(java.sql.Timestamp.class);</span><br /><span class="line">    addDesc(java.util.LinkedList.class);</span><br /><span class="line">    addDesc(java.util.LinkedHashMap.class);</span><br /><span class="line">    addDesc(java.util.LinkedHashSet.class);</span><br /><br /><span class="line">    <span class="comment">// ... 省略无关代码</span></span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addDesc</span><span class="params">(Class&lt;?&gt; c)</span> </span>{</span><br /><span class="line">    String desc = ReflectUtils.getDesc(c); <span class="comment">// 例如，java.lang.Byte 为 Ljava/lang/Byte;</span></span><br /><span class="line">    <span class="comment">// 添加到集合中</span></span><br /><span class="line">    <span class="keyword">int</span> index = mDescList.size();</span><br /><span class="line">    mDescList.add(desc);</span><br /><span class="line">    mDescMap.put(desc, index);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h1 id="6-Builder">6. Builder</h1>
<p><a href="https://github.com/YunaiV/dubbo/blob/master/dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/Builder.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.common.serialize.support.dubbo.Builder</code></a>&nbsp;，实现 GenericDataFlags 接口，对象序列化代码构建器<strong>抽象类</strong>。功能如下：</p>
<ul>
<li>
<ol>
<li>类的序列化和反序列化的<strong>抽象定义</strong>。</li>
</ol>
</li>
<li>
<ol start="2">
<li>提供<strong>常用类</strong>( 例如 Integer 、Long 、Map 等等 )的 Builder 实现类。</li>
</ol>
</li>
<li>
<ol start="3">
<li>基于&nbsp;<strong>Javassist</strong>&nbsp;自动实现<strong>自定义类</strong>( 例如 User 、Student 等等 )的 Builder 实现类。</li>
</ol>
</li>
</ul>
<p>🙂 大体的类结构，如下图所示：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_02_18/04.png" alt="类图" /></p>
<h2 id="6-1-抽象方法">6.1 抽象方法</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@return</span> Builder 对应的类</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Class&lt;T&gt; <span class="title">getType</span><span class="params">()</span></span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 序列化对象到 GenericObjectOutput 中的输出流。</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj 对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> out GenericObjectOutput 对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 当发生 IO 异常时。</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(T obj, GenericObjectOutput out)</span> <span class="keyword">throws</span> IOException</span>;</span><br /><span class="line"><span class="comment">// &uarr;&uarr;&uarr; 调用上面方法</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(T obj, OutputStream os)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="comment">// 将 OutputStream 封装成 GenericObjectOutput 对象</span></span><br /><span class="line">    GenericObjectOutput out = <span class="keyword">new</span> GenericObjectOutput(os);</span><br /><span class="line">    <span class="comment">// 写入</span></span><br /><span class="line">    writeTo(obj, out);</span><br /><span class="line">    <span class="comment">// 刷入</span></span><br /><span class="line">    out.flushBuffer();</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 反序列化 GenericObjectInput 成对象</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> in GenericObjectInput 对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@return</span> 对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 当 IO 发生异常时</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> T <span class="title">parseFrom</span><span class="params">(GenericObjectInput in)</span> <span class="keyword">throws</span> IOException</span>;</span><br /><span class="line"><span class="comment">// &uarr;&uarr;&uarr; 调用上面方法</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">parseFrom</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">return</span> parseFrom(<span class="keyword">new</span> GenericObjectInput(is)); <span class="comment">// 将 InputStream 封装成 GenericObjectInput 对象</span></span><br /><span class="line">}</span><br /><span class="line"><span class="comment">// &uarr;&uarr;&uarr; 调用上面方法</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">parseFrom</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="keyword">return</span> parseFrom(<span class="keyword">new</span> UnsafeByteArrayInputStream(b)); <span class="comment">// 将 byte[] 封装成 InputStream 对象</span></span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p><strong>三个</strong>抽象方法：</p>
<ul>
<li>对应类</li>
<li>序列化</li>
<li>反序列化</li>
</ul>
<h2 id="6-2-register">6.2 register</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 实现 Serializable 接口的类的 Builder 对象缓存</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Builder&lt;?&gt;&gt; BuilderMap = <span class="keyword">new</span> ConcurrentHashMap&lt;Class&lt;?&gt;, Builder&lt;?&gt;&gt;();</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 未实现 Serializable 接口的类的 Builder 对象缓存</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Builder&lt;?&gt;&gt; nonSerializableBuilderMap = <span class="keyword">new</span> ConcurrentHashMap&lt;Class&lt;?&gt;, Builder&lt;?&gt;&gt;();</span><br /><br /><span class="line">  <span class="number">1</span>: <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Builder&lt;T&gt; <span class="title">register</span><span class="params">(Class&lt;T&gt; c, <span class="keyword">boolean</span> isAllowNonSerializable)</span> </span>{</span><br /><span class="line">  <span class="number">2</span>:     <span class="comment">// Object 类，或者接口，使用 GenericBuilder</span></span><br /><span class="line">  <span class="number">3</span>:     <span class="keyword">if</span> (c == Object.class || c.isInterface()) {</span><br /><span class="line">  <span class="number">4</span>:         <span class="keyword">return</span> (Builder&lt;T&gt;) GenericBuilder;</span><br /><span class="line">  <span class="number">5</span>:     }</span><br /><span class="line">  <span class="number">6</span>:     <span class="comment">// Array 类型，使用 GenericArrayBuilder</span></span><br /><span class="line">  <span class="number">7</span>:     <span class="keyword">if</span> (c == Object[].class) {</span><br /><span class="line">  <span class="number">8</span>:         <span class="keyword">return</span> (Builder&lt;T&gt;) GenericArrayBuilder;</span><br /><span class="line">  <span class="number">9</span>:     }</span><br /><span class="line"> <span class="number">10</span>:</span><br /><span class="line"> <span class="number">11</span>:     <span class="comment">// 获得 Builder 对象</span></span><br /><span class="line"> <span class="number">12</span>:     Builder&lt;T&gt; b = (Builder&lt;T&gt;) BuilderMap.get(c);</span><br /><span class="line"> <span class="number">13</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> != b) {</span><br /><span class="line"> <span class="number">14</span>:         <span class="keyword">return</span> b;</span><br /><span class="line"> <span class="number">15</span>:     }</span><br /><span class="line"> <span class="number">16</span>:</span><br /><span class="line"> <span class="number">17</span>:     <span class="comment">// 要求实现 Serializable 接口，但是并未实现，则抛出 IllegalStateException 异常</span></span><br /><span class="line"> <span class="number">18</span>:     <span class="keyword">boolean</span> isSerializable = Serializable.class.isAssignableFrom(c);</span><br /><span class="line"> <span class="number">19</span>:     <span class="keyword">if</span> (!isAllowNonSerializable &amp;&amp; !isSerializable) {</span><br /><span class="line"> <span class="number">20</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Serialized class "</span> + c.getName() +</span><br /><span class="line"> <span class="number">21</span>:                 <span class="string">" must implement java.io.Serializable (dubbo codec setting: isAllowNonSerializable = false)"</span>);</span><br /><span class="line"> <span class="number">22</span>:     }</span><br /><span class="line"> <span class="number">23</span>:</span><br /><span class="line"> <span class="number">24</span>:     <span class="comment">// 获得 Builder 对象</span></span><br /><span class="line"> <span class="number">25</span>:     b = (Builder&lt;T&gt;) nonSerializableBuilderMap.get(c);</span><br /><span class="line"> <span class="number">26</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> != b) {</span><br /><span class="line"> <span class="number">27</span>:         <span class="keyword">return</span> b;</span><br /><span class="line"> <span class="number">28</span>:     }</span><br /><span class="line"> <span class="number">29</span>:</span><br /><span class="line"> <span class="number">30</span>:     <span class="comment">// 不存在，使用 Javassist 生成对应的 Builder 类，并进行创建 Builder 对象。</span></span><br /><span class="line"> <span class="number">31</span>:     b = newBuilder(c);</span><br /><span class="line"> <span class="number">32</span>:</span><br /><span class="line"> <span class="number">33</span>:     <span class="comment">// 添加到 Builder 对象缓存中</span></span><br /><span class="line"> <span class="number">34</span>:     <span class="keyword">if</span> (isSerializable) {</span><br /><span class="line"> <span class="number">35</span>:         BuilderMap.put(c, b);</span><br /><span class="line"> <span class="number">36</span>:     } <span class="keyword">else</span> {</span><br /><span class="line"> <span class="number">37</span>:         nonSerializableBuilderMap.put(c, b);</span><br /><span class="line"> <span class="number">38</span>:     }</span><br /><span class="line"> <span class="number">39</span>:</span><br /><span class="line"> <span class="number">40</span>:     <span class="keyword">return</span> b;</span><br /><span class="line"> <span class="number">41</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>代码比较易懂，胖友看下注释哈。比较奇怪的是&nbsp;<code>c.isInterface()</code>&nbsp;的判断，为什么使用&nbsp;<code>GenericBuilder</code>&nbsp;对象。在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/serialize-2-dubbo/">「6.4 GenericBuilder」&nbsp;</a>会看到答案。</li>
</ul>
<h2 id="6-3-常用数据类型的-Builder-实现">6.3 常用数据类型的 Builder 实现</h2>
<p>在&nbsp;<strong>static</strong>&nbsp;代码块，初始化了常用数据类型的 Builder 实现，代码如下图：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_02_18/05.png" alt="常用数据类型的 Builder 实现" /></p>
<p>代码比较简单，胖友点击&nbsp;<a href="http://svip.iocoder.cn/Dubbo/serialize-2-dubbo/TODO">链接</a>&nbsp;，自己查看。这里我们就以&nbsp;<strong>HashMap</strong>&nbsp;的 Builder 举例子，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">register(HashMap.class, <span class="keyword">new</span> Builder&lt;HashMap&gt;() {</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;HashMap&gt; <span class="title">getType</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> HashMap.class;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(HashMap obj, GenericObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        <span class="comment">// NULL ，写入 OBJECT_NULL 到 mBuffer 中</span></span><br /><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) {</span><br /><span class="line">            out.write0(OBJECT_NULL);</span><br /><span class="line">        <span class="comment">// HashMap 非空</span></span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            <span class="comment">// 写入 OBJECT_MAP 到 mBuffer 中</span></span><br /><span class="line">            out.write0(OBJECT_MAP);</span><br /><span class="line">            <span class="comment">// 写入 Length(Map 大小) 到 mBuffer 中</span></span><br /><span class="line">            out.writeUInt(obj.size());</span><br /><span class="line">            <span class="comment">// 写入 KV 到 mBuffer 中</span></span><br /><span class="line">            <span class="keyword">for</span> (Map.Entry entry : (Set&lt;Map.Entry&gt;) obj.entrySet()) {</span><br /><span class="line">                out.writeObject(entry.getKey());</span><br /><span class="line">                out.writeObject(entry.getValue());</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> HashMap <span class="title">parseFrom</span><span class="params">(GenericObjectInput in)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        <span class="comment">// 读取首位字节</span></span><br /><span class="line">        <span class="keyword">byte</span> b = in.read0();</span><br /><span class="line">        <span class="comment">// NULL ，返回 null</span></span><br /><span class="line">        <span class="keyword">if</span> (b == OBJECT_NULL) {</span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">if</span> (b != OBJECT_MAP) {</span><br /><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Input format error, expect OBJECT_NULL|OBJECT_MAP, get "</span> + b + <span class="string">"."</span>);</span><br /><span class="line">        }</span><br /><br /><span class="line">        <span class="comment">// 读取 Length(Map 大小)</span></span><br /><span class="line">        <span class="keyword">int</span> len = in.readUInt();</span><br /><span class="line">        <span class="comment">// 循环读取 KV 到 HashMap</span></span><br /><span class="line">        HashMap ret = <span class="keyword">new</span> HashMap(len);</span><br /><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br /><span class="line">            ret.put(in.readObject(), in.readObject());</span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">return</span> ret;</span><br /><span class="line">    }</span><br /><br /><span class="line">});</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="6-4-GenericBuilder">6.4 GenericBuilder</h2>
<p><code>GenericBuilder</code>&nbsp;，实现 Builder 接口，<strong>通用</strong>&nbsp;Object 的 Builder 对象。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Builder&lt;Object&gt; GenericBuilder = <span class="keyword">new</span> Builder&lt;Object&gt;() {</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;Object&gt; <span class="title">getType</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> Object.class;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(Object obj, GenericObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        out.writeObject(obj);</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">parseFrom</span><span class="params">(GenericObjectInput in)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        <span class="keyword">return</span> in.readObject();</span><br /><span class="line">    }</span><br /><br /><span class="line">};</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p>适用于<strong>所有对象</strong>。为什么这么说呢？我们以&nbsp;<code>#writeTo(Object obj, GenericObjectOutput out)</code>&nbsp;方法，举例子。在该方法中，会调用&nbsp;<code>GenericObjectOutput#writeObject(obj)</code>&nbsp;方法，那么在这个过程中，会获得&nbsp;<code>obj</code>&nbsp;对象，真正的 Builder 对象，从而序列化。如下图所示：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_02_18/05.png" alt="常用数据类型的 Builder 实现" /></p>
<h2 id="6-5-SerializableBuilder">6.5 SerializableBuilder</h2>
<p><code>SerializableBuilder</code>&nbsp;属性，实现 Builder 接口，<strong>通用</strong>&nbsp;Serializable 的 Builder 对象，使用&nbsp;<strong>Java 原生序列化</strong>方式实现。<strong>目前</strong>使用在：</p>
<ul>
<li>Throwable 对象。</li>
<li>带有&nbsp;<strong>transient</strong>&nbsp;修饰符属性的&nbsp;<strong>Serializable</strong>&nbsp;实现类。</li>
</ul>
<p>因为是<strong>广泛</strong>匹配，所以不适合调用&nbsp;<code>#register(Class&lt;T&gt; c, boolean isAllowNonSerializable)</code>&nbsp;方法，进行注册。而是在&nbsp;<code>#newObjectBuilder(Class&lt;?&gt; c)</code>&nbsp;方法，通过<strong>硬编码</strong>判断匹配返回。</p>
<p>实现代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Builder&lt;Serializable&gt; SerializableBuilder = <span class="keyword">new</span> Builder&lt;Serializable&gt;() {</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;Serializable&gt; <span class="title">getType</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> Serializable.class;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(Serializable obj, GenericObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        <span class="comment">// NULL ，写入 OBJECT_NULL 到 mBuffer 中</span></span><br /><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) {</span><br /><span class="line">            out.write0(OBJECT_NULL);</span><br /><span class="line">        <span class="comment">// 非空</span></span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            <span class="comment">// 写入 OBJECT_STREAM 到 mBuffer 中</span></span><br /><span class="line">            out.write0(OBJECT_STREAM);</span><br /><span class="line">            <span class="comment">// 使用 compactjava 序列化实现，进行序列化</span></span><br /><span class="line">            UnsafeByteArrayOutputStream bos = <span class="keyword">new</span> UnsafeByteArrayOutputStream();</span><br /><span class="line">            CompactedObjectOutputStream oos = <span class="keyword">new</span> CompactedObjectOutputStream(bos);</span><br /><span class="line">            oos.writeObject(obj);</span><br /><span class="line">            oos.flush();</span><br /><span class="line">            bos.close();</span><br /><span class="line">            <span class="keyword">byte</span>[] b = bos.toByteArray();</span><br /><span class="line">            <span class="comment">// 写入 Length( 字节数组长度 ) 到 mBuffer 中</span></span><br /><span class="line">            out.writeUInt(b.length);</span><br /><span class="line">            <span class="comment">// 写入 字节数组 到 mBuffer 中</span></span><br /><span class="line">            out.write0(b, <span class="number">0</span>, b.length);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">parseFrom</span><span class="params">(GenericObjectInput in)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        <span class="comment">// 读取首位字节</span></span><br /><span class="line">        <span class="keyword">byte</span> b = in.read0();</span><br /><span class="line">        <span class="comment">// NULL ，返回 null</span></span><br /><span class="line">        <span class="keyword">if</span> (b == OBJECT_NULL) {</span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">if</span> (b != OBJECT_STREAM) {</span><br /><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Input format error, expect OBJECT_NULL|OBJECT_STREAM, get "</span> + b + <span class="string">"."</span>);</span><br /><span class="line">        }</span><br /><br /><span class="line">        <span class="comment">// 使用 compactjava 序列化实现，进行反序列化</span></span><br /><span class="line">        UnsafeByteArrayInputStream bis = <span class="keyword">new</span> UnsafeByteArrayInputStream(in.read0(in.readUInt()));</span><br /><span class="line">        CompactedObjectInputStream ois = <span class="keyword">new</span> CompactedObjectInputStream(bis);</span><br /><span class="line">        <span class="keyword">try</span> {</span><br /><span class="line">            <span class="keyword">return</span> (Serializable) ois.readObject();</span><br /><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException e) {</span><br /><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(StringUtils.toString(e));</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><br /><span class="line">};</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="6-6-AbstractObjectBuilder">6.6 AbstractObjectBuilder</h2>
<p>AbstractObjectBuilder ，实现 Builder 接口，Builder&nbsp;<strong>抽象类</strong>。主要实现了<strong>循环引用</strong>对象的支持。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(T obj, GenericObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="comment">// NULL ，写入 OBJECT_NULL 到 mBuffer 中</span></span><br /><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) {</span><br /><span class="line">        out.write0(OBJECT_NULL);</span><br /><span class="line">    } <span class="keyword">else</span> {</span><br /><span class="line">        <span class="comment">// 读取循环引用对象编号</span></span><br /><span class="line">        <span class="keyword">int</span> ref = out.getRef(obj);</span><br /><span class="line">        <span class="keyword">if</span> (ref &lt; <span class="number">0</span>) { <span class="comment">// 不存在</span></span><br /><span class="line">            <span class="comment">// 添加到循环引用中，从而获得编号。下次在写入相等对象时，可使用循环引用编号的方式。</span></span><br /><span class="line">            out.addRef(obj);</span><br /><span class="line">            <span class="comment">// 写入 OBJECT 到 mBuffer 中</span></span><br /><span class="line">            out.write0(OBJECT);</span><br /><span class="line">            <span class="comment">// 写入 对象 到 mBuffer 中。</span></span><br /><span class="line">            writeObject(obj, out);</span><br /><span class="line">        } <span class="keyword">else</span> { <span class="comment">// 存在</span></span><br /><span class="line">            <span class="comment">// 写入 OBJECT_REF 到 mBuffer 中</span></span><br /><span class="line">            out.write0(OBJECT_REF);</span><br /><span class="line">            <span class="comment">// 写入 循环引用对象编号 到 mBuffer 中</span></span><br /><span class="line">            out.writeUInt(ref);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">parseFrom</span><span class="params">(GenericObjectInput in)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    <span class="comment">// 读取首位字节</span></span><br /><span class="line">    <span class="keyword">byte</span> b = in.read0();</span><br /><span class="line">    <span class="keyword">switch</span> (b) {</span><br /><span class="line">        <span class="comment">// 对象</span></span><br /><span class="line">        <span class="keyword">case</span> OBJECT: {</span><br /><span class="line">            <span class="comment">// 创建对象</span></span><br /><span class="line">            T ret = newInstance(in);</span><br /><span class="line">            <span class="comment">// 添加到循环引用中，从而获得编号。下次在读取到循环引用对象编号时，可直接获取到该对象。</span></span><br /><span class="line">            in.addRef(ret);</span><br /><span class="line">            <span class="comment">// 反序列化 GenericObjectInput 到对象</span></span><br /><span class="line">            readObject(ret, in);</span><br /><span class="line">            <span class="comment">// 返回</span></span><br /><span class="line">            <span class="keyword">return</span> ret;</span><br /><span class="line">        }</span><br /><span class="line">        <span class="comment">// 循环引用对象编号</span></span><br /><span class="line">        <span class="keyword">case</span> OBJECT_REF:</span><br /><span class="line">            <span class="comment">// 读取循环引用对象编号</span></span><br /><span class="line">            <span class="comment">// 获得对应的对象</span></span><br /><span class="line">            <span class="keyword">return</span> (T) in.getRef(in.readUInt());</span><br /><span class="line">        <span class="comment">// NULL ，返回 null</span></span><br /><span class="line">        <span class="keyword">case</span> OBJECT_NULL:</span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line">        <span class="keyword">default</span>:</span><br /><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Input format error, expect OBJECT|OBJECT_REF|OBJECT_NULL, get "</span> + b);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p>和 Builder 提供的三个<strong>抽象</strong>方法<strong>一一对应</strong>，AbstractObjectBuilder 也定义了<strong>三个抽象方法</strong>：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 创建 Builder 对应类的对象</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> in GenericObjectInput 对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@return</span> 对应类的对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 当 IO 发生异常时</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(GenericObjectInput in)</span> <span class="keyword">throws</span> IOException</span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 序列化对象到 GenericObjectOutput 中的输出流。</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj 对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> out GenericObjectOutput 对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 当 IO 发生异常时</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(T obj, GenericObjectOutput out)</span> <span class="keyword">throws</span> IOException</span>;</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 反序列化 GenericObjectInput 到对象</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> ret 对象。</span></span><br /><span class="line"><span class="comment"> *            该对象在 {<span class="doctag">@link</span> #parseFrom(GenericObjectInput)} 中，调用 {<span class="doctag">@link</span> #newInstance(GenericObjectInput)} 创建</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> in GenericObjectInput 对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 当 IO 发生异常时</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(T ret, GenericObjectInput in)</span> <span class="keyword">throws</span> IOException</span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
</ul>
<h3 id="6-6-1-GenericArrayBuilder">6.6.1 GenericArrayBuilder</h3>
<p><code>GenericArrayBuilder</code>&nbsp;，实现 AbstractObjectBuilder 抽象类，通用<strong>数组( Array )</strong>&nbsp;的 Builder 对象。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Builder&lt;Object[]&gt; GenericArrayBuilder = <span class="keyword">new</span> AbstractObjectBuilder&lt;Object[]&gt;() {</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="keyword">public</span> Class&lt;Object[]&gt; getType() {</span><br /><span class="line">        <span class="keyword">return</span> Object[].class;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="keyword">protected</span> Object[] newInstance(GenericObjectInput in) <span class="keyword">throws</span> IOException {</span><br /><span class="line">        <span class="comment">// 读取数组长度，并创建数组对象</span></span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object[in.readUInt()];</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(Object[] ret, GenericObjectInput in)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        <span class="comment">// 循环读取每个对象到 ret 中</span></span><br /><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ret.length; i++) {</span><br /><span class="line">            ret[i] = in.readObject();</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object[] obj, GenericObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        <span class="comment">// 写入 Length( 数组大小 ) 到 mBuffer</span></span><br /><span class="line">        out.writeUInt(obj.length);</span><br /><span class="line">        <span class="comment">// 循环写入每个对象到 mBuffer 中</span></span><br /><span class="line">        <span class="keyword">for</span> (Object item : obj) {</span><br /><span class="line">            out.writeObject(item);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><br /><span class="line">};</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>因为&nbsp;<code>GenericArrayBuilder</code>&nbsp;实现 AbstractObjectBuilder 抽象类，所以，若数组中有<strong>相等</strong>的元素，可以使用<strong>循环引用</strong>的功能，从而提升解析速度，降低体积。</li>
</ul>
<h3 id="6-6-2-其他子类">6.6.2 其他子类</h3>
<p>在&nbsp;<code>#newObjectBuilder(Class&lt;?&gt; c)</code>&nbsp;中，基于 Javassist&nbsp;<strong>自动实现</strong>每个类的 Builder 类，实现的就是 AbstractObjectBuilder 抽象类。</p>
<h2 id="6-5-newBuilder">6.5 newBuilder</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Builder&lt;T&gt; <span class="title">newBuilder</span><span class="params">(Class&lt;T&gt; c)</span> </span>{</span><br /><span class="line">    <span class="comment">// 基础类型，已经内置相应的 Builder 实现类，抛出 RuntimeException 异常。因为，已经在 GenericDataInput 和 GenericDataOutput 实现。</span></span><br /><span class="line">    <span class="keyword">if</span> (c.isPrimitive()) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can not create builder for primitive type: "</span> + c);</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled())</span><br /><span class="line">        logger.info(<span class="string">"create Builder for class: "</span> + c);</span><br /><br /><span class="line">    Builder&lt;?&gt; builder;</span><br /><span class="line">    <span class="comment">// 创建 Array Builder 对象</span></span><br /><span class="line">    <span class="keyword">if</span> (c.isArray()) {</span><br /><span class="line">        builder = newArrayBuilder(c);</span><br /><span class="line">    <span class="comment">// 创建 Object Builder 对象</span></span><br /><span class="line">    } <span class="keyword">else</span> {</span><br /><span class="line">        builder = newObjectBuilder(c);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> (Builder&lt;T&gt;) builder;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="6-5-1-newObjectBuilder">6.5.1 newObjectBuilder</h3>
<p><code>#newObjectBuilder(Class&lt;?&gt; c)</code>&nbsp;，基于 Javassist&nbsp;<strong>自动实现</strong>每个类的 Builder 类( 继承&nbsp;<strong>AbstractObjectBuilder</strong>&nbsp;抽象类 )，并创建对应的 Builder 对象。代码超级冗长，老艿艿已经添加好了详细的代码注释，胖友点击&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/834ff308bda98adc1832e41e2544c88389eb1f1f/dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/Builder.java#L1010-L1422" target="_blank" rel="external nofollow noopener noreferrer">链接</a>&nbsp;自己查看。</p>
<p>实现原理，简单的说，其实就是，循环类的<strong>每个</strong>属性，<strong>拼接</strong>对应的序列化和反序列化的<strong>过程</strong>的代码字符串，最终提交给 Javassist 生成类。</p>
<p>良心如我，如下是一个示例：</p>
<ul>
<li>Student 和 Info 类 ：</li>
</ul>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.common.serialize.dubbo;</span><br /><span class="line"><span class="comment">// ... 省略 import</span></span><br /><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YunaiBuilderTest</span> </span>{</span><br /><br /><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br /><br /><span class="line">        <span class="keyword">public</span> String username;</span><br /><span class="line">        <span class="keyword">public</span> String password;</span><br /><br /><span class="line">        <span class="keyword">public</span> Info info1;</span><br /><span class="line">        <span class="keyword">public</span> Info info2;</span><br /><br /><span class="line">        <span class="keyword">public</span> Student student;</span><br /><br /><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">3</span>;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br /><br /><span class="line">        <span class="keyword">public</span> String key;</span><br /><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>Student 对应的 Builder 类：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_18/07.png" alt="Student 对应的 Builder 类" /></li>
<li>Info 对象的 Builder 类：<img src="http://static2.iocoder.cn/images/Dubbo/2019_02_18/08.png" alt="Info 对应的 Builder 类" /></li>
</ul>
<h3 id="6-5-2-newEnumBuilder">6.5.2 newEnumBuilder</h3>
<p><code>#newEnumBuilder(Class&lt;?&gt; c)</code>&nbsp;，基于 Javassist&nbsp;<strong>自动实现</strong>每个类的 Builder 类( 继承&nbsp;<strong>Builder</strong>&nbsp;接口 )，并创建对应的 Builder 对象。代码比较易懂，老艿艿已经添加好了详细的代码注释，胖友点击&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/834ff308bda98adc1832e41e2544c88389eb1f1f/dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/Builder.java#L1424-L1461" target="_blank" rel="external nofollow noopener noreferrer">链接</a>&nbsp;自己查看。</p>
<p>实现原理，粗暴的说，<strong>序列化</strong>使用&nbsp;<code>enum#name()</code>&nbsp;方法，<strong>反序列化</strong>使用&nbsp;<code>Enum#valueOf(Class&lt;T&gt; enumType, String name)</code>&nbsp;方法。</p>
<h3 id="6-5-3-newArrayBuilder">6.5.3 newArrayBuilder</h3>
<p><code>#newArrayBuilder(Class&lt;?&gt; c)</code>&nbsp;，基于 Javassist&nbsp;<strong>自动实现</strong>每个类的 Builder 类( 继承&nbsp;<strong>Builder</strong>&nbsp;接口 )，并创建对应的 Builder 对象。代码比较易懂，老艿艿已经添加好了详细的代码注释，胖友点击&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/834ff308bda98adc1832e41e2544c88389eb1f1f/dubbo-common/src/main/java/com/alibaba/dubbo/common/serialize/support/dubbo/Builder.java#L899-L1008" target="_blank" rel="external nofollow noopener noreferrer">链接</a>&nbsp;自己查看。</p>
<p>实现原理，直接的说，循环数组的<strong>每个</strong>元素，<strong>拼接</strong>对应的序列化和反序列化的<strong>过程</strong>的代码字符串，最终提交给 Javassist 生成类。</p>
<p>🙂 比较有意思的是，多维数组的处理，例如&nbsp;<code>int[][][]</code>&nbsp;。胖友可以想想。实际，也是比较简单的。</p>
<h1 id="666-彩蛋">666. 彩蛋</h1>
<p>大四( 2012 )的时候，写了自己的序列化实现&nbsp;<a href="https://github.com/YunaiV/Ludaima_Protobuf" target="_blank" rel="external nofollow noopener noreferrer">Ludaima_Protobuf</a>&nbsp;，基于 Protobuf 的配置文件&nbsp;<code>proto</code>&nbsp;，读取，生成序列化和反序列化的静态类，基本零优化。</p>
<p>现在回头看了 Dubbo 序列化的实现，还是收益良多。美滋滋。</p>
</div>