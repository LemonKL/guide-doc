<header class="article-header">
<h1 class="article-title">API 配置（三）之服务消费者</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<blockquote>
<p>友情提示，【<strong>配置</strong>】这块的内容，会相对比较枯燥。所以，如果看到一些很难懂的地方，建议先跳过。</p>
<p>对于 Dubbo ，重点是要去理解，多协议、RPC、容错等等模块，而不是【<strong>配置</strong>】。</p>
<p>😈 估计好多胖友被【<strong>配置</strong>】这章劝退了把？？？</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>本文接&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-api-2/">《API 配置（二）之服务提供者》</a>&nbsp;，分享<strong>服务消费者</strong>相关的配置。</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_01_07/03.png" alt="配置类关系" /></p>
<ul>
<li><strong>红框</strong>部分，consumer-side</li>
</ul>
<hr />
<p>还是老样子，我们先来看一段&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/configuration/api.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; API 配置》</a>&nbsp;，服务消费者的初始化代码：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// 当前应用配置</span></span><br /><span class="line">ApplicationConfig application = <span class="keyword">new</span> ApplicationConfig();</span><br /><span class="line">application.setName(<span class="string">"yyy"</span>);</span><br /><br /><span class="line"><span class="comment">// 连接注册中心配置</span></span><br /><span class="line">RegistryConfig registry = <span class="keyword">new</span> RegistryConfig();</span><br /><span class="line">registry.setAddress(<span class="string">"10.20.130.230:9090"</span>);</span><br /><span class="line">registry.setUsername(<span class="string">"aaa"</span>);</span><br /><span class="line">registry.setPassword(<span class="string">"bbb"</span>);</span><br /><br /><span class="line"><span class="comment">// 注意：ReferenceConfig为重对象，内部封装了与注册中心的连接，以及与服务提供方的连接</span></span><br /><br /><span class="line"><span class="comment">// 引用远程服务</span></span><br /><span class="line">ReferenceConfig&lt;XxxService&gt; reference = <span class="keyword">new</span> ReferenceConfig&lt;XxxService&gt;(); <span class="comment">// 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏</span></span><br /><span class="line">reference.setApplication(application);</span><br /><span class="line">reference.setRegistry(registry); <span class="comment">// 多个注册中心可以用setRegistries()</span></span><br /><span class="line">reference.setInterface(XxxService.class);</span><br /><span class="line">reference.setVersion(<span class="string">"1.0.0"</span>);</span><br /><br /><span class="line"><span class="comment">// 和本地bean一样使用xxxService</span></span><br /><span class="line">XxxService xxxService = reference.get(); <span class="comment">// 注意：此代理对象内部封装了所有通讯细节，对象较重，请缓存复用</span></span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h1 id="2-AbstractReferenceConfig">2. AbstractReferenceConfig</h1>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractReferenceConfig.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.config.AbstractReferenceConfig</code></a>&nbsp;，实现 AbstractInterfaceConfig ，抽象引用配置类。</p>
<ul>
<li>具体属性的解释，<strong>需要寻找</strong>在&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-reference.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; dubbo:reference》</a>&nbsp;或&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-consumer.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; dubbo:consumer》</a>&nbsp;文档。</li>
</ul>
<h1 id="3-ConsumerConfig">3. ConsumerConfig</h1>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ConsumerConfig.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.config.ConsumerConfig</code></a>&nbsp;，实现 AbstractReferenceConfig ，服务消费者缺省值配置。</p>
<ul>
<li>具体属性的解释，参见&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-consumer.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; dubbo:consumer》</a>&nbsp;文档。</li>
</ul>
<h1 id="4-ReferenceConfig">4. ReferenceConfig</h1>
<p><a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.config.ReferenceConfig</code></a>&nbsp;，服务消费者引用<strong>服务配置类</strong>。</p>
<ul>
<li>具体属性的解释，参见&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-consumer.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; dubbo:consumer》</a>&nbsp;文档。</li>
</ul>
<p>下面，我们进入<strong>正戏</strong>。</p>
<p>在文初的 ReferenceConfig 的初始化示例代码中，最后调用的是&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/d3c3975f320c78452f96098b04441fed4c00ab70/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java#L185-L195" target="_blank" rel="external nofollow noopener noreferrer"><code>ServiceConfig#get()</code></a>&nbsp;方法。从方法的命名，我们可以看出，获取<strong>引用服务</strong>。该方法主要做了如下几件事情：</p>
<ol>
<li><strong>进一步初始化</strong>&nbsp;ReferenceConfig 对象。</li>
<li><strong>校验</strong>&nbsp;ReferenceConfig 对象的配置项。</li>
<li>使用 ReferenceConfig 对象，<strong>生成</strong>&nbsp;Dubbo URL 对象<strong>数组</strong>。</li>
<li>使用 Dubbo URL 对象，<strong>应用服务</strong>。</li>
</ol>
<p>😈 本文重点在服务提供者相关的配置，因此只解析&nbsp;<strong>1+2+3</strong>&nbsp;部分( 不包括 4 )。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>{</span><br /><span class="line"> <span class="number">2</span>:     <span class="comment">// 已销毁，不可获得</span></span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">if</span> (destroyed) {</span><br /><span class="line"> <span class="number">4</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already destroyed!"</span>);</span><br /><span class="line"> <span class="number">5</span>:     }</span><br /><span class="line"> <span class="number">6</span>:     <span class="comment">// 初始化</span></span><br /><span class="line"> <span class="number">7</span>:     <span class="keyword">if</span> (ref == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">8</span>:         init();</span><br /><span class="line"> <span class="number">9</span>:     }</span><br /><span class="line"><span class="number">10</span>:     <span class="keyword">return</span> ref;</span><br /><span class="line"><span class="number">11</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 2 至 5 行：若已经销毁(&nbsp;<code>destroyed = true</code>&nbsp;)，抛出异常。</li>
<li>第 7 至 9 行：若未初始化，调用&nbsp;<code>#init()</code>&nbsp;方法，进行初始化。</li>
<li>第 10 行：返回引用服务。</li>
</ul>
<hr />
<p><a href="http://svip.iocoder.cn/Dubbo/configuration-api-3/"><code>#init()</code></a>&nbsp;方法，代码如下：</p>
<blockquote>
<p>友情提示，该方法并未拆分更多的小方法，所以超级长，近 200+ 行。</p>
</blockquote>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">  <span class="number">1</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br /><span class="line">  <span class="number">2</span>:     <span class="comment">// 已经初始化，直接返回</span></span><br /><span class="line">  <span class="number">3</span>:     <span class="keyword">if</span> (initialized) {</span><br /><span class="line">  <span class="number">4</span>:         <span class="keyword">return</span>;</span><br /><span class="line">  <span class="number">5</span>:     }</span><br /><span class="line">  <span class="number">6</span>:     initialized = <span class="keyword">true</span>;</span><br /><span class="line">  <span class="number">7</span>:     <span class="comment">// 校验接口名非空</span></span><br /><span class="line">  <span class="number">8</span>:     <span class="keyword">if</span> (interfaceName == <span class="keyword">null</span> || interfaceName.length() == <span class="number">0</span>) {</span><br /><span class="line">  <span class="number">9</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"&lt;dubbo:reference interface=\"\" /&gt; interface not allow null!"</span>);</span><br /><span class="line"> <span class="number">10</span>:     }</span><br /><span class="line"> <span class="number">11</span>:     <span class="comment">// 拼接属性配置（环境变量 + properties 属性）到 ConsumerConfig 对象</span></span><br /><span class="line"> <span class="number">12</span>:     <span class="comment">// get consumer's global configuration</span></span><br /><span class="line"> <span class="number">13</span>:     checkDefault();</span><br /><span class="line"> <span class="number">14</span>:     <span class="comment">// 拼接属性配置（环境变量 + properties 属性）到 ReferenceConfig 对象</span></span><br /><span class="line"> <span class="number">15</span>:     appendProperties(<span class="keyword">this</span>);</span><br /><span class="line"> <span class="number">16</span>:     <span class="comment">// 若未设置 `generic` 属性，使用 `ConsumerConfig.generic` 属性。</span></span><br /><span class="line"> <span class="number">17</span>:     <span class="keyword">if</span> (getGeneric() == <span class="keyword">null</span> &amp;&amp; getConsumer() != <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">18</span>:         setGeneric(getConsumer().getGeneric());</span><br /><span class="line"> <span class="number">19</span>:     }</span><br /><span class="line"> <span class="number">20</span>:     <span class="comment">// 泛化接口的实现</span></span><br /><span class="line"> <span class="number">21</span>:     <span class="keyword">if</span> (ProtocolUtils.isGeneric(getGeneric())) {</span><br /><span class="line"> <span class="number">22</span>:         interfaceClass = GenericService.class;</span><br /><span class="line"> <span class="number">23</span>:     <span class="comment">// 普通接口的实现</span></span><br /><span class="line"> <span class="number">24</span>:     } <span class="keyword">else</span> {</span><br /><span class="line"> <span class="number">25</span>:         <span class="keyword">try</span> {</span><br /><span class="line"> <span class="number">26</span>:             interfaceClass = Class.forName(interfaceName, <span class="keyword">true</span>, Thread.currentThread().getContextClassLoader());</span><br /><span class="line"> <span class="number">27</span>:         } <span class="keyword">catch</span> (ClassNotFoundException e) {</span><br /><span class="line"> <span class="number">28</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br /><span class="line"> <span class="number">29</span>:         }</span><br /><span class="line"> <span class="number">30</span>:         <span class="comment">// 校验接口和方法</span></span><br /><span class="line"> <span class="number">31</span>:         checkInterfaceAndMethods(interfaceClass, methods);</span><br /><span class="line"> <span class="number">32</span>:     }</span><br /><span class="line"> <span class="number">33</span>:     <span class="comment">// 直连提供者，参见文档《直连提供者》http://dubbo.apache.org/zh-cn/docs/user/demos/explicit-target.html</span></span><br /><span class="line"> <span class="number">34</span>:     <span class="comment">// 【直连提供者】第一优先级，通过 -D 参数指定 ，例如 java -Dcom.alibaba.xxx.XxxService=dubbo://localhost:20890</span></span><br /><span class="line"> <span class="number">35</span>:     String resolve = System.getProperty(interfaceName);</span><br /><span class="line"> <span class="number">36</span>:     String resolveFile = <span class="keyword">null</span>;</span><br /><span class="line"> <span class="number">37</span>:     <span class="comment">// 【直连提供者】第二优先级，通过文件映射，例如 com.alibaba.xxx.XxxService=dubbo://localhost:20890</span></span><br /><span class="line"> <span class="number">38</span>:     <span class="keyword">if</span> (resolve == <span class="keyword">null</span> || resolve.length() == <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">39</span>:         <span class="comment">// 默认先加载，`${user.home}/dubbo-resolve.properties` 文件 ，无需配置</span></span><br /><span class="line"> <span class="number">40</span>:         resolveFile = System.getProperty(<span class="string">"dubbo.resolve.file"</span>);</span><br /><span class="line"> <span class="number">41</span>:         <span class="keyword">if</span> (resolveFile == <span class="keyword">null</span> || resolveFile.length() == <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">42</span>:             File userResolveFile = <span class="keyword">new</span> File(<span class="keyword">new</span> File(System.getProperty(<span class="string">"user.home"</span>)), <span class="string">"dubbo-resolve.properties"</span>);</span><br /><span class="line"> <span class="number">43</span>:             <span class="keyword">if</span> (userResolveFile.exists()) {</span><br /><span class="line"> <span class="number">44</span>:                 resolveFile = userResolveFile.getAbsolutePath();</span><br /><span class="line"> <span class="number">45</span>:             }</span><br /><span class="line"> <span class="number">46</span>:         }</span><br /><span class="line"> <span class="number">47</span>:         <span class="comment">// 存在 resolveFile ，则进行文件读取加载。</span></span><br /><span class="line"> <span class="number">48</span>:         <span class="keyword">if</span> (resolveFile != <span class="keyword">null</span> &amp;&amp; resolveFile.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">49</span>:             Properties properties = <span class="keyword">new</span> Properties();</span><br /><span class="line"> <span class="number">50</span>:             FileInputStream fis = <span class="keyword">null</span>;</span><br /><span class="line"> <span class="number">51</span>:             <span class="keyword">try</span> {</span><br /><span class="line"> <span class="number">52</span>:                 fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(resolveFile));</span><br /><span class="line"> <span class="number">53</span>:                 properties.load(fis);</span><br /><span class="line"> <span class="number">54</span>:             } <span class="keyword">catch</span> (IOException e) {</span><br /><span class="line"> <span class="number">55</span>:                 <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unload "</span> + resolveFile + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br /><span class="line"> <span class="number">56</span>:             } <span class="keyword">finally</span> {</span><br /><span class="line"> <span class="number">57</span>:                 <span class="keyword">try</span> {</span><br /><span class="line"> <span class="number">58</span>:                     <span class="keyword">if</span> (<span class="keyword">null</span> != fis) fis.close();</span><br /><span class="line"> <span class="number">59</span>:                 } <span class="keyword">catch</span> (IOException e) {</span><br /><span class="line"> <span class="number">60</span>:                     logger.warn(e.getMessage(), e);</span><br /><span class="line"> <span class="number">61</span>:                 }</span><br /><span class="line"> <span class="number">62</span>:             }</span><br /><span class="line"> <span class="number">63</span>:             resolve = properties.getProperty(interfaceName);</span><br /><span class="line"> <span class="number">64</span>:         }</span><br /><span class="line"> <span class="number">65</span>:     }</span><br /><span class="line"> <span class="number">66</span>:     <span class="comment">// 设置直连提供者的 url</span></span><br /><span class="line"> <span class="number">67</span>:     <span class="keyword">if</span> (resolve != <span class="keyword">null</span> &amp;&amp; resolve.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">68</span>:         url = resolve;</span><br /><span class="line"> <span class="number">69</span>:         <span class="keyword">if</span> (logger.isWarnEnabled()) {</span><br /><span class="line"> <span class="number">70</span>:             <span class="keyword">if</span> (resolveFile != <span class="keyword">null</span> &amp;&amp; resolveFile.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">71</span>:                 logger.warn(<span class="string">"Using default dubbo resolve file "</span> + resolveFile + <span class="string">" replace "</span> + interfaceName + <span class="string">""</span> + resolve + <span class="string">" to p2p invoke remote service."</span>);</span><br /><span class="line"> <span class="number">72</span>:             } <span class="keyword">else</span> {</span><br /><span class="line"> <span class="number">73</span>:                 logger.warn(<span class="string">"Using -D"</span> + interfaceName + <span class="string">"="</span> + resolve + <span class="string">" to p2p invoke remote service."</span>);</span><br /><span class="line"> <span class="number">74</span>:             }</span><br /><span class="line"> <span class="number">75</span>:         }</span><br /><span class="line"> <span class="number">76</span>:     }</span><br /><span class="line"> <span class="number">77</span>:     <span class="comment">// 从 ConsumerConfig 对象中，读取 application、module、registries、monitor 配置对象。</span></span><br /><span class="line"> <span class="number">78</span>:     <span class="keyword">if</span> (consumer != <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">79</span>:         <span class="keyword">if</span> (application == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">80</span>:             application = consumer.getApplication();</span><br /><span class="line"> <span class="number">81</span>:         }</span><br /><span class="line"> <span class="number">82</span>:         <span class="keyword">if</span> (<span class="keyword">module</span> == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">83</span>:             <span class="keyword">module</span> = consumer.getModule();</span><br /><span class="line"> <span class="number">84</span>:         }</span><br /><span class="line"> <span class="number">85</span>:         <span class="keyword">if</span> (registries == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">86</span>:             registries = consumer.getRegistries();</span><br /><span class="line"> <span class="number">87</span>:         }</span><br /><span class="line"> <span class="number">88</span>:         <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">89</span>:             monitor = consumer.getMonitor();</span><br /><span class="line"> <span class="number">90</span>:         }</span><br /><span class="line"> <span class="number">91</span>:     }</span><br /><span class="line"> <span class="number">92</span>:     <span class="comment">// 从 ModuleConfig 对象中，读取 registries、monitor 配置对象。</span></span><br /><span class="line"> <span class="number">93</span>:     <span class="keyword">if</span> (<span class="keyword">module</span> != <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">94</span>:         <span class="keyword">if</span> (registries == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">95</span>:             registries = <span class="keyword">module</span>.getRegistries();</span><br /><span class="line"> <span class="number">96</span>:         }</span><br /><span class="line"> <span class="number">97</span>:         <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">98</span>:             monitor = <span class="keyword">module</span>.getMonitor();</span><br /><span class="line"> <span class="number">99</span>:         }</span><br /><span class="line"><span class="number">100</span>:     }</span><br /><span class="line"><span class="number">101</span>:     <span class="comment">// 从 ApplicationConfig 对象中，读取 registries、monitor 配置对象。</span></span><br /><span class="line"><span class="number">102</span>:     <span class="keyword">if</span> (application != <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">103</span>:         <span class="keyword">if</span> (registries == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">104</span>:             registries = application.getRegistries();</span><br /><span class="line"><span class="number">105</span>:         }</span><br /><span class="line"><span class="number">106</span>:         <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">107</span>:             monitor = application.getMonitor();</span><br /><span class="line"><span class="number">108</span>:         }</span><br /><span class="line"><span class="number">109</span>:     }</span><br /><span class="line"><span class="number">110</span>:     <span class="comment">// 校验 ApplicationConfig 配置。</span></span><br /><span class="line"><span class="number">111</span>:     checkApplication();</span><br /><span class="line"><span class="number">112</span>:     <span class="comment">// 校验 Stub 和 Mock 相关的配置</span></span><br /><span class="line"><span class="number">113</span>:     checkStubAndMock(interfaceClass);</span><br /><span class="line"><span class="number">114</span>:     <span class="comment">// 将 `side`，`dubbo`，`timestamp`，`pid` 参数，添加到 `map` 集合中。</span></span><br /><span class="line"><span class="number">115</span>:     Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br /><span class="line"><span class="number">116</span>:     Map&lt;Object, Object&gt; attributes = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br /><span class="line"><span class="number">117</span>:     map.put(Constants.SIDE_KEY, Constants.CONSUMER_SIDE);</span><br /><span class="line"><span class="number">118</span>:     map.put(Constants.DUBBO_VERSION_KEY, Version.getVersion());</span><br /><span class="line"><span class="number">119</span>:     map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br /><span class="line"><span class="number">120</span>:     <span class="keyword">if</span> (ConfigUtils.getPid() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">121</span>:         map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br /><span class="line"><span class="number">122</span>:     }</span><br /><span class="line"><span class="number">123</span>:     <span class="comment">// methods、revision、interface</span></span><br /><span class="line"><span class="number">124</span>:     <span class="keyword">if</span> (!isGeneric()) {</span><br /><span class="line"><span class="number">125</span>:         String revision = Version.getVersion(interfaceClass, version);</span><br /><span class="line"><span class="number">126</span>:         <span class="keyword">if</span> (revision != <span class="keyword">null</span> &amp;&amp; revision.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">127</span>:             map.put(<span class="string">"revision"</span>, revision);</span><br /><span class="line"><span class="number">128</span>:         }</span><br /><span class="line"><span class="number">129</span>: </span><br /><span class="line"><span class="number">130</span>:         String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames(); <span class="comment">// 获得方法数组</span></span><br /><span class="line"><span class="number">131</span>:         <span class="keyword">if</span> (methods.length == <span class="number">0</span>) {</span><br /><span class="line"><span class="number">132</span>:             logger.warn(<span class="string">"NO method found in service interface "</span> + interfaceClass.getName());</span><br /><span class="line"><span class="number">133</span>:             map.put(<span class="string">"methods"</span>, Constants.ANY_VALUE);</span><br /><span class="line"><span class="number">134</span>:         } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">135</span>:             map.put(<span class="string">"methods"</span>, StringUtils.join(<span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(methods)), <span class="string">","</span>));</span><br /><span class="line"><span class="number">136</span>:         }</span><br /><span class="line"><span class="number">137</span>:     }</span><br /><span class="line"><span class="number">138</span>:     map.put(Constants.INTERFACE_KEY, interfaceName);</span><br /><span class="line"><span class="number">139</span>:     <span class="comment">// 将各种配置对象，添加到 `map` 集合中。</span></span><br /><span class="line"><span class="number">140</span>:     appendParameters(map, application);</span><br /><span class="line"><span class="number">141</span>:     appendParameters(map, <span class="keyword">module</span>);</span><br /><span class="line"><span class="number">142</span>:     appendParameters(map, consumer, Constants.DEFAULT_KEY);</span><br /><span class="line"><span class="number">143</span>:     appendParameters(map, <span class="keyword">this</span>);</span><br /><span class="line"><span class="number">144</span>:     <span class="comment">// 获得服务键，作为前缀</span></span><br /><span class="line"><span class="number">145</span>:     String prefix = StringUtils.getServiceKey(map);</span><br /><span class="line"><span class="number">146</span>:     <span class="comment">// 将 MethodConfig 对象数组，添加到 `map` 集合中。</span></span><br /><span class="line"><span class="number">147</span>:     <span class="keyword">if</span> (methods != <span class="keyword">null</span> &amp;&amp; !methods.isEmpty()) {</span><br /><span class="line"><span class="number">148</span>:         <span class="keyword">for</span> (MethodConfig method : methods) {</span><br /><span class="line"><span class="number">149</span>:             <span class="comment">// 将 MethodConfig 对象，添加到 `map` 集合中。</span></span><br /><span class="line"><span class="number">150</span>:             appendParameters(map, method, method.getName());</span><br /><span class="line"><span class="number">151</span>:             <span class="comment">// 当 配置了 `MethodConfig.retry = false` 时，强制禁用重试</span></span><br /><span class="line"><span class="number">152</span>:             String retryKey = method.getName() + <span class="string">".retry"</span>;</span><br /><span class="line"><span class="number">153</span>:             <span class="keyword">if</span> (map.containsKey(retryKey)) {</span><br /><span class="line"><span class="number">154</span>:                 String retryValue = map.remove(retryKey);</span><br /><span class="line"><span class="number">155</span>:                 <span class="keyword">if</span> (<span class="string">"false"</span>.equals(retryValue)) {</span><br /><span class="line"><span class="number">156</span>:                     map.put(method.getName() + <span class="string">".retries"</span>, <span class="string">"0"</span>);</span><br /><span class="line"><span class="number">157</span>:                 }</span><br /><span class="line"><span class="number">158</span>:             }</span><br /><span class="line"><span class="number">159</span>:             <span class="comment">// 将带有 @Parameter(attribute = true) 配置对象的属性，添加到参数集合。参见《事件通知》http://dubbo.apache.org/zh-cn/docs/user/demos/events-notify.html</span></span><br /><span class="line"><span class="number">160</span>:             appendAttributes(attributes, method, prefix + <span class="string">"."</span> + method.getName());</span><br /><span class="line"><span class="number">161</span>:             <span class="comment">// 检查属性集合中的事件通知方法是否正确。若正确，进行转换。</span></span><br /><span class="line"><span class="number">162</span>:             checkAndConvertImplicitConfig(method, map, attributes);</span><br /><span class="line"><span class="number">163</span>:         }</span><br /><span class="line"><span class="number">164</span>:     }</span><br /><span class="line"><span class="number">165</span>: </span><br /><span class="line"><span class="number">166</span>:     <span class="comment">// 以系统环境变量( DUBBO_IP_TO_REGISTRY ) 作为服务注册地址，参见 https://github.com/dubbo/dubbo-docker-sample 项目。</span></span><br /><span class="line"><span class="number">167</span>:     String hostToRegistry = ConfigUtils.getSystemProperty(Constants.DUBBO_IP_TO_REGISTRY);</span><br /><span class="line"><span class="number">168</span>:     <span class="keyword">if</span> (hostToRegistry == <span class="keyword">null</span> || hostToRegistry.length() == <span class="number">0</span>) {</span><br /><span class="line"><span class="number">169</span>:         hostToRegistry = NetUtils.getLocalHost();</span><br /><span class="line"><span class="number">170</span>:     } <span class="keyword">else</span> <span class="keyword">if</span> (isInvalidLocalHost(hostToRegistry)) {</span><br /><span class="line"><span class="number">171</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Specified invalid registry ip from property:"</span> + Constants.DUBBO_IP_TO_REGISTRY + <span class="string">", value:"</span> + hostToRegistry);</span><br /><span class="line"><span class="number">172</span>:     }</span><br /><span class="line"><span class="number">173</span>:     map.put(Constants.REGISTER_IP_KEY, hostToRegistry);</span><br /><span class="line"><span class="number">174</span>: </span><br /><span class="line"><span class="number">175</span>:     <span class="comment">// 添加到 StaticContext 进行缓存</span></span><br /><span class="line"><span class="number">176</span>:     <span class="comment">//attributes are stored by system context.</span></span><br /><span class="line"><span class="number">177</span>:     StaticContext.getSystemContext().putAll(attributes);</span><br /><span class="line"><span class="number">178</span>: </span><br /><span class="line"><span class="number">179</span>:     <span class="comment">// 省略【引用服务】</span></span><br /><span class="line"><span class="number">185</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 2 至 6 行：若已经初始化(&nbsp;<code>initialized = true</code>&nbsp;) 时，直接返回。否则，标记已经初始化。</li>
<li>第 7 至 10 行：校验接口名&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/d3c3975f320c78452f96098b04441fed4c00ab70/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java#L78" target="_blank" rel="external nofollow noopener noreferrer"><code>interfaceName</code></a>&nbsp;非空。</li>
<li>第 13 行：调用&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/d3c3975f320c78452f96098b04441fed4c00ab70/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java#L493-L502" target="_blank" rel="external nofollow noopener noreferrer"><code>#checkDefault()</code></a>&nbsp;方法，读取<strong>属性配置</strong>( 环境变量 + properties 属性 )到 ConsumerConfig 对象。
<ul>
<li>关于&ldquo;<strong>属性配置</strong>&rdquo; ，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-properties/?self?self">《精尽 Dubbo 源码解析 &mdash;&mdash; 属性配置》</a>&nbsp;详细解析。</li>
<li>🙂 直接点击方法查看，较为简单，已经添加详细注释。</li>
</ul>
</li>
<li>第 15 行：调用&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L132-L212" target="_blank" rel="external nofollow noopener noreferrer"><code>#appendProperties(config)</code></a>&nbsp;方法，读取<strong>属性配置</strong>( 环境变量 + properties 属性 )到 ReferenceConfig 对象（<strong>自己</strong>）</li>
<li>第 16 至 19 行：若未设置&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/d3c3975f320c78452f96098b04441fed4c00ab70/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractReferenceConfig.java#L43" target="_blank" rel="external nofollow noopener noreferrer"><code>generic</code></a>&nbsp;属性，使用&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/d3c3975f320c78452f96098b04441fed4c00ab70/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractReferenceConfig.java#L43" target="_blank" rel="external nofollow noopener noreferrer"><code>ConsumerConfig.generic</code></a>&nbsp;属性。</li>
<li>第 20 至 22 行：泛化接口的实现。
<ul>
<li><a href="http://dubbo.apache.org/zh-cn/docs/user/demos/generic-reference.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 泛化引用》</a></li>
</ul>
</li>
<li>第 23 至 32 行：普通接口的实现。
<ul>
<li>第 60 至 64 行：根据&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/d3c3975f320c78452f96098b04441fed4c00ab70/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java#L78" target="_blank" rel="external nofollow noopener noreferrer"><code>interfaceName</code></a>&nbsp;，获得对应的<strong>接口类</strong>，并赋值给&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/d3c3975f320c78452f96098b04441fed4c00ab70/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java#L79" target="_blank" rel="external nofollow noopener noreferrer"><code>interfaceClass</code></a>。</li>
<li>第 31 行：调用&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractInterfaceConfig.java#L280-L317" target="_blank" rel="external nofollow noopener noreferrer"><code>#checkInterfaceAndMethods(interfaceClass, methods)</code></a>&nbsp;方法，检查接口和方法。
<ul>
<li>🙂 直接点击方法查看，较为简单，已经添加详细注释。</li>
</ul>
</li>
</ul>
</li>
<li>第 33 至 76 行：直连提供者。
<ul>
<li><a href="http://dubbo.apache.org/zh-cn/docs/user/demos/explicit-target.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 直连提供者》</a></li>
<li>🙂 中间有一些逻辑处理，胖友看下代码的注释。结合文档。</li>
</ul>
</li>
<li>第 77 至 109 行：从 ConsumerConfig、ModuleConfig、ApplicationConfig 配置对象，复制&nbsp;<code>application</code><code>module</code>&nbsp;<code>registries</code>&nbsp;<code>monitor</code>&nbsp;给 ReferenceConfig (&nbsp;<strong>自己</strong>&nbsp;)。</li>
<li>第 111 行：调用&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractInterfaceConfig.java#L156-L187" target="_blank" rel="external nofollow noopener noreferrer"><code>#checkApplication()</code></a>&nbsp;方法，校验 ApplicationConfig 配置。
<ul>
<li>🙂 直接点击方法查看，较为简单，已经添加详细注释。</li>
</ul>
</li>
<li>第 113 行：调用&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractInterfaceConfig.java#L319-L368" target="_blank" rel="external nofollow noopener noreferrer"><code>#checkStubAndMock(interfaceClass)</code></a>&nbsp;方法，校验 Stub 和 Mock 相关的配置。</li>
<li><strong>第 115 行：创建参数集合&nbsp;<code>map</code>&nbsp;，用于下面创建 Dubbo URL 的&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java#L109" target="_blank" rel="external nofollow noopener noreferrer"><code>parameters</code></a>&nbsp;属性</strong>。</li>
<li>第 116 至 122 行：将&nbsp;<code>side</code>&nbsp;<code>dubbo</code>&nbsp;<code>timestamp</code>&nbsp;<code>timestamp</code>&nbsp;<code>pid</code>&nbsp;添加到&nbsp;<code>map</code>&nbsp;中。</li>
<li>第 123 至 137 行：将&nbsp;<code>interface</code>&nbsp;<code>methods</code>&nbsp;<code>revision</code>&nbsp;到&nbsp;<code>map</code>&nbsp;中。</li>
<li>第 139 至 143 行：调用&nbsp;<code>#appendParameters(map, config)</code>&nbsp;方法，将各种配置对象添加到&nbsp;<code>map</code>&nbsp;中。
<ul>
<li>🙂&nbsp;<code>#appendParameters(map, config)</code>&nbsp;方法，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-api-1/?self">《API 配置（一）之应用》</a>&nbsp;有详细解析。</li>
</ul>
</li>
<li>第 146 至 164 行：调用 MethodConfig 对象<strong>数组</strong>，添加到&nbsp;<code>map</code>&nbsp;中。
<ul>
<li>目的是将<strong>每个</strong>&nbsp;MethodConfig 和其对应的 ArgumentConfig 对象数组，添加到&nbsp;<code>map</code>&nbsp;中。</li>
<li>第 160 行：调用&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/9d38b6f9f95798755141d6140e311e8fd51fecc1/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java#L326-L363" target="_blank" rel="external nofollow noopener noreferrer"><code>#appendAttributes(parameters, config, prefix)</code></a>&nbsp;方法，将&nbsp;<code>@Parameter(attribute = true)</code>&nbsp;配置对象的属性，添加到参数集合。在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/configuration-api-1/?self">《API 配置（一）之应用》</a>&nbsp;有详细解析。
<ul>
<li><a href="http://dubbo.apache.org/zh-cn/docs/user/demos/events-notify.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 事件通知》</a></li>
</ul>
</li>
<li>第 162 行：调用&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/d3c3975f320c78452f96098b04441fed4c00ab70/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java#L133-L167" target="_blank" rel="external nofollow noopener noreferrer"><code>#checkAndConvertImplicitConfig(method, map, attributes)</code></a>&nbsp;方法，检查属性集合中的事件通知方法是否正确。若正确，进行转换。
<ul>
<li>🙂 直接点击方法查看，较为简单，已经添加详细注释。</li>
</ul>
</li>
</ul>
</li>
<li>第 166 至 173 行：以系统换将变量 ( DUBBO_IP_TO_REGISTRY ) 作为服务注册地址，参见&nbsp;<a href="https://github.com/dubbo/dubbo-docker-sample" target="_blank" rel="external nofollow noopener noreferrer">dubbo-docker-sample</a>&nbsp;项目。</li>
<li>第 177 行：添加到&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/d3c3975f320c78452f96098b04441fed4c00ab70/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/StaticContext.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.rpc.StaticContext</code></a>&nbsp;进行缓存。
<ul>
<li>目的是&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/events-notify.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 事件通知》</a>&nbsp;。</li>
</ul>
</li>
<li>第 179 行：<strong>省略</strong>【服务引用】逻辑。</li>
</ul>
</div>