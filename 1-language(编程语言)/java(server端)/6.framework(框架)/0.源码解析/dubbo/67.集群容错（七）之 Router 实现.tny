<header class="article-header">
<h1 class="article-title">集群容错（七）之 Router 实现</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>本文接&nbsp;<a href="http://svip.iocoder.cn/Dubbo/cluster-6-impl-configurator/?self">《精尽 Dubbo 源码解析 &mdash;&mdash; 集群容错（六）之 Configurator 实现》</a>&nbsp;一文，分享&nbsp;<code>dubbo-cluster</code>模块，&nbsp;<code>router</code>&nbsp;包，实现 Dubbo 的<strong>路由规则</strong>功能。</p>
<p>Router 相关类，如下图：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_04_30/02.png" alt="Router 相关类" /></p>
<blockquote>
<p>老艿艿：本文对应&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/routing-rule.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 路由规则》</a>&nbsp;文档。如果之前没了解过该功能的胖友，请先阅读了解下哈。</p>
</blockquote>
<h1 id="2-RouterFactory">2. RouterFactory</h1>
<p><code>com.alibaba.dubbo.rpc.cluster.RouterFactory</code>&nbsp;，Router 工厂<strong>接口</strong>。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@SPI</span></span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RouterFactory</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * Create router.</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 创建 Router 对象</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@return</span> router</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="meta">@Adaptive</span>(<span class="string">"protocol"</span>)</span><br /><span class="line">    <span class="function">Router <span class="title">getRouter</span><span class="params">(URL url)</span></span>;</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>@SPI</code>&nbsp;注解，Dubbo SPI&nbsp;<strong>拓展点</strong>，无默认值。</li>
<li><code>@Adaptive("protocol")</code>&nbsp;注解，基于 Dubbo SPI Adaptive 机制，加载对应的 Router 实现，使用&nbsp;<code>URL.protocol</code>&nbsp;属性。</li>
<li><code>#getRouter(URL url)</code>&nbsp;接口方法，获得 Router 对象。</li>
</ul>
<h2 id="2-1-ConditionRouterFactory">2.1 ConditionRouterFactory</h2>
<p><code>com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouterFactory</code>&nbsp;，实现 RouterFactory 接口，<strong>ConditionRouter</strong>&nbsp;工厂实现类。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionRouterFactory</span> <span class="keyword">implements</span> <span class="title">RouterFactory</span> </span>{</span><br /><br /><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"condition"</span>;</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> Router <span class="title">getRouter</span><span class="params">(URL url)</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConditionRouter(url);</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>对应 Router 实现类为 ConditionRouter 。</li>
</ul>
<h2 id="2-2-ScriptRouterFactory">2.2 ScriptRouterFactory</h2>
<p><code>com.alibaba.dubbo.rpc.cluster.router.script.ScriptRouterFactory</code>&nbsp;，实现 RouterFactory 接口，<strong>ScriptRouter</strong>&nbsp;工厂实现类。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScriptRouterFactory</span> <span class="keyword">implements</span> <span class="title">RouterFactory</span> </span>{</span><br /><br /><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"script"</span>;</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> Router <span class="title">getRouter</span><span class="params">(URL url)</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ScriptRouter(url);</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>对应 Router 实现类为 ScriptRouter 。</li>
</ul>
<h2 id="2-3-FileRouterFactory">2.3 FileRouterFactory</h2>
<p><code>com.alibaba.dubbo.rpc.cluster.router.file.FileRouterFactory</code>&nbsp;，实现 RouterFactory 接口，基于<strong>文件</strong>读取路由规则，创建<strong>对应的 Router 实现类的对象</strong>。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileRouterFactory</span> <span class="keyword">implements</span> <span class="title">RouterFactory</span> </span>{</span><br /><span class="line"> <span class="number">2</span>: </span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"file"</span>;</span><br /><span class="line"> <span class="number">4</span>: </span><br /><span class="line"> <span class="number">5</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment"> 6:      * RouterFactory$Adaptive 对象</span></span><br /><span class="line"><span class="comment"> 7:      */</span></span><br /><span class="line"> <span class="number">8</span>:     <span class="keyword">private</span> RouterFactory routerFactory;</span><br /><span class="line"> <span class="number">9</span>: </span><br /><span class="line"><span class="number">10</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRouterFactory</span><span class="params">(RouterFactory routerFactory)</span> </span>{</span><br /><span class="line"><span class="number">11</span>:         <span class="keyword">this</span>.routerFactory = routerFactory;</span><br /><span class="line"><span class="number">12</span>:     }</span><br /><span class="line"><span class="number">13</span>: </span><br /><span class="line"><span class="number">14</span>:     <span class="meta">@Override</span></span><br /><span class="line"><span class="number">15</span>:     <span class="function"><span class="keyword">public</span> Router <span class="title">getRouter</span><span class="params">(URL url)</span> </span>{</span><br /><span class="line"><span class="number">16</span>:         <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">17</span>:             <span class="comment">// Transform File URL into Script Route URL, and Load</span></span><br /><span class="line"><span class="number">18</span>:             <span class="comment">// file:///d:/path/to/route.js?router=script ==&gt; script:///d:/path/to/route.js?type=js&amp;rule=&lt;file-content&gt;</span></span><br /><span class="line"><span class="number">19</span>:             <span class="comment">// 获得 router 配置项，默认为 script</span></span><br /><span class="line"><span class="number">20</span>:             String protocol = url.getParameter(Constants.ROUTER_KEY, ScriptRouterFactory.NAME); <span class="comment">// Replace original protocol (maybe 'file') with 'script'</span></span><br /><span class="line"><span class="number">21</span>:             <span class="comment">// 使用文件后缀做为类型</span></span><br /><span class="line"><span class="number">22</span>:             String type = <span class="keyword">null</span>; <span class="comment">// Use file suffix to config script type, e.g., js, groovy ...</span></span><br /><span class="line"><span class="number">23</span>:             String path = url.getPath();</span><br /><span class="line"><span class="number">24</span>:             <span class="keyword">if</span> (path != <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">25</span>:                 <span class="keyword">int</span> i = path.lastIndexOf(<span class="string">'.'</span>);</span><br /><span class="line"><span class="number">26</span>:                 <span class="keyword">if</span> (i &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">27</span>:                     type = path.substring(i + <span class="number">1</span>);</span><br /><span class="line"><span class="number">28</span>:                 }</span><br /><span class="line"><span class="number">29</span>:             }</span><br /><span class="line"><span class="number">30</span>:             <span class="comment">// 读取规则内容</span></span><br /><span class="line"><span class="number">31</span>:             String rule = IOUtils.read(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(url.getAbsolutePath())));</span><br /><span class="line"><span class="number">32</span>: </span><br /><span class="line"><span class="number">33</span>:             <span class="comment">// 创建路由规则 URL</span></span><br /><span class="line"><span class="number">34</span>:             <span class="keyword">boolean</span> runtime = url.getParameter(Constants.RUNTIME_KEY, <span class="keyword">false</span>);</span><br /><span class="line"><span class="number">35</span>:             URL script = url.setProtocol(protocol).addParameter(Constants.TYPE_KEY, type)</span><br /><span class="line"><span class="number">36</span>:                     .addParameter(Constants.RUNTIME_KEY, runtime)</span><br /><span class="line"><span class="number">37</span>:                     .addParameterAndEncoded(Constants.RULE_KEY, rule);</span><br /><span class="line"><span class="number">38</span>: </span><br /><span class="line"><span class="number">39</span>:             <span class="comment">// 通过 Dubbo SPI Adaptive 机制，获得 Router 对象</span></span><br /><span class="line"><span class="number">40</span>:             <span class="keyword">return</span> routerFactory.getRouter(script);</span><br /><span class="line"><span class="number">41</span>:         } <span class="keyword">catch</span> (IOException e) {</span><br /><span class="line"><span class="number">42</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br /><span class="line"><span class="number">43</span>:         }</span><br /><span class="line"><span class="number">44</span>:     }</span><br /><span class="line"><span class="number">45</span>: </span><br /><span class="line"><span class="number">46</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 20 行：获得&nbsp;<code>"router"</code>&nbsp;配置项，默认为&nbsp;<code>"script"</code>&nbsp;。</li>
<li>第 21 至 29 行：获得<strong>类型</strong>，基于文件后缀。</li>
<li>第 31 行：从<strong>文件</strong>中，读取<strong>规则内容</strong>。</li>
<li>第 33 至 37 行：创建路由规则 URL 对象。</li>
<li>第 40 行：通过 Dubbo SPI&nbsp;<strong>Adaptive</strong>&nbsp;机制，获得<strong>对应的 Router 对象</strong>。</li>
</ul>
<h1 id="3-Router">3. Router</h1>
<p><code>com.alibaba.dubbo.rpc.cluster.Router</code>&nbsp;，实现 Comparable 接口，<strong>路由规则</strong>接口。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Router</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Router</span>&gt; </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * get the router url.</span></span><br /><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br /><span class="line"><span class="comment">     * 路由规则 URL</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@return</span> url</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function">URL <span class="title">getUrl</span><span class="params">()</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * route.</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 路由，筛选匹配的 Invoker 集合</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> invokers   Invoker 集合</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> url        refer url</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@return</span> routed invokers 路由后的 Invoker 集合</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RpcException</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; route(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation) <span class="keyword">throws</span> RpcException;</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><strong>一个 Router 对象，对应一条路由规则</strong>。</li>
<li>Configurator 有<strong>优先级</strong>的要求，所以实现 Comparable 接口。</li>
<li><code>#getUrl()</code>&nbsp;接口方法，获得路由 URL ，里面带有路由规则。</li>
<li><code>#route(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</code>&nbsp;接口方法，路由，筛选<strong>匹配的</strong>Invoker 集合。</li>
</ul>
<h2 id="3-1-ConditionRouter">3.1 ConditionRouter</h2>
<p><code>com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter</code>&nbsp;，实现 Router 接口，<strong>基于条件表达式</strong>的 Router 实现类。</p>
<blockquote>
<p>基于条件表达式的路由规则，如：<code>host = 10.20.153.10 =&gt; host = 10.20.153.11</code></p>
</blockquote>
<p><strong>注意</strong>，胖友一定要看了&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/routing-rule.html#%E6%9D%A1%E4%BB%B6%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 路由规则》</a>&nbsp;的&nbsp;<a href="http://svip.iocoder.cn/Dubbo/cluster-7-impl-router/">条件路由规则</a>&nbsp;部分，不然下面影响理解。</p>
<h3 id="3-1-1-构造方法">3.1.1 构造方法</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 分组正则匹配，详细见 {<span class="doctag">@link</span> #parseRule(String)} 方法</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * 前 [] 为匹配，分隔符</span></span><br /><span class="line"><span class="comment"> * 后 [] 为匹配，内容</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern ROUTE_PATTERN = Pattern.compile(<span class="string">"([&amp;!=,]*)\\s*([^&amp;!=,\\s]+)"</span>);</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 路由规则 URL</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> URL url;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 路由规则的优先级，用于排序，优先级越大越靠前执行，可不填，缺省为 0 。</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> priority;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 当路由结果为空时，是否强制执行，如果不强制执行，路由结果为空的路由规则将自动失效，可不填，缺省为 false 。</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> force;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 消费者匹配条件集合，通过解析【条件表达式 rule 的 `=&gt;` 之前半部分】</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, MatchPair&gt; whenCondition;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 提供者地址列表的过滤条件，通过解析【条件表达式 rule 的 `=&gt;` 之后半部分】</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, MatchPair&gt; thenCondition;</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConditionRouter</span><span class="params">(URL url)</span> </span>{</span><br /><span class="line">    <span class="keyword">this</span>.url = url;</span><br /><span class="line">    <span class="keyword">this</span>.priority = url.getParameter(Constants.PRIORITY_KEY, <span class="number">0</span>);</span><br /><span class="line">    <span class="keyword">this</span>.force = url.getParameter(Constants.FORCE_KEY, <span class="keyword">false</span>);</span><br /><span class="line">    <span class="keyword">try</span> {</span><br /><span class="line">        <span class="comment">// 拆分条件变大时为 when 和 then 两部分</span></span><br /><span class="line">        String rule = url.getParameterAndDecoded(Constants.RULE_KEY);</span><br /><span class="line">        <span class="keyword">if</span> (rule == <span class="keyword">null</span> || rule.trim().length() == <span class="number">0</span>) {</span><br /><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal route rule!"</span>);</span><br /><span class="line">        }</span><br /><span class="line">        rule = rule.replace(<span class="string">"consumer."</span>, <span class="string">""</span>).replace(<span class="string">"provider."</span>, <span class="string">""</span>);</span><br /><span class="line">        <span class="keyword">int</span> i = rule.indexOf(<span class="string">"=&gt;"</span>);</span><br /><span class="line">        String whenRule = i &lt; <span class="number">0</span> ? <span class="keyword">null</span> : rule.substring(<span class="number">0</span>, i).trim();</span><br /><span class="line">        String thenRule = i &lt; <span class="number">0</span> ? rule.trim() : rule.substring(i + <span class="number">2</span>).trim();</span><br /><span class="line">        <span class="comment">// 解析 `whenCondition`</span></span><br /><span class="line">        Map&lt;String, MatchPair&gt; when = StringUtils.isBlank(whenRule) || <span class="string">"true"</span>.equals(whenRule) ? <span class="keyword">new</span> HashMap&lt;String, MatchPair&gt;() : parseRule(whenRule);</span><br /><span class="line">        <span class="comment">// 解析 `thenCondition`</span></span><br /><span class="line">        Map&lt;String, MatchPair&gt; then = StringUtils.isBlank(thenRule) || <span class="string">"false"</span>.equals(thenRule) ? <span class="keyword">null</span> : parseRule(thenRule);</span><br /><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> It should be determined on the business level whether the `When condition` can be empty or not.</span></span><br /><span class="line">        <span class="keyword">this</span>.whenCondition = when;</span><br /><span class="line">        <span class="keyword">this</span>.thenCondition = then;</span><br /><span class="line">    } <span class="keyword">catch</span> (ParseException e) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>每个字段的解释，胖友自己看下注释。</li>
<li>MatchPair ，见&nbsp;<a href="http://svip.iocoder.cn/Dubbo/cluster-7-impl-router/">「3.1.2 MatchPair」</a>&nbsp;中。</li>
<li><code>#parseRule()</code>&nbsp;方法，见&nbsp;<a href="http://svip.iocoder.cn/Dubbo/cluster-7-impl-router/">「3.1.3 parseRule」</a>&nbsp;中。</li>
</ul>
<h3 id="3-1-2-MatchPair">3.1.2 MatchPair</h3>
<p>MatchPair 为 ConditionRouter 的<strong>内部静态类</strong>，用于匹配的值<strong>组</strong>。<strong>每个</strong>属性条件，例如&nbsp;<code>method</code>&nbsp;<code>host</code>等，对应<strong>一个</strong>&nbsp;MatchPair 对象。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchPair</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 匹配的值集合</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">final</span> Set&lt;String&gt; matches = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 不匹配的值集合</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">final</span> Set&lt;String&gt; mismatches = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 判断 value 是否匹配 matches + mismatches</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> param URL</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否匹配</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String value, URL param)</span> </span>{</span><br /><span class="line">        <span class="comment">// 只匹配 matches</span></span><br /><span class="line">        <span class="keyword">if</span> (!matches.isEmpty() &amp;&amp; mismatches.isEmpty()) {</span><br /><span class="line">            <span class="keyword">for</span> (String match : matches) {</span><br /><span class="line">                <span class="keyword">if</span> (UrlUtils.isMatchGlobPattern(match, value, param)) {</span><br /><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br /><span class="line">                }</span><br /><span class="line">            }</span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 如果没匹配上，认为为 false ，即不匹配</span></span><br /><span class="line">        }</span><br /><br /><span class="line">        <span class="comment">// 只匹配 mismatches</span></span><br /><span class="line">        <span class="keyword">if</span> (!mismatches.isEmpty() &amp;&amp; matches.isEmpty()) {</span><br /><span class="line">            <span class="keyword">for</span> (String mismatch : mismatches) {</span><br /><span class="line">                <span class="keyword">if</span> (UrlUtils.isMatchGlobPattern(mismatch, value, param)) {</span><br /><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br /><span class="line">                }</span><br /><span class="line">            }</span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 注意，这里和上面不同。原因，你懂的。</span></span><br /><span class="line">        }</span><br /><br /><span class="line">        <span class="comment">// 匹配 mismatches + matches</span></span><br /><span class="line">        <span class="keyword">if</span> (!matches.isEmpty()) {</span><br /><span class="line">            <span class="comment">//when both mismatches and matches contain the same value, then using mismatches first</span></span><br /><span class="line">            <span class="keyword">for</span> (String mismatch : mismatches) {</span><br /><span class="line">                <span class="keyword">if</span> (UrlUtils.isMatchGlobPattern(mismatch, value, param)) {</span><br /><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br /><span class="line">                }</span><br /><span class="line">            }</span><br /><span class="line">            <span class="keyword">for</span> (String match : matches) {</span><br /><span class="line">                <span class="keyword">if</span> (UrlUtils.isMatchGlobPattern(match, value, param)) {</span><br /><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br /><span class="line">                }</span><br /><span class="line">            }</span><br /><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 如果没匹配上，认为为 false ，即不匹配</span></span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>#isMatch(String value, URL param)</code>&nbsp;方法，判断&nbsp;<code>value</code>&nbsp;是否<strong>匹配</strong>&nbsp;<code>matches</code>&nbsp;和&nbsp;<code>mismatches</code>&nbsp;。</p>
<ul>
<li>那么为什么会有&nbsp;<code>param</code>&nbsp;参数呢？因为要支持&nbsp;<code>$</code>&nbsp;从 URL 中，读取参数。</li>
<li>
<p><code>#UrlUtils#isMatchGlobPattern(match, value, URL)</code>&nbsp;方法，支持&nbsp;<code>*</code>&nbsp;通配，判断&nbsp;<code>match</code>&nbsp;和&nbsp;<code>value</code>&nbsp;是否匹配。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMatchGlobPattern</span><span class="params">(String pattern, String value, URL param)</span> </span>{</span><br /><span class="line">    <span class="comment">// 以美元符 `$` 开头，表示引用参数</span></span><br /><span class="line">    <span class="keyword">if</span> (param != <span class="keyword">null</span> &amp;&amp; pattern.startsWith(<span class="string">"$"</span>)) {</span><br /><span class="line">        pattern = param.getRawParameter(pattern.substring(<span class="number">1</span>));</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 匹配</span></span><br /><span class="line">    <span class="keyword">return</span> isMatchGlobPattern(pattern, value);</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMatchGlobPattern</span><span class="params">(String pattern, String value)</span> </span>{</span><br /><span class="line">    <span class="comment">// 全匹配</span></span><br /><span class="line">    <span class="keyword">if</span> (<span class="string">"*"</span>.equals(pattern)) {</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 全部为空，匹配</span></span><br /><span class="line">    <span class="keyword">if</span> ((pattern == <span class="keyword">null</span> || pattern.length() == <span class="number">0</span>) &amp;&amp; (value == <span class="keyword">null</span> || value.length() == <span class="number">0</span>)) {</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 有一个为空，不匹配</span></span><br /><span class="line">    <span class="keyword">if</span> ((pattern == <span class="keyword">null</span> || pattern.length() == <span class="number">0</span>) || (value == <span class="keyword">null</span> || value.length() == <span class="number">0</span>)) {</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="comment">// 支持 * 的通配</span></span><br /><span class="line">    <span class="keyword">int</span> i = pattern.lastIndexOf(<span class="string">'*'</span>);</span><br /><span class="line">    <span class="comment">// doesn't find "*"</span></span><br /><span class="line">    <span class="keyword">if</span> (i == -<span class="number">1</span>) {</span><br /><span class="line">        <span class="keyword">return</span> value.equals(pattern);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// "*" is at the end</span></span><br /><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i == pattern.length() - <span class="number">1</span>) {</span><br /><span class="line">        <span class="keyword">return</span> value.startsWith(pattern.substring(<span class="number">0</span>, i));</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// "*" is at the beginning</span></span><br /><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br /><span class="line">        <span class="keyword">return</span> value.endsWith(pattern.substring(i + <span class="number">1</span>));</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// "*" is in the middle</span></span><br /><span class="line">    <span class="keyword">else</span> {</span><br /><span class="line">        String prefix = pattern.substring(<span class="number">0</span>, i);</span><br /><span class="line">        String suffix = pattern.substring(i + <span class="number">1</span>);</span><br /><span class="line">        <span class="keyword">return</span> value.startsWith(prefix) &amp;&amp; value.endsWith(suffix);</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>x</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>😈 代码比较简单，所以胖友自己读下。</p>
<h3 id="3-1-3-parseRule">3.1.3 parseRule</h3>
<p><code>#parseRule(rule)</code>&nbsp;方法，解析路由配置内容&nbsp;<code>"rule"</code>&nbsp;。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, MatchPair&gt; <span class="title">parseRule</span><span class="params">(String rule)</span> <span class="keyword">throws</span> ParseException </span>{</span><br /><span class="line"> <span class="number">2</span>: <span class="comment">//    System.out.println("rule: " + rule); // add by 芋艿，方便大家看</span></span><br /><span class="line"> <span class="number">3</span>:     Map&lt;String, MatchPair&gt; condition = <span class="keyword">new</span> HashMap&lt;String, MatchPair&gt;();</span><br /><span class="line"> <span class="number">4</span>:     <span class="keyword">if</span> (StringUtils.isBlank(rule)) {</span><br /><span class="line"> <span class="number">5</span>:         <span class="keyword">return</span> condition;</span><br /><span class="line"> <span class="number">6</span>:     }</span><br /><span class="line"> <span class="number">7</span>:     <span class="comment">// Key-Value pair, stores both match and mismatch conditions</span></span><br /><span class="line"> <span class="number">8</span>:     MatchPair pair = <span class="keyword">null</span>;</span><br /><span class="line"> <span class="number">9</span>:     <span class="comment">// Multiple values</span></span><br /><span class="line"><span class="number">10</span>:     Set&lt;String&gt; values = <span class="keyword">null</span>;</span><br /><span class="line"><span class="number">11</span>:     <span class="keyword">final</span> Matcher matcher = ROUTE_PATTERN.matcher(rule);</span><br /><span class="line"><span class="number">12</span>:     <span class="keyword">while</span> (matcher.find()) { <span class="comment">// Try to match one by one</span></span><br /><span class="line"><span class="number">13</span>:         String separator = matcher.group(<span class="number">1</span>);</span><br /><span class="line"><span class="number">14</span>:         String content = matcher.group(<span class="number">2</span>);</span><br /><span class="line"><span class="number">15</span>: <span class="comment">//        System.out.println(separator + "\t" + content); // add by 芋艿，方便大家看</span></span><br /><span class="line"><span class="number">16</span>:         <span class="comment">// Start part of the condition expression.</span></span><br /><span class="line"><span class="number">17</span>:         <span class="keyword">if</span> (separator == <span class="keyword">null</span> || separator.length() == <span class="number">0</span>) {</span><br /><span class="line"><span class="number">18</span>:             pair = <span class="keyword">new</span> MatchPair();</span><br /><span class="line"><span class="number">19</span>:             condition.put(content, pair);</span><br /><span class="line"><span class="number">20</span>:         }</span><br /><span class="line"><span class="number">21</span>:         <span class="comment">// The KV part of the condition expression</span></span><br /><span class="line"><span class="number">22</span>:         <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"&amp;"</span>.equals(separator)) {</span><br /><span class="line"><span class="number">23</span>:             <span class="keyword">if</span> (condition.get(content) == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">24</span>:                 pair = <span class="keyword">new</span> MatchPair();</span><br /><span class="line"><span class="number">25</span>:                 condition.put(content, pair);</span><br /><span class="line"><span class="number">26</span>:             } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">27</span>:                 pair = condition.get(content);</span><br /><span class="line"><span class="number">28</span>:             }</span><br /><span class="line"><span class="number">29</span>:         }</span><br /><span class="line"><span class="number">30</span>:         <span class="comment">// The Value in the KV part.</span></span><br /><span class="line"><span class="number">31</span>:         <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"="</span>.equals(separator)) {</span><br /><span class="line"><span class="number">32</span>:             <span class="keyword">if</span> (pair == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">33</span>:                 <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(<span class="string">"Illegal route rule \""</span> + rule + <span class="string">"\", The error char '"</span> + separator + <span class="string">"' at index "</span> + matcher.start() + <span class="string">" before \""</span> + content + <span class="string">"\"."</span>, matcher.start());</span><br /><span class="line"><span class="number">34</span>:             }</span><br /><span class="line"><span class="number">35</span>:             values = pair.matches;</span><br /><span class="line"><span class="number">36</span>:             values.add(content);</span><br /><span class="line"><span class="number">37</span>:         }</span><br /><span class="line"><span class="number">38</span>:         <span class="comment">// The Value in the KV part.</span></span><br /><span class="line"><span class="number">39</span>:         <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"!="</span>.equals(separator)) {</span><br /><span class="line"><span class="number">40</span>:             <span class="keyword">if</span> (pair == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">41</span>:                 <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(<span class="string">"Illegal route rule \""</span> + rule + <span class="string">"\", The error char '"</span> + separator + <span class="string">"' at index "</span> + matcher.start() + <span class="string">" before \""</span> + content + <span class="string">"\"."</span>, matcher.start());</span><br /><span class="line"><span class="number">42</span>:             }</span><br /><span class="line"><span class="number">43</span>:             values = pair.mismatches;</span><br /><span class="line"><span class="number">44</span>:             values.add(content);</span><br /><span class="line"><span class="number">45</span>:         }</span><br /><span class="line"><span class="number">46</span>:         <span class="comment">// The Value in the KV part, if Value have more than one items.</span></span><br /><span class="line"><span class="number">47</span>:         <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">","</span>.equals(separator)) { <span class="comment">// Should be seperateed by ','</span></span><br /><span class="line"><span class="number">48</span>:             <span class="keyword">if</span> (values == <span class="keyword">null</span> || values.isEmpty()) {</span><br /><span class="line"><span class="number">49</span>:                 <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(<span class="string">"Illegal route rule \""</span> + rule + <span class="string">"\", The error char '"</span> + separator + <span class="string">"' at index "</span> + matcher.start() + <span class="string">" before \""</span> + content + <span class="string">"\"."</span>, matcher.start());</span><br /><span class="line"><span class="number">50</span>:             }</span><br /><span class="line"><span class="number">51</span>:             values.add(content);</span><br /><span class="line"><span class="number">52</span>:         } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">53</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(<span class="string">"Illegal route rule \""</span> + rule + <span class="string">"\", The error char '"</span> + separator + <span class="string">"' at index "</span> + matcher.start() + <span class="string">" before \""</span> + content + <span class="string">"\"."</span>, matcher.start());</span><br /><span class="line"><span class="number">54</span>:         }</span><br /><span class="line"><span class="number">55</span>:     }</span><br /><span class="line"><span class="number">56</span>:     <span class="keyword">return</span> condition;</span><br /><span class="line"><span class="number">57</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p>第 11 至 14 行：通过&nbsp;<code>ROUTE_PATTERN</code>&nbsp;正则匹配&nbsp;<code>rule</code>&nbsp;，<strong>循环</strong>多次，直到结束。如下是两个例子：</p>
<figure class="highlight plain">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">rule: host = 192.168.3.17 &amp; method = say01</span><br /><span class="line">	host</span><br /><span class="line">=	192.168.3.17</span><br /><span class="line">&amp;	method</span><br /><span class="line">=	say01</span><br /><br /><span class="line">---------- 分割线 ---------- </span><br /><br /><span class="line">rule: host = 192.168.3.17</span><br /><span class="line">	host</span><br /><span class="line">=	192.168.3.17</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p>第 16 至 29 行：处理条件<strong>属性</strong>的情况，例如：<code>host</code>&nbsp;和&nbsp;<code>&amp; method</code>&nbsp;等等，此时会获得对应的 MatchPair 对象。若不存在，则进行创建 MatchPair 对象。</p>
</li>
<li>第 30 至 45 行：处理条件<strong>条件值</strong>的情况，例如：<code>= 192.168.3.17</code>&nbsp;和&nbsp;<code>!= say01</code>&nbsp;等等，此时会添加到 MatchPair 的&nbsp;<code>matches</code>&nbsp;或&nbsp;<code>mismatches</code>&nbsp;中。
<ul>
<li>第 46 至 51 行：处理条件<strong>条件值</strong>以逗号(&nbsp;<code>,</code>&nbsp;)分隔多个值的情况，此时<strong>也会</strong>添加到 MatchPair 的&nbsp;<code>matches</code>&nbsp;或&nbsp;<code>mismatches</code>&nbsp;中。</li>
</ul>
</li>
<li>第 52 至 54 行：非法，抛出 ParseException 异常。</li>
</ul>
<h3 id="3-1-4-route">3.1.4 route</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="keyword">public</span> &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; route(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation) <span class="keyword">throws</span> RpcException {</span><br /><span class="line"> <span class="number">3</span>:     <span class="comment">// 为空，直接返回空 Invoker 集合</span></span><br /><span class="line"> <span class="number">4</span>:     <span class="keyword">if</span> (invokers == <span class="keyword">null</span> || invokers.isEmpty()) {</span><br /><span class="line"> <span class="number">5</span>:         <span class="keyword">return</span> invokers;</span><br /><span class="line"> <span class="number">6</span>:     }</span><br /><span class="line"> <span class="number">7</span>:     <span class="keyword">try</span> {</span><br /><span class="line"> <span class="number">8</span>:         <span class="comment">// 不匹配 `whenCondition` ，直接返回 `invokers` 集合，因为不需要走 `whenThen` 的匹配</span></span><br /><span class="line"> <span class="number">9</span>:         <span class="keyword">if</span> (!matchWhen(url, invocation)) {</span><br /><span class="line"><span class="number">10</span>:             <span class="keyword">return</span> invokers;</span><br /><span class="line"><span class="number">11</span>:         }</span><br /><span class="line"><span class="number">12</span>:         List&lt;Invoker&lt;T&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;();</span><br /><span class="line"><span class="number">13</span>:         <span class="comment">// `whenThen` 为空，则返回空 Invoker 集合</span></span><br /><span class="line"><span class="number">14</span>:         <span class="keyword">if</span> (thenCondition == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">15</span>:             logger.warn(<span class="string">"The current consumer in the service blacklist. consumer: "</span> + NetUtils.getLocalHost() + <span class="string">", service: "</span> + url.getServiceKey());</span><br /><span class="line"><span class="number">16</span>:             <span class="keyword">return</span> result;</span><br /><span class="line"><span class="number">17</span>:         }</span><br /><span class="line"><span class="number">18</span>:         <span class="comment">// 使用 `whenThen` ，匹配 `invokers` 集合。若符合，添加到 `result` 中</span></span><br /><span class="line"><span class="number">19</span>:         <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) {</span><br /><span class="line"><span class="number">20</span>:             <span class="keyword">if</span> (matchThen(invoker.getUrl(), url)) {</span><br /><span class="line"><span class="number">21</span>:                 result.add(invoker);</span><br /><span class="line"><span class="number">22</span>:             }</span><br /><span class="line"><span class="number">23</span>:         }</span><br /><span class="line"><span class="number">24</span>:         <span class="comment">// 若 `result` 非空，返回它</span></span><br /><span class="line"><span class="number">25</span>:         <span class="keyword">if</span> (!result.isEmpty()) {</span><br /><span class="line"><span class="number">26</span>:             <span class="keyword">return</span> result;</span><br /><span class="line"><span class="number">27</span>:         <span class="comment">// 如果 `force=true` ，代表强制执行，返回空 Invoker 集合</span></span><br /><span class="line"><span class="number">28</span>:         } <span class="keyword">else</span> <span class="keyword">if</span> (force) {</span><br /><span class="line"><span class="number">29</span>:             logger.warn(<span class="string">"The route result is empty and force execute. consumer: "</span> + NetUtils.getLocalHost() + <span class="string">", service: "</span> + url.getServiceKey() + <span class="string">", router: "</span> + url.getParameterAndDecoded(Constants.RULE_KEY));</span><br /><span class="line"><span class="number">30</span>:             <span class="keyword">return</span> result;</span><br /><span class="line"><span class="number">31</span>:         }</span><br /><span class="line"><span class="number">32</span>:     } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line"><span class="number">33</span>:         logger.error(<span class="string">"Failed to execute condition router rule: "</span> + getUrl() + <span class="string">", invokers: "</span> + invokers + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br /><span class="line"><span class="number">34</span>:     }</span><br /><span class="line"><span class="number">35</span>:     <span class="comment">// 如果 `force=false` ，代表不强制执行，返回 `invokers` 集合，即忽略路由规则</span></span><br /><span class="line"><span class="number">36</span>:     <span class="keyword">return</span> invokers;</span><br /><span class="line"><span class="number">37</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 3 至 6 行：若&nbsp;<code>invokers</code>&nbsp;为空，直接返回<strong>空</strong>&nbsp;Invoker 集合。</li>
<li>
<p>第 8 至 11 行：调用&nbsp;<code>#matchWhen(url, invocation)</code>&nbsp;方法，使用服务<strong>消费者</strong>&nbsp;<code>url</code>&nbsp;匹配&nbsp;<code>whenCondition</code>&nbsp;。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matchWhen</span><span class="params">(URL url, Invocation invocation)</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> whenCondition == <span class="keyword">null</span> || whenCondition.isEmpty() || matchCondition(whenCondition, url, <span class="keyword">null</span>, invocation);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>如果匹配条件为空，表示对所有消费方应用，如：<code>=&gt; host != 10.20.153.11</code>&nbsp;。</li>
<li>若<strong>不匹配</strong>，则直接返回<strong>全</strong>&nbsp;<code>invokers</code>&nbsp;集合，因为不需要走&nbsp;<code>whenThen</code>&nbsp;的匹配。</li>
<li><code>#matchCondition(...)</code>&nbsp;方法的详细解析，见&nbsp;<a href="http://svip.iocoder.cn/Dubbo/cluster-7-impl-router/">「3.1.5 matchCondition」</a>&nbsp;。</li>
</ul>
</li>
<li>第 13 至 17 行：若&nbsp;<code>whenThen</code>&nbsp;为空，则返回<strong>空</strong>&nbsp;Invoker 集合。</li>
<li>
<p>第 18 至 23 行：<strong>循环</strong>调用&nbsp;<code>#matchThen(url, invocation)</code>&nbsp;方法，使用服务<strong>提供者者</strong>&nbsp;<code>invokers</code>&nbsp;的 URL ，匹配&nbsp;<code>whenThen</code>&nbsp;集合。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">matchThen</span><span class="params">(URL url, URL param)</span> </span>{</span><br /><span class="line">    <span class="keyword">return</span> !(thenCondition == <span class="keyword">null</span> || thenCondition.isEmpty()) &amp;&amp; matchCondition(thenCondition, url, param, <span class="keyword">null</span>);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>如果过滤条件为空，表示禁止访问，如：<code>host = 10.20.153.10 =&gt;</code>&nbsp;。</li>
<li>若<strong>匹配</strong>，添加到&nbsp;<code>result</code>&nbsp;中。</li>
</ul>
</li>
<li>========== 处理&nbsp;<code>result</code>&nbsp;+&nbsp;<code>force</code>&nbsp;的<strong>三种</strong>情况 ==========</li>
<li>第 24 至 26 行：若&nbsp;<code>result</code>&nbsp;<strong>非空</strong>，返回<strong>它</strong>。</li>
<li>第 27 至 31 行：若&nbsp;<code>result</code>&nbsp;<strong>为空</strong>，如果&nbsp;<code>force=true</code>&nbsp;，代表强制执行，返回<strong>空</strong>&nbsp;Invoker 集合。</li>
<li>第 36 行：若&nbsp;<code>result</code>&nbsp;<strong>为空</strong>，如果&nbsp;<code>force=false</code>&nbsp;，代表<strong>不</strong>强制执行，返回<strong>全</strong>&nbsp;<code>invokers</code>&nbsp;集合，即<strong>忽略</strong>路由规则。</li>
</ul>
<p>😈 情况比较多，胖友可以回过头在理一理。</p>
<h4 id="3-1-5-matchCondition">3.1.5 matchCondition</h4>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">matchCondition</span><span class="params">(Map&lt;String, MatchPair&gt; condition, URL url, URL param, Invocation invocation)</span> </span>{</span><br /><span class="line">    Map&lt;String, String&gt; sample = url.toMap();</span><br /><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>; <span class="comment">// 是否匹配</span></span><br /><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, MatchPair&gt; matchPair : condition.entrySet()) {</span><br /><span class="line">        <span class="comment">// 获得条件属性</span></span><br /><span class="line">        String key = matchPair.getKey();</span><br /><span class="line">        String sampleValue;</span><br /><span class="line">        <span class="comment">// get real invoked method name from invocation</span></span><br /><span class="line">        <span class="keyword">if</span> (invocation != <span class="keyword">null</span> &amp;&amp; (Constants.METHOD_KEY.equals(key) || Constants.METHODS_KEY.equals(key))) {</span><br /><span class="line">            sampleValue = invocation.getMethodName();</span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            sampleValue = sample.get(key);</span><br /><span class="line">            <span class="keyword">if</span> (sampleValue == <span class="keyword">null</span>) {</span><br /><span class="line">                sampleValue = sample.get(Constants.DEFAULT_KEY_PREFIX + key);</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">        <span class="comment">// 匹配条件值</span></span><br /><span class="line">        <span class="keyword">if</span> (sampleValue != <span class="keyword">null</span>) {</span><br /><span class="line">            <span class="keyword">if</span> (!matchPair.getValue().isMatch(sampleValue, param)) { <span class="comment">// 返回不匹配</span></span><br /><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br /><span class="line">            } <span class="keyword">else</span> {</span><br /><span class="line">                result = <span class="keyword">true</span>;</span><br /><span class="line">            }</span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            <span class="comment">// not pass the condition</span></span><br /><span class="line">            <span class="keyword">if</span> (!matchPair.getValue().matches.isEmpty()) { <span class="comment">// 无条件值，但是有匹配条件 `matches` ，则返回不匹配。</span></span><br /><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br /><span class="line">            } <span class="keyword">else</span> {</span><br /><span class="line">                result = <span class="keyword">true</span>;</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> result;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="3-1-5-compareTo">3.1.5 compareTo</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Router o)</span> </span>{</span><br /><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || o.getClass() != ConditionRouter.class) {</span><br /><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br /><span class="line">    }</span><br /><span class="line">    ConditionRouter c = (ConditionRouter) o;</span><br /><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.priority == c.priority ? url.toFullString().compareTo(c.url.toFullString()) : (<span class="keyword">this</span>.priority &gt; c.priority ? <span class="number">1</span> : -<span class="number">1</span>);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>优先，按照&nbsp;<code>"priority"</code>&nbsp;<strong>降序</strong>。</li>
<li>其次，按照&nbsp;<code>"url"</code>&nbsp;<strong>升序</strong>。</li>
</ul>
<h2 id="3-2-ScriptRouter">3.2 ScriptRouter</h2>
<p><code>com.alibaba.dubbo.rpc.cluster.router.script.ScriptRouter</code>&nbsp;，实现 Router 接口，基于<strong>脚本</strong>的 Router 实现类。</p>
<blockquote>
<p>脚本路由规则&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/routing-rule.html#fn_4" target="_blank" rel="external nofollow noopener noreferrer">4</a>&nbsp;支持 JDK 脚本引擎的所有脚本，比如：javascript, jruby, groovy 等，通过&nbsp;<code>type=javascript</code>&nbsp;参数设置脚本类型，缺省为 javascript。</p>
</blockquote>
<blockquote>
<figure class="highlight plain">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">&gt; "script://0.0.0.0/com.foo.BarService?category=routers&amp;dynamic=false&amp;rule=" + URL.encode("function route(invokers) { ... } (invokers)")</span><br /><span class="line">&gt;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</blockquote>
<blockquote>
<p>基于脚本引擎的路由规则，如：</p>
<figure class="highlight plain">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">&gt; function route(invokers) {</span><br /><span class="line">&gt;     var result = new java.util.ArrayList(invokers.size());</span><br /><span class="line">&gt;     for (i = 0; i &lt; invokers.size(); i ++) {</span><br /><span class="line">&gt;         if ("10.20.153.10".equals(invokers.get(i).getUrl().getHost())) {</span><br /><span class="line">&gt;             result.add(invokers.get(i));</span><br /><span class="line">&gt;         }</span><br /><span class="line">&gt;     }</span><br /><span class="line">&gt;     return result;</span><br /><span class="line">&gt; } (invokers); // 表示立即执行方法</span><br /><span class="line">&gt;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</blockquote>
<h3 id="3-2-1-构造方法">3.2.1 构造方法</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 脚本类型 与 ScriptEngine 的映射缓存</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, ScriptEngine&gt; engines = <span class="keyword">new</span> ConcurrentHashMap&lt;String, ScriptEngine&gt;();</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 路由规则 URL</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ScriptEngine engine;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 路由规则的优先级，用于排序，优先级越大越靠前执行，可不填，缺省为 0 。</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> priority;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 路由规则内容</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String rule;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 路由规则 URL</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> URL url;</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScriptRouter</span><span class="params">(URL url)</span> </span>{</span><br /><span class="line">    <span class="keyword">this</span>.url = url;</span><br /><span class="line">    String type = url.getParameter(Constants.TYPE_KEY);</span><br /><span class="line">    <span class="keyword">this</span>.priority = url.getParameter(Constants.PRIORITY_KEY, <span class="number">0</span>);</span><br /><span class="line">    String rule = url.getParameterAndDecoded(Constants.RULE_KEY);</span><br /><span class="line">    <span class="comment">// 初始化 `engine`</span></span><br /><span class="line">    <span class="keyword">if</span> (type == <span class="keyword">null</span> || type.length() == <span class="number">0</span>) {</span><br /><span class="line">        type = Constants.DEFAULT_SCRIPT_TYPE_KEY;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">if</span> (rule == <span class="keyword">null</span> || rule.length() == <span class="number">0</span>) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="keyword">new</span> IllegalStateException(<span class="string">"route rule can not be empty. rule:"</span> + rule));</span><br /><span class="line">    }</span><br /><span class="line">    ScriptEngine engine = engines.get(type);</span><br /><span class="line">    <span class="keyword">if</span> (engine == <span class="keyword">null</span>) { <span class="comment">// 在缓存中不存在，则进行创建 ScriptEngine 对象</span></span><br /><span class="line">        engine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(type);</span><br /><span class="line">        <span class="keyword">if</span> (engine == <span class="keyword">null</span>) {</span><br /><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="keyword">new</span> IllegalStateException(<span class="string">"Unsupported route rule type: "</span> + type + <span class="string">", rule: "</span> + rule));</span><br /><span class="line">        }</span><br /><span class="line">        engines.put(type, engine);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">this</span>.engine = engine;</span><br /><span class="line">    <span class="keyword">this</span>.rule = rule;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="3-2-2-route">3.2.2 route</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="keyword">public</span> &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; route(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation) <span class="keyword">throws</span> RpcException {</span><br /><span class="line">    <span class="keyword">try</span> {</span><br /><span class="line">        <span class="comment">// 执行脚本</span></span><br /><span class="line">        List&lt;Invoker&lt;T&gt;&gt; invokersCopy = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;(invokers);</span><br /><span class="line">        Compilable compilable = (Compilable) engine;</span><br /><span class="line">        Bindings bindings = engine.createBindings();</span><br /><span class="line">        bindings.put(<span class="string">"invokers"</span>, invokersCopy);</span><br /><span class="line">        bindings.put(<span class="string">"invocation"</span>, invocation);</span><br /><span class="line">        bindings.put(<span class="string">"context"</span>, RpcContext.getContext());</span><br /><span class="line">        CompiledScript function = compilable.compile(rule); <span class="comment">// 编译</span></span><br /><span class="line">        Object obj = function.eval(bindings); <span class="comment">// 执行</span></span><br /><span class="line">        <span class="comment">// 根据结果类型，转换成 (List&lt;Invoker&lt;T&gt;&gt; 类型返回</span></span><br /><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Invoker[]) {</span><br /><span class="line">            invokersCopy = Arrays.asList((Invoker&lt;T&gt;[]) obj);</span><br /><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Object[]) {</span><br /><span class="line">            invokersCopy = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;();</span><br /><span class="line">            <span class="keyword">for</span> (Object inv : (Object[]) obj) {</span><br /><span class="line">                invokersCopy.add((Invoker&lt;T&gt;) inv);</span><br /><span class="line">            }</span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            invokersCopy = (List&lt;Invoker&lt;T&gt;&gt;) obj;</span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">return</span> invokersCopy;</span><br /><span class="line">    } <span class="keyword">catch</span> (ScriptException e) {</span><br /><span class="line">        <span class="comment">// 发生异常，忽略路由规则，返回全 `invokers` 集合</span></span><br /><span class="line">        logger.error(<span class="string">"route error , rule has been ignored. rule: "</span> + rule + <span class="string">", method:"</span> + invocation.getMethodName() + <span class="string">", url: "</span> + RpcContext.getContext().getUrl(), e);</span><br /><span class="line">        <span class="keyword">return</span> invokers;</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>🙂 比较易懂，胖友自己看代码注释。</li>
</ul>
<h3 id="3-2-3-compareTo">3.2.3 compareTo</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Router o)</span> </span>{</span><br /><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || o.getClass() != ScriptRouter.class) {</span><br /><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br /><span class="line">    }</span><br /><span class="line">    ScriptRouter c = (ScriptRouter) o;</span><br /><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.priority == c.priority ? rule.compareTo(c.rule) : (<span class="keyword">this</span>.priority &gt; c.priority ? <span class="number">1</span> : -<span class="number">1</span>);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>优先，按照&nbsp;<code>"priority"</code>&nbsp;<strong>降序</strong>。</li>
<li>其次，按照&nbsp;<code>"rule"</code>&nbsp;<strong>升序</strong>。</li>
</ul>
<h2 id="3-3-MockInvokersSelector">3.3 MockInvokersSelector</h2>
<p>详细解析，见&nbsp;<a href="http://svip.iocoder.cn/Dubbo/cluster-8-impl-mock/?self">《精尽 Dubbo 源码解析 &mdash;&mdash; 集群容错（八）之 Mock 实现》</a>&nbsp;。</p>
<h1 id="4-集成-Router-模块">4. 集成 Router 模块</h1>
<p>如下图所示，我们可以看到，有<strong>二个类</strong>，调用&nbsp;<code>Router#route(List&lt;Invoker&lt;T&gt;&gt;, URL, Invocation)</code>&nbsp;方法，集成 Router 模块。</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_04_30/01.png" alt="集成" /></p>
<h2 id="4-1-AbstractDirectory">4.1 AbstractDirectory</h2>
<h3 id="4-1-1-setRouters">4.1.1 setRouters</h3>
<p><code>#setRouters(List&lt;Router&gt; routers)</code>&nbsp;方法，设置路由规则们。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setRouters</span><span class="params">(List&lt;Router&gt; routers)</span> </span>{</span><br /><span class="line"> <span class="number">2</span>:     <span class="comment">// copy list // 复制 routers ，因为下面要修改</span></span><br /><span class="line"> <span class="number">3</span>:     routers = routers == <span class="keyword">null</span> ? <span class="keyword">new</span> ArrayList&lt;Router&gt;() : <span class="keyword">new</span> ArrayList&lt;Router&gt;(routers);</span><br /><span class="line"> <span class="number">4</span>:     <span class="comment">// append url router</span></span><br /><span class="line"> <span class="number">5</span>:     <span class="comment">// 拼接 `url` 中，配置的路由规则</span></span><br /><span class="line"> <span class="number">6</span>:     String routerkey = url.getParameter(Constants.ROUTER_KEY);</span><br /><span class="line"> <span class="number">7</span>:     <span class="keyword">if</span> (routerkey != <span class="keyword">null</span> &amp;&amp; routerkey.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">8</span>:         RouterFactory routerFactory = ExtensionLoader.getExtensionLoader(RouterFactory.class).getExtension(routerkey);</span><br /><span class="line"> <span class="number">9</span>:         routers.add(routerFactory.getRouter(url));</span><br /><span class="line"><span class="number">10</span>:     }</span><br /><span class="line"><span class="number">11</span>:     <span class="comment">// append mock invoker selector</span></span><br /><span class="line"><span class="number">12</span>:     routers.add(<span class="keyword">new</span> MockInvokersSelector());</span><br /><span class="line"><span class="number">13</span>:     <span class="comment">// 排序</span></span><br /><span class="line"><span class="number">14</span>:     Collections.sort(routers);</span><br /><span class="line"><span class="number">15</span>:     <span class="comment">// 赋值给属性</span></span><br /><span class="line"><span class="number">16</span>:     <span class="keyword">this</span>.routers = routers;</span><br /><span class="line"><span class="number">17</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 3 行：复制重新创建&nbsp;<code>routers</code>&nbsp;数组，因为下面会进行修改。</li>
<li>
<p>第 5 至 10 行：添加<code>url</code>&nbsp;中<strong>配置的路由规则</strong>到&nbsp;<code>routers</code>&nbsp;中。例如：</p>
<figure class="highlight xml">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">id</span>=<span class="string">"zk01"</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"router"</span> <span class="attr">value</span>=<span class="string">"file"</span> /&gt;</span></span><br /><span class="line">    <span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"rule"</span> <span class="attr">value</span>=<span class="string">"/Users/yunai/xxx.js"</span> /&gt;</span></span><br /><span class="line"><span class="tag">&lt;/<span class="name">dubbo:registry</span>&gt;</span></span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>受限于 XML 对字符的限制，<code>"condition"</code>&nbsp;或&nbsp;<code>"script"</code>&nbsp;类型的路由配置会比较难设置。所以笔者认为，如果是使用 XML 配置路由规则，<code>"file"</code>&nbsp;类型是比较合适的方式。当然，如果使用 Java API 又或者注解的方式，应该不存在这样的问题。</li>
</ul>
</li>
<li>第 12 行：添加&nbsp;<strong>MockInvokersSelector</strong>&nbsp;到&nbsp;<code>routers</code>&nbsp;中。</li>
<li>第 14 行：排序&nbsp;<code>routers</code>&nbsp;。</li>
<li>第 16 行：<strong>赋值属性</strong>给 AbstractDirectory 。</li>
</ul>
<h3 id="4-1-2-list">4.1.2 list</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="keyword">public</span> List&lt;Invoker&lt;T&gt;&gt; list(Invocation invocation) <span class="keyword">throws</span> RpcException {</span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">if</span> (destroyed) {</span><br /><span class="line"> <span class="number">4</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Directory already destroyed .url: "</span> + getUrl());</span><br /><span class="line"> <span class="number">5</span>:     }</span><br /><span class="line"> <span class="number">6</span>:     <span class="comment">// 获得所有 Invoker 集合</span></span><br /><span class="line"> <span class="number">7</span>:     List&lt;Invoker&lt;T&gt;&gt; invokers = doList(invocation);</span><br /><span class="line"> <span class="number">8</span>:     <span class="comment">// 根据路由规则，筛选 Invoker 集合</span></span><br /><span class="line"> <span class="number">9</span>:     List&lt;Router&gt; localRouters = <span class="keyword">this</span>.routers; <span class="comment">// local reference 本地引用，避免并发问题</span></span><br /><span class="line"><span class="number">10</span>:     <span class="keyword">if</span> (localRouters != <span class="keyword">null</span> &amp;&amp; !localRouters.isEmpty()) {</span><br /><span class="line"><span class="number">11</span>:         <span class="keyword">for</span> (Router router : localRouters) {</span><br /><span class="line"><span class="number">12</span>:             <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">13</span>:                 <span class="keyword">if</span> (router.getUrl() == <span class="keyword">null</span> || router.getUrl().getParameter(Constants.RUNTIME_KEY, <span class="keyword">false</span>)) {</span><br /><span class="line"><span class="number">14</span>:                     invokers = router.route(invokers, getConsumerUrl(), invocation);</span><br /><span class="line"><span class="number">15</span>:                 }</span><br /><span class="line"><span class="number">16</span>:             } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line"><span class="number">17</span>:                 logger.error(<span class="string">"Failed to execute router: "</span> + getUrl() + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br /><span class="line"><span class="number">18</span>:             }</span><br /><span class="line"><span class="number">19</span>:         }</span><br /><span class="line"><span class="number">20</span>:     }</span><br /><span class="line"><span class="number">21</span>:     <span class="keyword">return</span> invokers;</span><br /><span class="line"><span class="number">22</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 8 至 20 行：<strong>循环</strong>，调用&nbsp;<code>Router#route(invokers, url, invocation)</code>&nbsp;方法，不断路由，筛选<strong>匹配的</strong>Invoker 集合。
<ul>
<li>第 13 行：判断&nbsp;<code>"runtime"</code>&nbsp;为&nbsp;<strong>true</strong>&nbsp;才执行：是否在每次调用时执行路由规则，<strong>否则只在提供者地址列表变更时预先执行并缓存结果</strong>，调用时直接从缓存中获取路由结果。如果用了参数路由，必须设为&nbsp;<code>true</code>，需要注意设置会影响调用的性能，可不填，缺省为&nbsp;<code>flase</code>。</li>
</ul>
</li>
</ul>
<h2 id="4-2-RegistryDirectory">4.2 RegistryDirectory</h2>
<h3 id="4-2-1-notify">4.2.1 notify</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(List&lt;URL&gt; urls)</span> </span>{</span><br /><span class="line"> <span class="number">3</span>:     <span class="comment">// 【省略无关代码】根据 URL 的分类或协议，分组成三个集合 。</span></span><br /><span class="line"> <span class="number">4</span>:     List&lt;URL&gt; invokerUrls = <span class="keyword">new</span> ArrayList&lt;URL&gt;(); <span class="comment">// 服务提供者 URL 集合</span></span><br /><span class="line"> <span class="number">5</span>:     List&lt;URL&gt; routerUrls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br /><span class="line"> <span class="number">6</span>:     List&lt;URL&gt; configuratorUrls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br /><span class="line"> <span class="number">7</span>:     </span><br /><span class="line"> <span class="number">8</span>:     <span class="comment">//  【省略无关代码】处理配置规则 URL 集合</span></span><br /><span class="line"> <span class="number">9</span>:     <span class="comment">// configurators</span></span><br /><span class="line"><span class="number">10</span>: </span><br /><span class="line"><span class="number">11</span>:     <span class="comment">// 处理路由规则 URL 集合</span></span><br /><span class="line"><span class="number">12</span>:     <span class="keyword">if</span> (!routerUrls.isEmpty()) {</span><br /><span class="line"><span class="number">13</span>:         List&lt;Router&gt; routers = toRouters(routerUrls);</span><br /><span class="line"><span class="number">14</span>:         <span class="keyword">if</span> (routers != <span class="keyword">null</span>) { <span class="comment">// null - do nothing</span></span><br /><span class="line"><span class="number">15</span>:             setRouters(routers);</span><br /><span class="line"><span class="number">16</span>:         }</span><br /><span class="line"><span class="number">17</span>:     }</span><br /><span class="line"><span class="number">18</span>:     </span><br /><span class="line"><span class="number">19</span>:     <span class="comment">//  【省略无关代码】合并配置规则，到 `directoryUrl` 中，形成 `overrideDirectoryUrl` 变量。</span></span><br /><span class="line"><span class="number">20</span>:     <span class="comment">//  【省略无关代码】处理服务提供者 URL 集合</span></span><br /><span class="line"><span class="number">21</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 12 行：若注册中心通知的&nbsp;<code>routerUrls</code>&nbsp;非空，进行处理&nbsp;<code>routerUrls</code>&nbsp;集合。</li>
<li>
<p>第 13 行：调用&nbsp;<code>#toRouters(routerUrls)</code>&nbsp;方法，将路由规则 URL 集合，<strong>转换</strong>成对应的 Router 集合。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Router&gt; <span class="title">toRouters</span><span class="params">(List&lt;URL&gt; urls)</span> </span>{</span><br /><span class="line">    List&lt;Router&gt; routers = <span class="keyword">new</span> ArrayList&lt;Router&gt;();</span><br /><span class="line">    <span class="keyword">if</span> (urls == <span class="keyword">null</span> || urls.isEmpty()) {</span><br /><span class="line">        <span class="keyword">return</span> routers;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">for</span> (URL url : urls) {</span><br /><span class="line">        <span class="comment">// 忽略，若是 "empty://" 。一般情况下，所有路由规则被删除时，有且仅有一条协议为 "empty://" 的路由规则 URL</span></span><br /><span class="line">        <span class="keyword">if</span> (Constants.EMPTY_PROTOCOL.equals(url.getProtocol())) {</span><br /><span class="line">            <span class="keyword">continue</span>;</span><br /><span class="line">        }</span><br /><span class="line">        <span class="comment">// 获得 "router"</span></span><br /><span class="line">        String routerType = url.getParameter(Constants.ROUTER_KEY);</span><br /><span class="line">        <span class="keyword">if</span> (routerType != <span class="keyword">null</span> &amp;&amp; routerType.length() &gt; <span class="number">0</span>) {</span><br /><span class="line">            url = url.setProtocol(routerType);</span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">try</span> {</span><br /><span class="line">            <span class="comment">// 创建 Router 对象</span></span><br /><span class="line">            Router router = routerFactory.getRouter(url);</span><br /><span class="line">            <span class="comment">// 添加到返回结果</span></span><br /><span class="line">            <span class="keyword">if</span> (!routers.contains(router)) {</span><br /><span class="line">                routers.add(router);</span><br /><span class="line">            }</span><br /><span class="line">        } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line">            logger.error(<span class="string">"convert router url to router error, url: "</span> + url, t);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> routers;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>代码易懂，胖友看下注释理解。</li>
</ul>
</li>
<li>
<p>第 14 至 16 行：<code>routers</code>&nbsp;集合非&nbsp;<strong>null</strong>( 允许集合大小为&nbsp;<strong>0</strong>&nbsp;)，调用&nbsp;<code>#setRouters(routers)</code>&nbsp;方法，设置路由规则集合，即&nbsp;<a href="http://svip.iocoder.cn/Dubbo/cluster-7-impl-router/">「4.1.1 setRouters」</a>&nbsp;。</p>
</li>
</ul>
<h3 id="4-2-2-toMethodInvokers">4.2.2 toMethodInvokers</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">private</span> Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; toMethodInvokers(Map&lt;String, Invoker&lt;T&gt;&gt; invokersMap) {</span><br /><span class="line"> <span class="number">2</span>:     <span class="comment">// 创建新的 `methodInvokerMap`</span></span><br /><span class="line"> <span class="number">3</span>:     Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; newMethodInvokerMap = <span class="keyword">new</span> HashMap&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt;();</span><br /><span class="line"> <span class="number">4</span>:     <span class="comment">// 创建 Invoker 集合</span></span><br /><span class="line"> <span class="number">5</span>:     List&lt;Invoker&lt;T&gt;&gt; invokersList = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;();</span><br /><span class="line"> <span class="number">6</span>:     <span class="comment">//  【省略无关代码】按服务提供者 URL 所声明的 methods 分类，兼容注册中心执行路由过滤掉的 methods</span></span><br /><span class="line"> <span class="number">7</span>:     <span class="comment">// 路由全 `invokersList` ，匹配合适的 Invoker 集合</span></span><br /><span class="line"> <span class="number">8</span>:     List&lt;Invoker&lt;T&gt;&gt; newInvokersList = route(invokersList, <span class="keyword">null</span>);</span><br /><span class="line"> <span class="number">9</span>:     <span class="comment">// 添加 `newInvokersList` 到 `newMethodInvokerMap` 中，表示该服务提供者的全量 Invoker 集合</span></span><br /><span class="line"><span class="number">10</span>:     newMethodInvokerMap.put(Constants.ANY_VALUE, newInvokersList);</span><br /><span class="line"><span class="number">11</span>:     <span class="comment">// 循环，基于每个方法路由，匹配合适的 Invoker 集合</span></span><br /><span class="line"><span class="number">12</span>:     <span class="keyword">if</span> (serviceMethods != <span class="keyword">null</span> &amp;&amp; serviceMethods.length &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">13</span>:         <span class="keyword">for</span> (String method : serviceMethods) {</span><br /><span class="line"><span class="number">14</span>:             List&lt;Invoker&lt;T&gt;&gt; methodInvokers = newMethodInvokerMap.get(method);</span><br /><span class="line"><span class="number">15</span>:             <span class="keyword">if</span> (methodInvokers == <span class="keyword">null</span> || methodInvokers.isEmpty()) {</span><br /><span class="line"><span class="number">16</span>:                 methodInvokers = newInvokersList;</span><br /><span class="line"><span class="number">17</span>:             }</span><br /><span class="line"><span class="number">18</span>:             newMethodInvokerMap.put(method, route(methodInvokers, method));</span><br /><span class="line"><span class="number">19</span>:         }</span><br /><span class="line"><span class="number">20</span>:     }</span><br /><span class="line"><span class="number">21</span>:     <span class="comment">// 【省略无关代码】循环排序每个方法的 Invoker 集合，并设置为不可变</span></span><br /><span class="line"><span class="number">22</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p>第 8 行：调用&nbsp;<code>#route(invokers, method)</code>&nbsp;方法，路由<strong>全</strong>&nbsp;<code>invokersList</code>&nbsp;，匹配合适的 Invoker 集合<strong>进行缓存</strong>，这就是上文提到的&ldquo;<em>只在提供者地址列表变更时预先执行并缓存结果</em>&rdquo;。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">private</span> List&lt;Invoker&lt;T&gt;&gt; route(List&lt;Invoker&lt;T&gt;&gt; invokers, String method) {</span><br /><span class="line">    <span class="comment">// 创建 Invocation 对象</span></span><br /><span class="line">    Invocation invocation = <span class="keyword">new</span> RpcInvocation(method, <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br /><span class="line">    <span class="comment">// 获得 Router 数组</span></span><br /><span class="line">    List&lt;Router&gt; routers = getRouters();</span><br /><span class="line">    <span class="comment">// 根据路由规则，筛选 Invoker 集合</span></span><br /><span class="line">    <span class="keyword">if</span> (routers != <span class="keyword">null</span>) {</span><br /><span class="line">        <span class="keyword">for</span> (Router router : routers) {</span><br /><span class="line">            <span class="keyword">if</span> (router.getUrl() != <span class="keyword">null</span>) {</span><br /><span class="line">                invokers = router.route(invokers, getConsumerUrl(), invocation);</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> invokers;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>主要是调用&nbsp;<code>Router#route(...)</code>&nbsp;方法，路由。</li>
</ul>
</li>
<li>
<p>第 11 至 20 行：<strong>循环</strong>，调用&nbsp;<code>#route(invokers, method)</code>&nbsp;方法，路由<strong>每个方法</strong>的&nbsp;<code>methodInvokers</code>&nbsp;，匹配合适的 Invoker 集合<strong>进行缓存</strong>。</p>
</li>
</ul>
</div>