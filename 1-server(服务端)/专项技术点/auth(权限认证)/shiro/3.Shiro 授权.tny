<div id="pro-mian-header">
<div class="content-top">
<h1>Shiro 授权</h1>
</div>
<div class="kn-infomation">由&nbsp;北公爵无欢&nbsp;创建， 最后一次修改&nbsp;2016-08-12 21:19:53</div>
</div>
<div class="content-bg">
<div class="content-intro view-box ">
<div class="wkcontent">
<h2>授权</h2>
<p>授权，也叫访问控制，即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。</p>
<p><strong>主体</strong><br />主体，即访问应用的用户，在 Shiro 中使用 Subject 代表该用户。用户只有授权后才允许访问相应的资源。</p>
<p><strong>资源</strong><br />在应用中用户可以访问的任何东西，比如访问 JSP 页面、查看/编辑某些数据、访问某个业务方法、打印文本等等都是资源。用户只要授权后才能访问。</p>
<p><strong>权限</strong><br />安全策略中的原子授权单位，通过权限我们可以表示在应用中用户有没有操作某个资源的权力。即权限表示在应用中用户能不能访问某个资源，如： 访问用户列表页面<br />查看/新增/修改/删除用户数据（即很多时候都是 CRUD（增查改删）式权限控制）<br />打印文档等等。。。</p>
<p>如上可以看出，权限代表了用户有没有操作某个资源的权利，即反映在某个资源上的操作允不允许，不反映谁去执行这个操作。所以后续还需要把权限赋予给用户，即定义哪个用户允许在某个资源上做什么操作（权限），Shiro 不会去做这件事情，而是由实现人员提供。</p>
<p>Shiro 支持粗粒度权限（如用户模块的所有权限）和细粒度权限（操作某个用户的权限，即实例级别的），后续部分介绍。</p>
<p><strong>角色</strong><br />角色代表了操作集合，可以理解为权限的集合，一般情况下我们会赋予用户角色而不是权限，即这样用户可以拥有一组权限，赋予权限时比较方便。典型的如：项目经理、技术总监、CTO、开发工程师等都是角色，不同的角色拥有一组不同的权限。</p>
<p><strong>隐式角色</strong>：<br />即直接通过角色来验证用户有没有操作权限，如在应用中 CTO、技术总监、开发工程师可以使用打印机，假设某天不允许开发工程师使用打印机，此时需要从应用中删除相应代码；再如在应用中 CTO、技术总监可以查看用户、查看权限；突然有一天不允许技术总监查看用户、查看权限了，需要在相关代码中把技术总监角色从判断逻辑中删除掉；即粒度是以角色为单位进行访问控制的，粒度较粗；如果进行修改可能造成多处代码修改。</p>
<p><strong>显示角色</strong>：<br />在程序中通过权限控制谁能访问某个资源，角色聚合一组权限集合；这样假设哪个角色不能访问某个资源，只需要从角色代表的权限集合中移除即可；无须修改多处代码；即粒度是以资源/实例为单位的；粒度较细。</p>
<p>请 google 搜索&ldquo;RBAC&rdquo;和&ldquo;RBAC新解&rdquo;分别了解&ldquo;基于角色的访问控制&rdquo;&ldquo;基于资源的访问控制(Resource-Based Access Control)&rdquo;。</p>
<h2 class="head2">授权方式</h2>
<p>Shiro 支持三种方式的授权：</p>
<p>编程式：通过写 if/else 授权代码块完成：</p>
<pre><code class="hljs javascript">Subject subject = SecurityUtils.getSubject();
<span class="hljs-keyword">if</span>(subject.hasRole(&ldquo;admin&rdquo;)) {
    <span class="hljs-comment">//有权限</span>
} <span class="hljs-keyword">else</span> {
    <span class="hljs-comment">//无权限</span>
}&amp;nbsp;</code></pre>
<p>注解式：通过在执行的 Java 方法上放置相应的注解完成：</p>
<pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles</span>(<span class="hljs-string">"admin"</span>)
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-comment">//有权限</span>
}&amp;nbsp;</code></pre>
<p>没有权限将抛出相应的异常；</p>
<p>JSP/GSP 标签：在 JSP/GSP 页面通过相应的标签完成：</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">shiro:hasRole</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"admin"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">!&mdash;</span> 有权限 &mdash;&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">shiro:hasRole</span>&gt;</span>&amp;nbsp;</code></pre>
<p>后续部分将详细介绍如何使用。</p>
<h2 class="head2">授权</h2>
<p><strong>基于角色的访问控制（隐式角色）</strong></p>
<p>1、在 ini 配置文件配置用户拥有的角色（shiro-role.ini）</p>
<pre><code class="hljs ini"><span class="hljs-section">[users]</span>
<span class="hljs-attr">zhang</span>=<span class="hljs-number">123</span>,role1,role2
<span class="hljs-attr">wang</span>=<span class="hljs-number">123</span>,role1&amp;nbsp;</code></pre>
<p>规则即：&ldquo;用户名=密码,角色1，角色2&rdquo;，如果需要在应用中判断用户是否有相应角色，就需要在相应的 Realm 中返回角色信息，也就是说 Shiro 不负责维护用户-角色信息，需要应用提供，Shiro 只是提供相应的接口方便验证，后续会介绍如何动态的获取用户角色。</p>
<p>2、测试用例（com.github.zhangkaitao.shiro.chapter3.RoleTest）</p>
<pre><code class="hljs java">    <span class="hljs-meta">@Test</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testHasRole</span><span class="hljs-params">()</span> </span>{
        login(<span class="hljs-string">"classpath:shiro-role.ini"</span>, <span class="hljs-string">"zhang"</span>, <span class="hljs-string">"123"</span>);
        <span class="hljs-comment">//判断拥有角色：role1</span>
        Assert.assertTrue(subject().hasRole(<span class="hljs-string">"role1"</span>));
        <span class="hljs-comment">//判断拥有角色：role1 and role2</span>
        Assert.assertTrue(subject().hasAllRoles(Arrays.asList(<span class="hljs-string">"role1"</span>, <span class="hljs-string">"role2"</span>)));
        <span class="hljs-comment">//判断拥有角色：role1 and role2 and !role3</span>
        <span class="hljs-keyword">boolean</span>[] result = subject().hasRoles(Arrays.asList(<span class="hljs-string">"role1"</span>, <span class="hljs-string">"role2"</span>, <span class="hljs-string">"role3"</span>));
        Assert.assertEquals(<span class="hljs-keyword">true</span>, result[<span class="hljs-number">0</span>]);
        Assert.assertEquals(<span class="hljs-keyword">true</span>, result[<span class="hljs-number">1</span>]);
        Assert.assertEquals(<span class="hljs-keyword">false</span>, result[<span class="hljs-number">2</span>]);
    }&amp;nbsp;</code></pre>
<p>Shiro 提供了 hasRole/hasRole 用于判断用户是否拥有某个角色/某些权限；但是没有提供如 hashAnyRole 用于判断是否有某些权限中的某一个。</p>
<pre><code class="hljs cpp">    @Test(expected = UnauthorizedException.<span class="hljs-keyword">class</span>)
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCheckRole</span><span class="hljs-params">()</span> </span>{
        login(<span class="hljs-string">"classpath:shiro-role.ini"</span>, <span class="hljs-string">"zhang"</span>, <span class="hljs-string">"123"</span>);
        <span class="hljs-comment">//断言拥有角色：role1</span>
        subject().checkRole(<span class="hljs-string">"role1"</span>);
        <span class="hljs-comment">//断言拥有角色：role1 and role3 失败抛出异常</span>
        subject().checkRoles(<span class="hljs-string">"role1"</span>, <span class="hljs-string">"role3"</span>);
    }&amp;nbsp;</code></pre>
<p>Shiro 提供的 checkRole/checkRoles 和 hasRole/hasAllRoles 不同的地方是它在判断为假的情况下会抛出 UnauthorizedException 异常。</p>
<p>到此基于角色的访问控制（即隐式角色）就完成了，这种方式的缺点就是如果很多地方进行了角色判断，但是有一天不需要了那么就需要修改相应代码把所有相关的地方进行删除；这就是粗粒度造成的问题。</p>
<p><strong>基于资源的访问控制（显示角色）</strong></p>
<p>1、在 ini 配置文件配置用户拥有的角色及角色-权限关系（shiro-permission.ini）</p>
<pre><code class="hljs ini"><span class="hljs-section">[users]</span>
<span class="hljs-attr">zhang</span>=<span class="hljs-number">123</span>,role1,role2
<span class="hljs-attr">wang</span>=<span class="hljs-number">123</span>,role1
<span class="hljs-section">[roles]</span>
<span class="hljs-attr">role1</span>=user:create,user:update
<span class="hljs-attr">role2</span>=user:create,user:delete&amp;nbsp;</code></pre>
<p>规则：&ldquo;用户名=密码，角色 1，角色 2&rdquo;&ldquo;角色=权限 1，权限 2&rdquo;，即首先根据用户名找到角色，然后根据角色再找到权限；即角色是权限集合；Shiro 同样不进行权限的维护，需要我们通过 Realm 返回相应的权限信息。只需要维护&ldquo;用户&mdash;&mdash;角色&rdquo;之间的关系即可。</p>
<p>2、测试用例（com.github.zhangkaitao.shiro.chapter3.PermissionTest）</p>
<pre><code class="hljs java">    <span class="hljs-meta">@Test</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIsPermitted</span><span class="hljs-params">()</span> </span>{
        login(<span class="hljs-string">"classpath:shiro-permission.ini"</span>, <span class="hljs-string">"zhang"</span>, <span class="hljs-string">"123"</span>);
        <span class="hljs-comment">//判断拥有权限：user:create</span>
        Assert.assertTrue(subject().isPermitted(<span class="hljs-string">"user:create"</span>));
        <span class="hljs-comment">//判断拥有权限：user:update and user:delete</span>
        Assert.assertTrue(subject().isPermittedAll(<span class="hljs-string">"user:update"</span>, <span class="hljs-string">"user:delete"</span>));
        <span class="hljs-comment">//判断没有权限：user:view</span>
        Assert.assertFalse(subject().isPermitted(<span class="hljs-string">"user:view"</span>));
    }&amp;nbsp;</code></pre>
<p>Shiro 提供了 isPermitted 和 isPermittedAll 用于判断用户是否拥有某个权限或所有权限，也没有提供如 isPermittedAny 用于判断拥有某一个权限的接口。</p>
<pre><code class="hljs cpp">    @Test(expected = UnauthorizedException.<span class="hljs-keyword">class</span>)
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCheckPermission</span> <span class="hljs-params">()</span> </span>{
        login(<span class="hljs-string">"classpath:shiro-permission.ini"</span>, <span class="hljs-string">"zhang"</span>, <span class="hljs-string">"123"</span>);
        <span class="hljs-comment">//断言拥有权限：user:create</span>
        subject().checkPermission(<span class="hljs-string">"user:create"</span>);
        <span class="hljs-comment">//断言拥有权限：user:delete and user:update</span>
        subject().checkPermissions(<span class="hljs-string">"user:delete"</span>, <span class="hljs-string">"user:update"</span>);
        <span class="hljs-comment">//断言拥有权限：user:view 失败抛出异常</span>
        subject().checkPermissions(<span class="hljs-string">"user:view"</span>);
    }&amp;nbsp;</code></pre>
<p>但是失败的情况下会抛出 UnauthorizedException 异常。</p>
<p>到此基于资源的访问控制（显示角色）就完成了，也可以叫基于权限的访问控制，这种方式的一般规则是&ldquo;资源标识符：操作&rdquo;，即是资源级别的粒度；这种方式的好处就是如果要修改基本都是一个资源级别的修改，不会对其他模块代码产生影响，粒度小。但是实现起来可能稍微复杂点，需要维护&ldquo;用户&mdash;&mdash;角色，角色&mdash;&mdash;权限（资源：操作）&rdquo;之间的关系。</p>
<h2 class="head2">Permission</h2>
<h3>字符串通配符权限</h3>
<p>规则：&ldquo;资源标识符：操作：对象实例 ID&rdquo; 即对哪个资源的哪个实例可以进行什么操作。其默认支持通配符权限字符串，&ldquo;:&rdquo;表示资源/操作/实例的分割；&ldquo;,&rdquo;表示操作的分割；&ldquo;*&rdquo;表示任意资源/操作/实例。</p>
<p><strong>1、单个资源单个权限</strong></p>
<p><code>subject().checkPermissions("system:user:update");</code></p>
<p>用户拥有资源&ldquo;system:user&rdquo;的&ldquo;update&rdquo;权限。</p>
<p><strong>2、单个资源多个权限</strong></p>
<p><code>role41=system:user:update,system:user:delete</code></p>
<p>然后通过如下代码判断</p>
<p><code>subject().checkPermissions("system:user:update", "system:user:delete");</code></p>
<p>用户拥有资源&ldquo;system:user&rdquo;的&ldquo;update&rdquo;和&ldquo;delete&rdquo;权限。如上可以简写成：</p>
<p>ini 配置（表示角色4拥有 system:user 资源的 update 和 delete 权限）</p>
<p><code>role42="system:user:update,delete"</code></p>
<p>接着可以通过如下代码判断</p>
<p><code>subject().checkPermissions("system:user:update,delete");</code></p>
<p>通过&ldquo;system:user:update,delete&rdquo;验证&ldquo;system:user:update, system:user:delete&rdquo;是没问题的，但是反过来是规则不成立。</p>
<p><strong>3、单个资源全部权限</strong></p>
<p>ini 配置</p>
<p><code>role51="system:user:create,update,delete,view"</code></p>
<p>然后通过如下代码判断</p>
<p><code>subject().checkPermissions("system:user:create,delete,update:view");</code></p>
<p>用户拥有资源&ldquo;system:user&rdquo;的&ldquo;create&rdquo;、&ldquo;update&rdquo;、&ldquo;delete&rdquo;和&ldquo;view&rdquo;所有权限。如上可以简写成：</p>
<p>ini 配置文件（表示角色 5 拥有 system:user 的所有权限）</p>
<p><code>role52=system:user:*</code></p>
<p>也可以简写为（推荐上边的写法）：</p>
<p><code>role53=system:user</code></p>
<p>然后通过如下代码判断</p>
<pre><code class="hljs css"><span class="hljs-selector-tag">subject</span>()<span class="hljs-selector-class">.checkPermissions</span>("<span class="hljs-selector-tag">system</span><span class="hljs-selector-pseudo">:user</span>:*");
<span class="hljs-selector-tag">subject</span>()<span class="hljs-selector-class">.checkPermissions</span>("<span class="hljs-selector-tag">system</span><span class="hljs-selector-pseudo">:user")</span>;&amp;<span class="hljs-selector-tag">nbsp</span>;</code></pre>
<p>通过&ldquo;system:user:*&rdquo;验证&ldquo;system:user:create,delete,update:view&rdquo;可以，但是反过来是不成立的。</p>
<p><strong>4、所有资源全部权限</strong></p>
<p>ini 配置</p>
<p><code>role61=*:view</code></p>
<p>然后通过如下代码判断</p>
<p><code>subject().checkPermissions("user:view");</code></p>
<p>用户拥有所有资源的&ldquo;view&rdquo;所有权限。假设判断的权限是&ldquo;"system:user:view&rdquo;，那么需要&ldquo;role5=<em>:</em>:view&rdquo;这样写才行</p>
<p><strong>5、实例级别的权限</strong></p>
<ul>
<li>单个实例单个权限</li>
</ul>
<p>ini 配置</p>
<p><code>role71=user:view:1</code></p>
<p>对资源 user 的 1 实例拥有 view 权限。</p>
<p>然后通过如下代码判断</p>
<p><code>subject().checkPermissions("user:view:1");</code></p>
<ul>
<li>单个实例多个权限</li>
</ul>
<p>ini 配置</p>
<p><code>role72="user:update,delete:1"</code></p>
<p>对资源 user 的 1 实例拥有 update、delete 权限。</p>
<p>然后通过如下代码判断</p>
<pre><code class="hljs css"><span class="hljs-selector-tag">subject</span>()<span class="hljs-selector-class">.checkPermissions</span>("<span class="hljs-selector-tag">user</span><span class="hljs-selector-pseudo">:delete</span>,<span class="hljs-selector-tag">update</span><span class="hljs-selector-pseudo">:1")</span>;
<span class="hljs-selector-tag">subject</span>()<span class="hljs-selector-class">.checkPermissions</span>("<span class="hljs-selector-tag">user</span><span class="hljs-selector-pseudo">:update</span><span class="hljs-selector-pseudo">:1"</span>, "<span class="hljs-selector-tag">user</span><span class="hljs-selector-pseudo">:delete</span><span class="hljs-selector-pseudo">:1")</span>;&amp;<span class="hljs-selector-tag">nbsp</span>;</code></pre>
<ul>
<li>单个实例所有权限</li>
</ul>
<p>ini 配置</p>
<p><code>role73=user:*:1</code></p>
<p>对资源 user 的 1 实例拥有所有权限。</p>
<p>然后通过如下代码判断</p>
<p><code>subject().checkPermissions("user:update:1", "user:delete:1", "user:view:1");</code></p>
<ul>
<li>所有实例单个权限</li>
</ul>
<p>ini 配置</p>
<p><code>role74=user:auth:*</code></p>
<p>对资源 user 的 1 实例拥有所有权限。</p>
<p>然后通过如下代码判断</p>
<p><code>subject().checkPermissions("user:auth:1", "user:auth:2");</code></p>
<ul>
<li>所有实例所有权限</li>
</ul>
<p>ini 配置</p>
<p><code>role75=user:*:*</code></p>
<p>对资源 user 的 1 实例拥有所有权限。</p>
<p>然后通过如下代码判断</p>
<p><code>subject().checkPermissions("user:view:1", "user:auth:2");</code></p>
<p><strong>6、Shiro 对权限字符串缺失部分的处理</strong></p>
<p>如&ldquo;user:view&rdquo;等价于&ldquo;<code>user:view:*</code>&rdquo;；而&ldquo;organization&rdquo;等价于&ldquo;<code>organization:*</code>&rdquo;或者&ldquo;<code>organization:*:*</code>&rdquo;。可以这么理解，这种方式实现了前缀匹配。</p>
<p>另外如&ldquo;<code>user:*</code>&rdquo;可以匹配如&ldquo;<code>user:delete</code>&rdquo;、&ldquo;<code>user:delete</code>&rdquo;可以匹配如&ldquo;<code>user:delete:1</code>&rdquo;、&ldquo;<code>user:*:1</code>&rdquo;可以匹配如&ldquo;user:view:1&rdquo;、&ldquo;user&rdquo;可以匹配&ldquo;<code>user:view</code>&rdquo;或&ldquo;<code>user:view:1</code>&rdquo;等。即<code>*</code>可以匹配所有，不加<code>*</code>可以进行前缀匹配；但是如&ldquo;<code>*:view</code>&rdquo;不能匹配&ldquo;<code>system:user:view</code>&rdquo;，需要使用&ldquo;<code>*:*:view</code>&rdquo;，即后缀匹配必须指定前缀（多个冒号就需要多个<code>*</code>来匹配）。</p>
<p><strong>7、WildcardPermission</strong></p>
<p>如下两种方式是等价的：</p>
<pre><code class="hljs css"><span class="hljs-selector-tag">subject</span>()<span class="hljs-selector-class">.checkPermission</span>("<span class="hljs-selector-tag">menu</span><span class="hljs-selector-pseudo">:view</span><span class="hljs-selector-pseudo">:1")</span>;
<span class="hljs-selector-tag">subject</span>()<span class="hljs-selector-class">.checkPermission</span>(<span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">WildcardPermission</span>("<span class="hljs-selector-tag">menu</span><span class="hljs-selector-pseudo">:view</span><span class="hljs-selector-pseudo">:1"))</span>;&amp;<span class="hljs-selector-tag">nbsp</span>;</code></pre>
<p>因此没什么必要的话使用字符串更方便。</p>
<p><strong>8、性能问题</strong></p>
<p>通配符匹配方式比字符串相等匹配来说是更复杂的，因此需要花费更长时间，但是一般系统的权限不会太多，且可以配合缓存来提供其性能，如果这样性能还达不到要求我们可以实现位操作算法实现性能更好的权限匹配。另外实例级别的权限验证如果数据量太大也不建议使用，可能造成查询权限及匹配变慢。可以考虑比如在sql查询时加上权限字符串之类的方式在查询时就完成了权限匹配。</p>
<h2 class="head2">授权流程</h2>
<p><img src="https://7n.w3cschool.cn/attachments/image/wk/shiro/6.png" alt="" /></p>
<p>流程如下：</p>
<ol>
<li>首先调用&nbsp;<code>Subject.isPermitted*/hasRole*</code>接口，其会委托给 SecurityManager，而 SecurityManager 接着会委托给 Authorizer；</li>
<li>Authorizer 是真正的授权者，如果我们调用如 isPermitted(&ldquo;user:view&rdquo;)，其首先会通过 PermissionResolver 把字符串转换成相应的 Permission 实例；</li>
<li>在进行授权之前，其会调用相应的 Realm 获取 Subject 相应的角色/权限用于匹配传入的角色/权限；</li>
<li>Authorizer 会判断 Realm 的角色/权限是否和传入的匹配，如果有多个 Realm，会委托给 ModularRealmAuthorizer 进行循环判断，如果匹配如&nbsp;<code>isPermitted*/hasRole*</code>&nbsp;会返回 true，否则返回 false 表示授权失败。</li>
</ol>
<p>ModularRealmAuthorizer 进行多 Realm 匹配流程：</p>
<ul>
<li>首先检查相应的 Realm 是否实现了实现了 Authorizer；</li>
<li>如果实现了 Authorizer，那么接着调用其相应的&nbsp;<code>isPermitted*/hasRole*</code>&nbsp;接口进行匹配；</li>
<li>如果有一个 Realm 匹配那么将返回 true，否则返回 false。</li>
</ul>
<p>如果 Realm 进行授权的话，应该继承 AuthorizingRealm，其流程是：</p>
<ul>
<li>如果调用&nbsp;<code>hasRole*</code>，则直接获取 AuthorizationInfo.getRoles() 与传入的角色比较即可；首先如果调用如 isPermitted(&ldquo;user:view&rdquo;)，首先通过 PermissionResolver 将权限字符串转换成相应的 Permission 实例，默认使用 WildcardPermissionResolver，即转换为通配符的 WildcardPermission；</li>
<li>通过 AuthorizationInfo.getObjectPermissions() 得到 Permission 实例集合；通过 AuthorizationInfo.getStringPermissions() 得到字符串集合并通过 PermissionResolver 解析为 Permission 实例；然后获取用户的角色，并通过 RolePermissionResolver 解析角色对应的权限集合（默认没有实现，可以自己提供）；</li>
<li>接着调用 Permission.implies(Permission p) 逐个与传入的权限比较，如果有匹配的则返回 true，否则 false。</li>
</ul>
<h2 class="head2">Authorizer、PermissionResolver及RolePermissionResolver</h2>
<p>Authorizer 的职责是进行授权（访问控制），是 Shiro API 中授权核心的入口点，其提供了相应的角色/权限判断接口，具体请参考其 Javadoc。SecurityManager 继承了 Authorizer 接口，且提供了 ModularRealmAuthorizer 用于多 Realm 时的授权匹配。PermissionResolver 用于解析权限字符串到 Permission 实例，而 RolePermissionResolver 用于根据角色解析相应的权限集合。</p>
<p>我们可以通过如下 ini 配置更改 Authorizer 实现：</p>
<pre><code class="hljs bash">authorizer=org.apache.shiro.authz.ModularRealmAuthorizer
securityManager.authorizer=<span class="hljs-variable">$authorizer</span>&amp;nbsp;</code></pre>
<p>对于 ModularRealmAuthorizer，相应的 AuthorizingSecurityManager 会在初始化完成后自动将相应的 realm 设置进去，我们也可以通过调用其 setRealms() 方法进行设置。对于实现自己的 authorizer 可以参考 ModularRealmAuthorizer 实现即可，在此就不提供示例了。</p>
<p>设置 ModularRealmAuthorizer 的 permissionResolver，其会自动设置到相应的 Realm 上（其实现了 PermissionResolverAware 接口），如：</p>
<pre><code class="hljs bash">permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
authorizer.permissionResolver=<span class="hljs-variable">$permissionResolver</span>&amp;nbsp;</code></pre>
<p>设置 ModularRealmAuthorizer 的 rolePermissionResolver，其会自动设置到相应的 Realm 上（其实现了 RolePermissionResolverAware 接口），如：</p>
<pre><code class="hljs bash">rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver
authorizer.rolePermissionResolver=<span class="hljs-variable">$rolePermissionResolver</span>&amp;nbsp;</code></pre>
<p><strong>示例</strong></p>
<p><strong>1、ini 配置（shiro-authorizer.ini）</strong></p>
<pre><code class="hljs bash">[main]
\<span class="hljs-comment">#自定义authorizer</span>
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer
\<span class="hljs-comment">#自定义permissionResolver</span>
\<span class="hljs-comment">#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver</span>
permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver
authorizer.permissionResolver=<span class="hljs-variable">$permissionResolver</span>
\<span class="hljs-comment">#自定义rolePermissionResolver</span>
rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver
authorizer.rolePermissionResolver=<span class="hljs-variable">$rolePermissionResolver</span>
securityManager.authorizer=<span class="hljs-variable">$authorizer</span></code></pre>
<pre><code class="hljs bash">\<span class="hljs-comment">#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）</span>
realm=com.github.zhangkaitao.shiro.chapter3.realm.MyRealm
securityManager.realms=<span class="hljs-variable">$realm</span>&amp;nbsp;</code></pre>
<p>设置 securityManager 的 realms 一定要放到最后，因为在调用 SecurityManager.setRealms 时会将 realms 设置给 authorizer，并为各个 Realm 设置 permissionResolver 和 rolePermissionResolver。另外，不能使用 IniSecurityManagerFactory 创建的 IniRealm，因为其初始化顺序的问题可能造成后续的初始化 Permission 造成影响。</p>
<p><strong>2、定义 BitAndWildPermissionResolver 及 BitPermission</strong></p>
<p>BitPermission 用于实现位移方式的权限，如规则是：</p>
<p>权限字符串格式：+ 资源字符串 + 权限位 + 实例 ID；以 + 开头中间通过 + 分割；权限：0 表示所有权限；1 新增（二进制：0001）、2 修改（二进制：0010）、4 删除（二进制：0100）、8 查看（二进制：1000）；如 +user+10 表示对资源 user 拥有修改 / 查看权限。</p>
<pre><code class="hljs cpp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> BitPermission implements Permission {
    <span class="hljs-keyword">private</span> String resourceIdentify;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> permissionBit;
    <span class="hljs-keyword">private</span> String instanceId;
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BitPermission</span><span class="hljs-params">(String permissionString)</span> </span>{
        String[] <span class="hljs-built_in">array</span> = permissionString.split(<span class="hljs-string">"\\+"</span>);
        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>.length &gt; <span class="hljs-number">1</span>) {
            resourceIdentify = <span class="hljs-built_in">array</span>[<span class="hljs-number">1</span>];
        }
        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(resourceIdentify)) {
            resourceIdentify = <span class="hljs-string">"*"</span>;
        }
        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>.length &gt; <span class="hljs-number">2</span>) {
            permissionBit = Integer.valueOf(<span class="hljs-built_in">array</span>[<span class="hljs-number">2</span>]);
        }
        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>.length &gt; <span class="hljs-number">3</span>) {
            instanceId = <span class="hljs-built_in">array</span>[<span class="hljs-number">3</span>];
        }
        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(instanceId)) {
            instanceId = <span class="hljs-string">"*"</span>;
        }
    }
    @<span class="hljs-function">Override
    <span class="hljs-keyword">public</span> boolean <span class="hljs-title">implies</span><span class="hljs-params">(Permission p)</span> </span>{
        <span class="hljs-keyword">if</span>(!(p instanceof BitPermission)) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
        BitPermission other = (BitPermission) p;
        <span class="hljs-keyword">if</span>(!(<span class="hljs-string">"*"</span>.equals(<span class="hljs-keyword">this</span>.resourceIdentify) || <span class="hljs-keyword">this</span>.resourceIdentify.equals(other.resourceIdentify))) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
        <span class="hljs-keyword">if</span>(!(<span class="hljs-keyword">this</span>.permissionBit ==<span class="hljs-number">0</span> || (<span class="hljs-keyword">this</span>.permissionBit &amp; other.permissionBit) != <span class="hljs-number">0</span>)) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
        <span class="hljs-keyword">if</span>(!(<span class="hljs-string">"*"</span>.equals(<span class="hljs-keyword">this</span>.instanceId) || <span class="hljs-keyword">this</span>.instanceId.equals(other.instanceId))) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
}&amp;nbsp;</code></pre>
<p>Permission 接口提供了 boolean implies(Permission p) 方法用于判断权限匹配的；</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BitAndWildPermissionResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PermissionResolver</span> </span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Permission <span class="hljs-title">resolvePermission</span><span class="hljs-params">(String permissionString)</span> </span>{
        <span class="hljs-keyword">if</span>(permissionString.startsWith(<span class="hljs-string">"+"</span>)) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BitPermission(permissionString);
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WildcardPermission(permissionString);
    }
}&amp;nbsp;</code></pre>
<p>BitAndWildPermissionResolver 实现了 PermissionResolver 接口，并根据权限字符串是否以 &ldquo;+&rdquo; 开头来解析权限字符串为 BitPermission 或 WildcardPermission。</p>
<p><strong>3、定义 MyRolePermissionResolver</strong></p>
<p>RolePermissionResolver 用于根据角色字符串来解析得到权限集合。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRolePermissionResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RolePermissionResolver</span> </span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;Permission&gt; <span class="hljs-title">resolvePermissionsInRole</span><span class="hljs-params">(String roleString)</span> </span>{
        <span class="hljs-keyword">if</span>(<span class="hljs-string">"role1"</span>.equals(roleString)) {
            <span class="hljs-keyword">return</span> Arrays.asList((Permission)<span class="hljs-keyword">new</span> WildcardPermission(<span class="hljs-string">"menu:*"</span>));
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    }
}&amp;nbsp;</code></pre>
<p>此处的实现很简单，如果用户拥有 role1，那么就返回一个 &ldquo;<code>menu:*</code>&rdquo; 的权限。</p>
<p><strong>4、自定义 Realm</strong></p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> </span>{
        SimpleAuthorizationInfo authorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthorizationInfo();
        authorizationInfo.addRole(<span class="hljs-string">"role1"</span>);
        authorizationInfo.addRole(<span class="hljs-string">"role2"</span>);
        authorizationInfo.addObjectPermission(<span class="hljs-keyword">new</span> BitPermission(<span class="hljs-string">"+user1+10"</span>));
        authorizationInfo.addObjectPermission(<span class="hljs-keyword">new</span> WildcardPermission(<span class="hljs-string">"user1:*"</span>));
        authorizationInfo.addStringPermission(<span class="hljs-string">"+user2+10"</span>);
        authorizationInfo.addStringPermission(<span class="hljs-string">"user2:*"</span>);
        <span class="hljs-keyword">return</span> authorizationInfo;
    }
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>{
        <span class="hljs-comment">//和com.github.zhangkaitao.shiro.chapter2.realm.MyRealm1. getAuthenticationInfo代码一样，省略</span>
}
}&amp;nbsp;</code></pre>
<p>此时我们继承 AuthorizingRealm 而不是实现 Realm 接口；推荐使用 AuthorizingRealm，因为： AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token)：表示获取身份验证信息；AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)：表示根据用户身份获取授权信息。这种方式的好处是当只需要身份验证时只需要获取身份验证信息而不需要获取授权信息。对于 AuthenticationInfo 和 AuthorizationInfo 请参考其 Javadoc 获取相关接口信息。</p>
<p>另外我们可以使用 JdbcRealm，需要做的操作如下：</p>
<ol>
<li>执行 sql/ shiro-init-data.sql 插入相关的权限数据；</li>
<li>使用 shiro-jdbc-authorizer.ini 配置文件，需要设置 jdbcRealm.permissionsLookupEnabled 为 true 来开启权限查询。</li>
</ol>
<p>此次还要注意就是不能把我们自定义的如 &ldquo;+user1+10&rdquo; 配置到 INI 配置文件，即使有 IniRealm 完成，因为 IniRealm 在 new 完成后就会解析这些权限字符串，默认使用了WildcardPermissionResolver 完成，即此处是一个设计权限，如果采用生命周期（如使用初始化方法）的方式进行加载就可以解决我们自定义 permissionResolver 的问题。</p>
<p><strong>5、测试用例</strong></p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorizerTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseTest</span> </span>{
    <span class="hljs-meta">@Test</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIsPermitted</span><span class="hljs-params">()</span> </span>{
        login(<span class="hljs-string">"classpath:shiro-authorizer.ini"</span>, <span class="hljs-string">"zhang"</span>, <span class="hljs-string">"123"</span>);
        <span class="hljs-comment">//判断拥有权限：user:create</span>
        Assert.assertTrue(subject().isPermitted(<span class="hljs-string">"user1:update"</span>));
        Assert.assertTrue(subject().isPermitted(<span class="hljs-string">"user2:update"</span>));
        <span class="hljs-comment">//通过二进制位的方式表示权限</span>
        Assert.assertTrue(subject().isPermitted(<span class="hljs-string">"+user1+2"</span>));<span class="hljs-comment">//新增权限</span>
        Assert.assertTrue(subject().isPermitted(<span class="hljs-string">"+user1+8"</span>));<span class="hljs-comment">//查看权限</span>
        Assert.assertTrue(subject().isPermitted(<span class="hljs-string">"+user2+10"</span>));<span class="hljs-comment">//新增及查看</span>
        Assert.assertFalse(subject().isPermitted(<span class="hljs-string">"+user1+4"</span>));<span class="hljs-comment">//没有删除权限</span>
        Assert.assertTrue(subject().isPermitted(<span class="hljs-string">"menu:view"</span>));<span class="hljs-comment">//通过MyRolePermissionResolver解析得到的权限</span>
    }
}&amp;nbsp;  </code></pre>
<p>通过如上步骤可以实现自定义权限验证了。另外因为不支持 hasAnyRole/isPermittedAny 这种方式的授权，可以参考我的一篇《简单 shiro 扩展实现 NOT、AND、OR 权限验证 》进行简单的扩展完成这个需求，在这篇文章中通过重写 AuthorizingRealm 里的验证逻辑实现的。</p>
</div>
</div>
</div>