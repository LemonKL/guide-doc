<header class="article-header"><header class="article-header">
<h1 class="article-title">服务容器</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>本文分享 Dubbo 实现&nbsp;<strong>服务容器</strong>&nbsp;功能。在&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/service-container.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 服务容器》</a>&nbsp;定义如下：</p>
<blockquote>
<p>服务容器是一个 standalone 的启动程序，因为后台服务不需要 Tomcat 或 JBoss 等 Web 容器的功能，如果硬要用 Web 容器去加载服务提供方，增加复杂性，也浪费资源。</p>
<p>服务容器只是一个简单的 Main 方法，并加载一个简单的 Spring 容器，用于暴露服务。</p>
<p>服务容器的加载内容可以扩展，内置了 spring, jetty, log4j 等加载，可通过容器<a href="http://dubbo.apache.org/zh-cn/docs/dev/content/impls/container.html" target="_blank" rel="external nofollow noopener noreferrer">扩展点</a>进行扩展。配置配在 java 命令的 -D 参数或者&nbsp;<code>dubbo.properties</code>&nbsp;中。</p>
</blockquote>
<ul>
<li>从概念上我们可以看到，和 SpringBoot 类似，是 Dubbo 服务的启动器。🙂 考虑到目前 Spring 更加通用，所以实际实践时，更多采用的是 SpringBoot ，而不是 Dubbo 的服务容器。</li>
<li><code>jetty</code>&nbsp;服务容器实现已经移除，新增&nbsp;<code>logback</code>&nbsp;服务容器实现。</li>
</ul>
<p>本文涉及如下图所示：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2019_03_01/01.png" alt="一览" /></p>
<h1 id="2-Container">2. Container</h1>
<p><code>com.alibaba.dubbo.container.Container</code>&nbsp;，服务容器<strong>接口</strong>。</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@SPI</span>(<span class="string">"spring"</span>)</span><br /><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Container</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * start.</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 启动</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * stop.</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 停止</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>@SPI("spring")</code>&nbsp;注解，Dubbo SPI&nbsp;<strong>拓展点</strong>，默认为&nbsp;<code>"spring"</code>&nbsp;。</li>
<li>定义了容器的<strong>启动</strong>和<strong>停止</strong>两个方法。</li>
</ul>
<h2 id="2-1-SpringContainer">2.1 SpringContainer</h2>
<p><code>com.alibaba.dubbo.container.spring.SpringContainer</code>&nbsp;，实现 Container 接口，<strong>Spring</strong>&nbsp;容器实现类。属于&nbsp;<code>dubbo-container-spring</code>&nbsp;项目。</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContainer</span> <span class="keyword">implements</span> <span class="title">Container</span> </span>{</span><br /><span class="line"> <span class="number">2</span>: </span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SpringContainer.class);</span><br /><span class="line"> <span class="number">4</span>: </span><br /><span class="line"> <span class="number">5</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment"> 6:      * Spring 配置属性 KEY</span></span><br /><span class="line"><span class="comment"> 7:      */</span></span><br /><span class="line"> <span class="number">8</span>:     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPRING_CONFIG = <span class="string">"dubbo.spring.config"</span>;</span><br /><span class="line"> <span class="number">9</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment">10:      * 默认配置文件地址</span></span><br /><span class="line"><span class="comment">11:      */</span></span><br /><span class="line"><span class="number">12</span>:     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SPRING_CONFIG = <span class="string">"classpath*:META-INF/spring/*.xml"</span>;</span><br /><span class="line"><span class="number">13</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment">14:      * Spring Context</span></span><br /><span class="line"><span class="comment">15:      *</span></span><br /><span class="line"><span class="comment">16:      * 静态属性，全局唯一</span></span><br /><span class="line"><span class="comment">17:      */</span></span><br /><span class="line"><span class="number">18</span>:     <span class="keyword">static</span> ClassPathXmlApplicationContext context;</span><br /><span class="line"><span class="number">19</span>: </span><br /><span class="line"><span class="number">20</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassPathXmlApplicationContext <span class="title">getContext</span><span class="params">()</span> </span>{</span><br /><span class="line"><span class="number">21</span>:         <span class="keyword">return</span> context;</span><br /><span class="line"><span class="number">22</span>:     }</span><br /><span class="line"><span class="number">23</span>: </span><br /><span class="line"><span class="number">24</span>:     <span class="meta">@Override</span></span><br /><span class="line"><span class="number">25</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br /><span class="line"><span class="number">26</span>:         <span class="comment">// 获得 Spring 配置文件的地址</span></span><br /><span class="line"><span class="number">27</span>:         String configPath = ConfigUtils.getProperty(SPRING_CONFIG);</span><br /><span class="line"><span class="number">28</span>:         <span class="keyword">if</span> (configPath == <span class="keyword">null</span> || configPath.length() == <span class="number">0</span>) {</span><br /><span class="line"><span class="number">29</span>:             configPath = DEFAULT_SPRING_CONFIG;</span><br /><span class="line"><span class="number">30</span>:         }</span><br /><span class="line"><span class="number">31</span>:         <span class="comment">// 创建 Spring Context 对象</span></span><br /><span class="line"><span class="number">32</span>:         context = <span class="keyword">new</span> ClassPathXmlApplicationContext(configPath.split(<span class="string">"[,\\s]+"</span>));</span><br /><span class="line"><span class="number">33</span>:         <span class="comment">// 启动 Spring Context ，会触发 ContextStartedEvent 事件</span></span><br /><span class="line"><span class="number">34</span>:         context.start();</span><br /><span class="line"><span class="number">35</span>:     }</span><br /><span class="line"><span class="number">36</span>: </span><br /><span class="line"><span class="number">37</span>:     <span class="meta">@Override</span></span><br /><span class="line"><span class="number">38</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br /><span class="line"><span class="number">39</span>:         <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">40</span>:             <span class="keyword">if</span> (context != <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">41</span>:                 <span class="comment">// 停止 Spring Context ，会触发 ContextStoppedEvent 事件。</span></span><br /><span class="line"><span class="number">42</span>:                 context.stop();</span><br /><span class="line"><span class="number">43</span>:                 <span class="comment">// 关闭 Spring Context ，会触发 ContextClosedEvent 事件。</span></span><br /><span class="line"><span class="number">44</span>:                 context.close();</span><br /><span class="line"><span class="number">45</span>:                 context = <span class="keyword">null</span>;</span><br /><span class="line"><span class="number">46</span>:             }</span><br /><span class="line"><span class="number">47</span>:         } <span class="keyword">catch</span> (Throwable e) {</span><br /><span class="line"><span class="number">48</span>:             logger.error(e.getMessage(), e);</span><br /><span class="line"><span class="number">49</span>:         }</span><br /><span class="line"><span class="number">50</span>:     }</span><br /><span class="line"><span class="number">51</span>: </span><br /><span class="line"><span class="number">52</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>context</code>&nbsp;<strong>静态</strong>属性，Spring Context ，全局<strong>唯一</strong>。可通过&nbsp;<code>#getContext()</code>&nbsp;<strong>静态</strong>方法获取到。</li>
<li><code>SPRING_CONFIG</code>&nbsp;<strong>静态</strong>属性，Spring 配置属性&nbsp;<strong>KEY</strong>。
<ul>
<li><code>DEFAULT_SPRING_CONFIG</code>&nbsp;<strong>静态</strong>属性，默认 Spring 配置文件地址。</li>
</ul>
</li>
<li><code>#start()</code>&nbsp;方法，启动 Spring 。代码如下：
<ul>
<li>第 27 行：调用&nbsp;<code>ConfigUtils#getProperty(key)</code>&nbsp;方法，获得 Spring 配置文件的地址。优先级为：
<ul>
<li>【高】JVM 启动参数：<code>-Ddubbo.spring.config=自定义 XML 路径</code>&nbsp;。</li>
<li>【低】Dubbo Properties 配置文件：<code>dubbo.spring.config=自定义 XML 路径</code>&nbsp;。</li>
</ul>
</li>
<li>第 28 至 30 行：未配置，则使用默认路径&nbsp;<code>DEFAULT_SPRING_CONFIG</code>&nbsp;。</li>
<li>第 32 行：创建 Spring Context 对象。</li>
<li>第 34 行：调用&nbsp;<code>ClassPathXmlApplicationContext#start()</code>&nbsp;方法，启动 Spring Context 。通过 Spring 启动，<strong>加载我们的 Dubbo 配置</strong>，从而启动 Dubbo 服务。</li>
</ul>
</li>
<li><code>#stop()</code>&nbsp;方法，关闭 Spring 。代码如下：
<ul>
<li>第 42 行：调用&nbsp;<code>ClassPathXmlApplicationContext#stop()</code>&nbsp;方法，停止 Spring Context 。</li>
<li>第 44 行：调用&nbsp;<code>ClassPathXmlApplicationContext#close()</code>&nbsp;方法，关闭 Spring Context 。</li>
</ul>
</li>
</ul>
<h2 id="2-2-Log4jContainer">2.2 Log4jContainer</h2>
<p><code>com.alibaba.dubbo.container.log4j.Log4jContainer</code>&nbsp;，实现 Container 接口，<strong>Log4j</strong>&nbsp;容器实现类，<strong>自动配置</strong>&nbsp;log4j 的配置，在多进程启动时，自动给日志文件按进程分目录。属于&nbsp;<code>dubbo-container-log4j</code>项目。</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jContainer</span> <span class="keyword">implements</span> <span class="title">Container</span> </span>{</span><br /><span class="line"> <span class="number">2</span>: </span><br /><span class="line"> <span class="number">3</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment"> 4:      * 日志文件路径配置 KEY</span></span><br /><span class="line"><span class="comment"> 5:      */</span></span><br /><span class="line"> <span class="number">6</span>:     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG4J_FILE = <span class="string">"dubbo.log4j.file"</span>;</span><br /><span class="line"> <span class="number">7</span>: </span><br /><span class="line"> <span class="number">8</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment"> 9:      * 日志子目录径配置 KEY</span></span><br /><span class="line"><span class="comment">10:      */</span></span><br /><span class="line"><span class="number">11</span>:     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG4J_SUBDIRECTORY = <span class="string">"dubbo.log4j.subdirectory"</span>;</span><br /><span class="line"><span class="number">12</span>: </span><br /><span class="line"><span class="number">13</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment">14:      * 日志级别配置 KEY</span></span><br /><span class="line"><span class="comment">15:      */</span></span><br /><span class="line"><span class="number">16</span>:     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG4J_LEVEL = <span class="string">"dubbo.log4j.level"</span>;</span><br /><span class="line"><span class="number">17</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment">18:      * 默认日志级别 - ERROR</span></span><br /><span class="line"><span class="comment">19:      */</span></span><br /><span class="line"><span class="number">20</span>:     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_LOG4J_LEVEL = <span class="string">"ERROR"</span>;</span><br /><span class="line"><span class="number">21</span>: </span><br /><span class="line"><span class="number">22</span>:     <span class="meta">@Override</span></span><br /><span class="line"><span class="number">23</span>:     <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br /><span class="line"><span class="number">24</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br /><span class="line"><span class="number">25</span>:         <span class="comment">// 获得 log4j 配置的日志文件路径</span></span><br /><span class="line"><span class="number">26</span>:         String file = ConfigUtils.getProperty(LOG4J_FILE);</span><br /><span class="line"><span class="number">27</span>:         <span class="keyword">if</span> (file != <span class="keyword">null</span> &amp;&amp; file.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">28</span>:             <span class="comment">// 获得日志级别</span></span><br /><span class="line"><span class="number">29</span>:             String level = ConfigUtils.getProperty(LOG4J_LEVEL);</span><br /><span class="line"><span class="number">30</span>:             <span class="keyword">if</span> (level == <span class="keyword">null</span> || level.length() == <span class="number">0</span>) {</span><br /><span class="line"><span class="number">31</span>:                 level = DEFAULT_LOG4J_LEVEL;</span><br /><span class="line"><span class="number">32</span>:             }</span><br /><span class="line"><span class="number">33</span>:             <span class="comment">// 创建日志 Properties 对象，并设置到 PropertyConfigurator 中。</span></span><br /><span class="line"><span class="number">34</span>:             Properties properties = <span class="keyword">new</span> Properties();</span><br /><span class="line"><span class="number">35</span>:             properties.setProperty(<span class="string">"log4j.rootLogger"</span>, level + <span class="string">",application"</span>); <span class="comment">// 日志级别</span></span><br /><span class="line"><span class="number">36</span>:             <span class="comment">// log4j.appender.application 的配置</span></span><br /><span class="line"><span class="number">37</span>:             properties.setProperty(<span class="string">"log4j.appender.application"</span>, <span class="string">"org.apache.log4j.DailyRollingFileAppender"</span>); <span class="comment">// DailyRollingFileAppender</span></span><br /><span class="line"><span class="number">38</span>:             properties.setProperty(<span class="string">"log4j.appender.application.File"</span>, file); <span class="comment">// 日志文件路径</span></span><br /><span class="line"><span class="number">39</span>:             properties.setProperty(<span class="string">"log4j.appender.application.Append"</span>, <span class="string">"true"</span>);</span><br /><span class="line"><span class="number">40</span>:             properties.setProperty(<span class="string">"log4j.appender.application.DatePattern"</span>, <span class="string">"'.'yyyy-MM-dd"</span>);</span><br /><span class="line"><span class="number">41</span>:             properties.setProperty(<span class="string">"log4j.appender.application.layout"</span>, <span class="string">"org.apache.log4j.PatternLayout"</span>);</span><br /><span class="line"><span class="number">42</span>:             properties.setProperty(<span class="string">"log4j.appender.application.layout.ConversionPattern"</span>, <span class="string">"%d [%t] %-5p %C{6} (%F:%L) - %m%n"</span>);</span><br /><span class="line"><span class="number">43</span>:             PropertyConfigurator.configure(properties);</span><br /><span class="line"><span class="number">44</span>:         }</span><br /><span class="line"><span class="number">45</span>:         <span class="comment">// 获得日志子目录，用于多进程启动，避免冲突。</span></span><br /><span class="line"><span class="number">46</span>:         String subdirectory = ConfigUtils.getProperty(LOG4J_SUBDIRECTORY);</span><br /><span class="line"><span class="number">47</span>:         <span class="keyword">if</span> (subdirectory != <span class="keyword">null</span> &amp;&amp; subdirectory.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">48</span>:             <span class="comment">// 循环每个 Logger 对象</span></span><br /><span class="line"><span class="number">49</span>:             Enumeration&lt;org.apache.log4j.Logger&gt; ls = LogManager.getCurrentLoggers();</span><br /><span class="line"><span class="number">50</span>:             <span class="keyword">while</span> (ls.hasMoreElements()) {</span><br /><span class="line"><span class="number">51</span>:                 org.apache.log4j.Logger l = ls.nextElement();</span><br /><span class="line"><span class="number">52</span>:                 <span class="keyword">if</span> (l != <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">53</span>:                     <span class="comment">// 循环每个 Logger 对象的 Appender 对象</span></span><br /><span class="line"><span class="number">54</span>:                     Enumeration&lt;Appender&gt; as = l.getAllAppenders();</span><br /><span class="line"><span class="number">55</span>:                     <span class="keyword">while</span> (as.hasMoreElements()) {</span><br /><span class="line"><span class="number">56</span>:                         Appender a = as.nextElement();</span><br /><span class="line"><span class="number">57</span>:                         <span class="keyword">if</span> (a <span class="keyword">instanceof</span> FileAppender) { <span class="comment">// 当且仅当 FileAppender 时</span></span><br /><span class="line"><span class="number">58</span>:                             FileAppender fa = (FileAppender) a;</span><br /><span class="line"><span class="number">59</span>:                             String f = fa.getFile();</span><br /><span class="line"><span class="number">60</span>:                             <span class="keyword">if</span> (f != <span class="keyword">null</span> &amp;&amp; f.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">61</span>:                                 <span class="keyword">int</span> i = f.replace(<span class="string">'\\'</span>, <span class="string">'/'</span>).lastIndexOf(<span class="string">'/'</span>);</span><br /><span class="line"><span class="number">62</span>:                                 <span class="comment">// 拼接日志子目录</span></span><br /><span class="line"><span class="number">63</span>:                                 String path;</span><br /><span class="line"><span class="number">64</span>:                                 <span class="keyword">if</span> (i == -<span class="number">1</span>) { <span class="comment">// 无路径</span></span><br /><span class="line"><span class="number">65</span>:                                     path = subdirectory;</span><br /><span class="line"><span class="number">66</span>:                                 } <span class="keyword">else</span> {</span><br /><span class="line"><span class="number">67</span>:                                     path = f.substring(<span class="number">0</span>, i);</span><br /><span class="line"><span class="number">68</span>:                                     <span class="keyword">if</span> (!path.endsWith(subdirectory)) { <span class="comment">// 已经是 subdirectory 结尾，则不用拼接</span></span><br /><span class="line"><span class="number">69</span>:                                         path = path + <span class="string">"/"</span> + subdirectory;</span><br /><span class="line"><span class="number">70</span>:                                     }</span><br /><span class="line"><span class="number">71</span>:                                     f = f.substring(i + <span class="number">1</span>);</span><br /><span class="line"><span class="number">72</span>:                                 }</span><br /><span class="line"><span class="number">73</span>:                                 <span class="comment">// 设置新的文件名</span></span><br /><span class="line"><span class="number">74</span>:                                 fa.setFile(path + <span class="string">"/"</span> + f);</span><br /><span class="line"><span class="number">75</span>:                                 <span class="comment">// 生效配置</span></span><br /><span class="line"><span class="number">76</span>:                                 fa.activateOptions();</span><br /><span class="line"><span class="number">77</span>:                             }</span><br /><span class="line"><span class="number">78</span>:                         }</span><br /><span class="line"><span class="number">79</span>:                     }</span><br /><span class="line"><span class="number">80</span>:                 }</span><br /><span class="line"><span class="number">81</span>:             }</span><br /><span class="line"><span class="number">82</span>:         }</span><br /><span class="line"><span class="number">83</span>:     }</span><br /><span class="line"><span class="number">84</span>: </span><br /><span class="line"><span class="number">85</span>:     <span class="meta">@Override</span></span><br /><span class="line"><span class="number">86</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br /><span class="line"><span class="number">87</span>:     }</span><br /><span class="line"><span class="number">88</span>: </span><br /><span class="line"><span class="number">89</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>LOG4J_FILE</code>&nbsp;<strong>静态</strong>属性，日志文件路径配置 KEY 。例如：<code>dubbo.log4j.file=/foo/bar.log</code>&nbsp;。</li>
<li><code>LOG4J_SUBDIRECTORY</code>&nbsp;<strong>静态</strong>属性，日志子目录径配置 KEY 。例如：<code>dubbo.log4j.subdirectory=20880</code>&nbsp;。
<ul>
<li>Log4j 在<strong>多进程</strong>写入<strong>同一</strong>日志文件，极端情况会存在丢失问题，参见&nbsp;<a href="http://hellojavaer.iteye.com/blog/977599" target="_blank" rel="external nofollow noopener noreferrer">《多进程log4j日志丢失问题分析》</a>&nbsp;文章的分析。</li>
</ul>
</li>
<li><code>LOG4J_LEVEL</code>&nbsp;<strong>静态</strong>属性，日志级别配置 KEY。例如：<code>dubbo.log4j.level=WARN</code>&nbsp;。
<ul>
<li><code>DEFAULT_LOG4J_LEVEL</code>&nbsp;<strong>静态</strong>属性， 默认日志级别，<strong>ERROR</strong>&nbsp;。</li>
</ul>
</li>
<li><code>#start()</code>&nbsp;方法，<strong>自动配置</strong>&nbsp;log4j 的配置。代码如下：
<ul>
<li>第 26 行：获得 log4j 配置的<strong>日志文件路径</strong>。</li>
<li>第 28 至 32 行：获得日志<strong>级别</strong>。</li>
<li>第 33 至 43 行：创建日志 Properties 对象，并设置到&nbsp;<code>org.apache.log4j.PropertyConfigurator</code>&nbsp;中。</li>
<li>第 45 至 82 行：获得日志<strong>子目录</strong>，用于多进程启动，避免冲突。</li>
</ul>
</li>
<li><code>#stop()</code>&nbsp;方法，空实现。因为，无需关闭。</li>
</ul>
<h2 id="2-3-LogbackContainer">2.3 LogbackContainer</h2>
<p><code>com.alibaba.dubbo.container.logback.LogbackContainer</code>&nbsp;，实现 Container 接口，<strong>Logback</strong>&nbsp;容器实现类，<strong>自动配置</strong>&nbsp;logback 的配置，自动适配 logback 的配置。属于&nbsp;<code>dubbo-container-logback</code>&nbsp;项目。</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogbackContainer</span> <span class="keyword">implements</span> <span class="title">Container</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 日志文件路径配置 KEY</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGBACK_FILE = <span class="string">"dubbo.logback.file"</span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 日志保留天数配置 KEY</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGBACK_MAX_HISTORY = <span class="string">"dubbo.logback.maxhistory"</span>;</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 日志级别配置 KEY</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGBACK_LEVEL = <span class="string">"dubbo.logback.level"</span>;</span><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * 默认日志级别 - ERROR</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_LOGBACK_LEVEL = <span class="string">"ERROR"</span>;</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="comment">// 获得 logback 配置的日志文件路径</span></span><br /><span class="line">        String file = ConfigUtils.getProperty(LOGBACK_FILE);</span><br /><span class="line">        <span class="keyword">if</span> (file != <span class="keyword">null</span> &amp;&amp; file.length() &gt; <span class="number">0</span>) {</span><br /><span class="line">            <span class="comment">// 获得日志级别</span></span><br /><span class="line">            String level = ConfigUtils.getProperty(LOGBACK_LEVEL);</span><br /><span class="line">            <span class="keyword">if</span> (level == <span class="keyword">null</span> || level.length() == <span class="number">0</span>) {</span><br /><span class="line">                level = DEFAULT_LOGBACK_LEVEL;</span><br /><span class="line">            }</span><br /><span class="line">            <span class="comment">// 获得日志保留天数。若为零，则无限天数</span></span><br /><span class="line">            <span class="comment">// maxHistory=0 Infinite history</span></span><br /><span class="line">            <span class="keyword">int</span> maxHistory = StringUtils.parseInteger(ConfigUtils.getProperty(LOGBACK_MAX_HISTORY));</span><br /><span class="line">            <span class="comment">// 初始化 logback</span></span><br /><span class="line">            doInitializer(file, level, maxHistory);</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * Initializer logback</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * 初始化 logback</span></span><br /><span class="line"><span class="comment">     *</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 日志文件路径</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> level 日志级别</span></span><br /><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxHistory 日志保留天数</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doInitializer</span><span class="params">(String file, String level, <span class="keyword">int</span> maxHistory)</span> </span>{</span><br /><span class="line">        LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();</span><br /><span class="line">        Logger rootLogger = loggerContext.getLogger(Logger.ROOT_LOGGER_NAME);</span><br /><span class="line">        rootLogger.detachAndStopAllAppenders();</span><br /><br /><span class="line">        <span class="comment">// appender</span></span><br /><span class="line">        RollingFileAppender&lt;ILoggingEvent&gt; fileAppender = <span class="keyword">new</span> RollingFileAppender&lt;ILoggingEvent&gt;();</span><br /><span class="line">        fileAppender.setContext(loggerContext);</span><br /><span class="line">        fileAppender.setName(<span class="string">"application"</span>);</span><br /><span class="line">        fileAppender.setFile(file);</span><br /><span class="line">        fileAppender.setAppend(<span class="keyword">true</span>);</span><br /><br /><span class="line">        <span class="comment">// policy</span></span><br /><span class="line">        TimeBasedRollingPolicy&lt;ILoggingEvent&gt; policy = <span class="keyword">new</span> TimeBasedRollingPolicy&lt;ILoggingEvent&gt;();</span><br /><span class="line">        policy.setContext(loggerContext);</span><br /><span class="line">        policy.setMaxHistory(maxHistory);</span><br /><span class="line">        policy.setFileNamePattern(file + <span class="string">".%d{yyyy-MM-dd}"</span>);</span><br /><span class="line">        policy.setParent(fileAppender);</span><br /><span class="line">        policy.start();</span><br /><span class="line">        fileAppender.setRollingPolicy(policy);</span><br /><br /><span class="line">        <span class="comment">// encoder</span></span><br /><span class="line">        PatternLayoutEncoder encoder = <span class="keyword">new</span> PatternLayoutEncoder();</span><br /><span class="line">        encoder.setContext(loggerContext);</span><br /><span class="line">        encoder.setPattern(<span class="string">"%date [%thread] %-5level %logger (%file:%line\\) - %msg%n"</span>);</span><br /><span class="line">        encoder.start();</span><br /><span class="line">        fileAppender.setEncoder(encoder);</span><br /><br /><span class="line">        fileAppender.start();</span><br /><br /><span class="line">        rootLogger.addAppender(fileAppender);</span><br /><span class="line">        rootLogger.setLevel(Level.toLevel(level));</span><br /><span class="line">        rootLogger.setAdditive(<span class="keyword">false</span>);</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>LOGBACK_FILE</code>&nbsp;<strong>静态</strong>属性，日志文件路径配置 KEY 。例如：<code>dubbo.logback.file=/foo/bar.log</code>&nbsp;。</li>
<li><code>LOGBACK_MAX_HISTORY</code>&nbsp;<strong>静态</strong>属性，日志保留天数配置 KEY。例如：<code>dubbo.logback.maxhistory=15</code>&nbsp;。</li>
<li><code>LOGBACK_LEVEL</code>&nbsp;<strong>静态</strong>属性，日志级别配置 KEY。例如：<code>dubbo.logback.level=WARN</code>&nbsp;。
<ul>
<li><code>DEFAULT_LOGBACK_LEVEL</code>&nbsp;<strong>静态</strong>属性， 默认日志级别，<strong>ERROR</strong>&nbsp;。</li>
</ul>
</li>
<li>代码比较简单，和 Log4jContainer 思路一致，胖友自己看注释。如果对 Logback 不了解的胖友，可以看看&nbsp;<a href="http://webinglin.github.io/2015/06/04/Logback-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="external nofollow noopener noreferrer">《Logback背景》</a>&nbsp;文章。</li>
</ul>
<h1 id="3-Main">3. Main</h1>
<p><code>com.alibaba.dubbo.container.Main</code>&nbsp;，启动程序，负责初始化 Container 服务容器。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br /><span class="line"> <span class="number">2</span>: </span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Main.class);</span><br /><span class="line"> <span class="number">4</span>: </span><br /><span class="line"> <span class="number">5</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment"> 6:      * Container 配置 KEY</span></span><br /><span class="line"><span class="comment"> 7:      */</span></span><br /><span class="line"> <span class="number">8</span>:     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTAINER_KEY = <span class="string">"dubbo.container"</span>;</span><br /><span class="line"> <span class="number">9</span>: </span><br /><span class="line"><span class="number">10</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment">11:      * ShutdownHook 是否开启配置 KEY</span></span><br /><span class="line"><span class="comment">12:      */</span></span><br /><span class="line"><span class="number">13</span>:     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SHUTDOWN_HOOK_KEY = <span class="string">"dubbo.shutdown.hook"</span>;</span><br /><span class="line"><span class="number">14</span>: </span><br /><span class="line"><span class="number">15</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment">16:      * Container 拓展点对应的 ExtensionLoader 对象</span></span><br /><span class="line"><span class="comment">17:      */</span></span><br /><span class="line"><span class="number">18</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExtensionLoader&lt;Container&gt; loader = ExtensionLoader.getExtensionLoader(Container.class);</span><br /><span class="line"><span class="number">19</span>: </span><br /><span class="line"><span class="number">20</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantLock LOCK = <span class="keyword">new</span> ReentrantLock();</span><br /><span class="line"><span class="number">21</span>: </span><br /><span class="line"><span class="number">22</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition STOP = LOCK.newCondition();</span><br /><span class="line"><span class="number">23</span>: </span><br /><span class="line"><span class="number">24</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br /><span class="line"><span class="number">25</span>:         <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">26</span>:             <span class="comment">// 若 main 函数参数传入为空，从配置中加载。</span></span><br /><span class="line"><span class="number">27</span>:             <span class="keyword">if</span> (args == <span class="keyword">null</span> || args.length == <span class="number">0</span>) {</span><br /><span class="line"><span class="number">28</span>:                 String config = ConfigUtils.getProperty(CONTAINER_KEY, loader.getDefaultExtensionName()); <span class="comment">// 默认 "spring"</span></span><br /><span class="line"><span class="number">29</span>:                 args = Constants.COMMA_SPLIT_PATTERN.split(config);</span><br /><span class="line"><span class="number">30</span>:             }</span><br /><span class="line"><span class="number">31</span>: </span><br /><span class="line"><span class="number">32</span>:             <span class="comment">// 加载容器数组</span></span><br /><span class="line"><span class="number">33</span>:             <span class="keyword">final</span> List&lt;Container&gt; containers = <span class="keyword">new</span> ArrayList&lt;Container&gt;();</span><br /><span class="line"><span class="number">34</span>:             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) {</span><br /><span class="line"><span class="number">35</span>:                 containers.add(loader.getExtension(args[i]));</span><br /><span class="line"><span class="number">36</span>:             }</span><br /><span class="line"><span class="number">37</span>:             logger.info(<span class="string">"Use container type("</span> + Arrays.toString(args) + <span class="string">") to run dubbo serivce."</span>);</span><br /><span class="line"><span class="number">38</span>: </span><br /><span class="line"><span class="number">39</span>:             <span class="comment">// ShutdownHook</span></span><br /><span class="line"><span class="number">40</span>:             <span class="keyword">if</span> (<span class="string">"true"</span>.equals(System.getProperty(SHUTDOWN_HOOK_KEY))) {</span><br /><span class="line"><span class="number">41</span>:                 Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() {</span><br /><span class="line"><span class="number">42</span>: </span><br /><span class="line"><span class="number">43</span>:                     <span class="meta">@Override</span></span><br /><span class="line"><span class="number">44</span>:                     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br /><span class="line"><span class="number">45</span>:                         <span class="keyword">for</span> (Container container : containers) {</span><br /><span class="line"><span class="number">46</span>:                             <span class="comment">// 关闭容器</span></span><br /><span class="line"><span class="number">47</span>:                             <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">48</span>:                                 container.stop();</span><br /><span class="line"><span class="number">49</span>:                                 logger.info(<span class="string">"Dubbo "</span> + container.getClass().getSimpleName() + <span class="string">" stopped!"</span>);</span><br /><span class="line"><span class="number">50</span>:                             } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line"><span class="number">51</span>:                                 logger.error(t.getMessage(), t);</span><br /><span class="line"><span class="number">52</span>:                             }</span><br /><span class="line"><span class="number">53</span>:                             <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">54</span>:                                 <span class="comment">// 获得 ReentrantLock</span></span><br /><span class="line"><span class="number">55</span>:                                 LOCK.lock();</span><br /><span class="line"><span class="number">56</span>:                                 <span class="comment">// 唤醒 Main 主线程的等待</span></span><br /><span class="line"><span class="number">57</span>:                                 STOP.signal();</span><br /><span class="line"><span class="number">58</span>:                             } <span class="keyword">finally</span> {</span><br /><span class="line"><span class="number">59</span>:                                 <span class="comment">// 释放 ReentrantLock</span></span><br /><span class="line"><span class="number">60</span>:                                 LOCK.unlock();</span><br /><span class="line"><span class="number">61</span>:                             }</span><br /><span class="line"><span class="number">62</span>:                         }</span><br /><span class="line"><span class="number">63</span>:                     }</span><br /><span class="line"><span class="number">64</span>:                     </span><br /><span class="line"><span class="number">65</span>:                 });</span><br /><span class="line"><span class="number">66</span>:             }</span><br /><span class="line"><span class="number">67</span>: </span><br /><span class="line"><span class="number">68</span>:             <span class="comment">// 启动容器</span></span><br /><span class="line"><span class="number">69</span>:             <span class="keyword">for</span> (Container container : containers) {</span><br /><span class="line"><span class="number">70</span>:                 container.start();</span><br /><span class="line"><span class="number">71</span>:                 logger.info(<span class="string">"Dubbo "</span> + container.getClass().getSimpleName() + <span class="string">" started!"</span>);</span><br /><span class="line"><span class="number">72</span>:             }</span><br /><span class="line"><span class="number">73</span>: </span><br /><span class="line"><span class="number">74</span>:             <span class="comment">// 输出提示，启动成功</span></span><br /><span class="line"><span class="number">75</span>:             System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"[yyyy-MM-dd HH:mm:ss]"</span>).format(<span class="keyword">new</span> Date()) + <span class="string">" Dubbo service server started!"</span>);</span><br /><span class="line"><span class="number">76</span>:         } <span class="keyword">catch</span> (RuntimeException e) {</span><br /><span class="line"><span class="number">77</span>:             <span class="comment">// 发生异常，JVM 退出</span></span><br /><span class="line"><span class="number">78</span>:             e.printStackTrace();</span><br /><span class="line"><span class="number">79</span>:             logger.error(e.getMessage(), e);</span><br /><span class="line"><span class="number">80</span>:             System.exit(<span class="number">1</span>);</span><br /><span class="line"><span class="number">81</span>:         }</span><br /><span class="line"><span class="number">82</span>:         <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">83</span>:             <span class="comment">// 获得 ReentrantLock</span></span><br /><span class="line"><span class="number">84</span>:             LOCK.lock();</span><br /><span class="line"><span class="number">85</span>:             <span class="comment">// 释放锁，并且将自己沉睡，等待唤醒</span></span><br /><span class="line"><span class="number">86</span>:             STOP.await();</span><br /><span class="line"><span class="number">87</span>:         } <span class="keyword">catch</span> (InterruptedException e) {</span><br /><span class="line"><span class="number">88</span>:             logger.warn(<span class="string">"Dubbo service server stopped, interrupted by other thread!"</span>, e);</span><br /><span class="line"><span class="number">89</span>:         } <span class="keyword">finally</span> {</span><br /><span class="line"><span class="number">90</span>:             <span class="comment">// 释放 ReentrantLock</span></span><br /><span class="line"><span class="number">91</span>:             LOCK.unlock();</span><br /><span class="line"><span class="number">92</span>:         }</span><br /><span class="line"><span class="number">93</span>:     }</span><br /><span class="line"><span class="number">94</span>: </span><br /><span class="line"><span class="number">95</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>CONTAINER_KEY</code>&nbsp;<strong>静态</strong>属性，Container 配置 KEY 。例如：<code>dubbo.container=spring,jetty,log4j</code>&nbsp;。</li>
<li><code>SHUTDOWN_HOOK_KEY</code>&nbsp;<strong>静态</strong>属性，ShutdownHook 是否开启配置 KEY。例如：<code>-Ddubbo.shutdown.hook=true</code>。</li>
<li><code>loader</code>&nbsp;<strong>静态</strong>属性，Container 拓展点对应的 ExtensionLoader 对象。</li>
<li><code>#main(args)</code>&nbsp;方法，<strong>初始化</strong>&nbsp;Container 服务容器。代码如下：
<ul>
<li>第 24 行：<code>args</code>&nbsp;启动参数，可配置要加载的容器。例如，<code>java com.alibaba.dubbo.container.Main spring jetty log4j</code>&nbsp;。</li>
<li>第 26 至 30 行：若&nbsp;<code>args</code>&nbsp;为空，从配置中加载。例如：<code>dubbo.container=spring,jetty,log4j</code>&nbsp;。若获取不到，使用 Container 的<strong>默认</strong>拓展&nbsp;<code>"spring"</code>&nbsp;。</li>
<li>第 32 至 37 行：使用 Dubbo SPI 机制，加载配置的 Container 对象。</li>
<li>第 68 至 72 行：循环调用&nbsp;<code>Container#start()</code>&nbsp;方法，启动容器。</li>
<li>第 75 行：输出提示，启动<strong>成功</strong>。</li>
<li>第 76 至 81 行：若发生异常，打印错误日志，并 JVM 退出。</li>
<li>第 84 行：调用&nbsp;<code>ReentrantLock#lock()</code>&nbsp;方法，获得 ReentrantLock 。</li>
<li>第 86 行：调用&nbsp;<code>Condition#await()</code>&nbsp;方法，<strong>释放</strong>锁，并且将自己<strong>沉睡</strong>，等待<strong>唤醒</strong>。</li>
<li>========== ShutdownHook ==========</li>
<li>第 40 至 41 行：当配置 JVM 启动参数带有&nbsp;<code>Ddubbo.shutdown.hook=true</code>&nbsp;时，添加关闭的 ShutdownHook 。
<ul>
<li>当读到此处时，老艿艿就有个疑惑，如果不开启 ShutdownHook ，那岂不是 Main 一直等待，JVM 无法结束了？🙂 答案实际是不会，JVM 正常退出时，例如使用&nbsp;<code>kill pid</code>&nbsp;指定，只要 ShutdownHook 全部执行完成即可退出，无需 Main 函数执行完成。如果没有 ShutdownHook ，那就直接退出。</li>
<li>那么 Main 的<strong>等待唤醒</strong>有什么作用？如果【第 86 行】不进行等待，Main 执行完成，就会触发 JVM 退出，导致 Dubbo 服务退出。所以相当于，起到了 JVM 进程常驻的作用。</li>
</ul>
</li>
<li>第 45 至 52 行：调用&nbsp;<code>Container#stop()</code>&nbsp;方法，关闭容器。</li>
<li>第 53 至 61 行：调用&nbsp;<code>Condition#signal()</code>&nbsp;方法，唤醒 Main 的等待。</li>
</ul>
</li>
<li>在<strong>早期版本</strong>&nbsp;的 Main 实现，等待唤醒基于&nbsp;<strong>Main.class 的 wait/notify</strong>&nbsp;机制实现。考虑到安全性，<code>Main.class#notify()</code>&nbsp;方法，可以被任意代码访问，导致非正常退出。所以改成了 ReentrantLock + Condition 来实现。值得借鉴。详细参见&nbsp;<a href="https://github.com/apache/incubator-dubbo/pull/520" target="_blank" rel="external nofollow noopener noreferrer">《ISSUE#520 shutdown with count down latch》</a>&nbsp;。</li>
</ul>
<h1 id="4-启动与暂停">4. 启动与暂停</h1>
<p>在&nbsp;<code>dubbo-container-api</code>&nbsp;项目，<a href="https://github.com/apache/incubator-dubbo/tree/1de21470c95c9bf3724b39b79a0cc53eeb0594ce/dubbo-container/dubbo-container-api/src/main/resources/META-INF/assembly/bin" target="_blank" rel="external nofollow noopener noreferrer"><code>resources/META-INF/assembly/bin/</code></a>&nbsp;下，提供了脚本：</p>
<ul>
<li><code>start.sh</code></li>
<li><code>stop.sh</code></li>
<li><code>restart.sh</code></li>
<li><code>dump.sh</code></li>
</ul>
<blockquote>
<p>还有一个&nbsp;<code>server.sh</code>&nbsp;，是根据<strong>参数</strong>，调用上述脚本。</p>
</blockquote>
<p>🙂 神秘的微笑。详细解析，参见&nbsp;<a href="https://blog.csdn.net/evankaka/article/details/61617483" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo应用启动与停止脚本,超详细解析》</a>&nbsp;文章。</p>
<h1 id="666-彩蛋">666. 彩蛋</h1>
<p>推荐阅读：</p>
<ul>
<li><a href="https://blog.csdn.net/vernonzheng/article/details/8288251" target="_blank" rel="external nofollow noopener noreferrer">《Java多线程（九）之ReentrantLock与Condition》</a></li>
<li><a href="https://www.cnkirito.moe/2018/01/14/gracefully-shutdown/" target="_blank" rel="external nofollow noopener noreferrer">《研究优雅停机时的一点思考》</a></li>
</ul>
</div>
</header>