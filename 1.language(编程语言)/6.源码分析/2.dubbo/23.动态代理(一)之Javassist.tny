<header class="article-header">
<h1 class="article-title">动态代理（一）之 Javassist</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>本文分享 Dubbo&nbsp;<strong>动态代理</strong>的实现。</p>
<p>在&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/introduction.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; schema 配置参考手册》</a>&nbsp;中，我们可以看到&nbsp;<code>&lt;dubbo:service /&gt;</code>&nbsp;和&nbsp;<code>&lt;dubbo:reference /&gt;</code>&nbsp;标签中，可以通过&nbsp;<code>"proxy"</code>&nbsp;属性，可以配置动态代理的生成方式：</p>
<blockquote>
<p>生成动态代理方式，可选：jdk / javassist</p>
</blockquote>
<p>从说明中，我们可以看到，Dubbo 实现了<strong>两种</strong>方式生成代理：</p>
<ul>
<li>Javassit</li>
<li>JDK</li>
</ul>
<p>🙂 本文分享 Javassist 实现动态代理的源码；涉及代码如下：</p>
<ul>
<li><code>dubbo-common</code>&nbsp;模块的&nbsp;<code>bytecode</code>&nbsp;包。</li>
<li><code>dubbo-rpc-api</code>&nbsp;模块的&nbsp;<code>proxy</code>&nbsp;包。</li>
</ul>
<p>下一篇文章分享 JDK 实现动态代理的源码。</p>
<h1 id="2-性能">2. 性能</h1>
<p>在分享具体实现之前，可能有胖友对性能方面感兴趣，可以看看如下的内容：</p>
<ul>
<li><a href="http://javatar.iteye.com/blog/814426" target="_blank" rel="external nofollow noopener noreferrer">《动态代理方案性能对比》</a></li>
<li>
<p>来自老徐的某篇文章</p>
<blockquote>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_09_13/01.png" alt="菜逼老徐" /></p>
</blockquote>
</li>
</ul>
<h1 id="3-整体流程">3. 整体流程</h1>
<p>😈 瞎比比了这么多，我们开始进入正题了。相信很多胖友对<strong>动态代理</strong>的概念已经理解（如果暂时不理解，请 Google 下），那么 Dubbo 对它们使用在哪呢？见下图：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_09_13/02.png" alt="菜逼老王" /></p>
<blockquote>
<p>旁白君：本图暂不考虑集群容错、网络调用、序列化反序列等。</p>
</blockquote>
<ul>
<li>在 Dubbo 中，我们使用&nbsp;<strong>Service 接口</strong>，作为服务 API 的契约。</li>
<li>
<p>在 Consumer 中，我们调用 Service 接口的方法时，实际调用的是 Dubbo 动态代理。下面先一起来看一个生成的&nbsp;<strong>proxy</strong>&nbsp;代码的示例：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">package</span> com.alibaba.dubbo.common.bytecode;</span><br /><span class="line"> <span class="number">2</span>: </span><br /><span class="line"> <span class="number">3</span>: <span class="keyword">import</span> com.alibaba.dubbo.demo.DemoService;</span><br /><span class="line"> <span class="number">4</span>: <span class="keyword">import</span> com.alibaba.dubbo.rpc.service.EchoService;</span><br /><span class="line"> <span class="number">5</span>: <span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br /><span class="line"> <span class="number">6</span>: <span class="keyword">import</span> java.lang.reflect.Method;</span><br /><span class="line"> <span class="number">7</span>: </span><br /><span class="line"> <span class="number">8</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">proxy0</span></span></span><br /><span class="line"> 9:   implements ClassGenerator.DC, EchoService, DemoService</span><br /><span class="line"><span class="number">10</span>: {</span><br /><span class="line"><span class="number">11</span>:   <span class="keyword">public</span> <span class="keyword">static</span> Method[] methods;</span><br /><span class="line"><span class="number">12</span>:   <span class="keyword">private</span> InvocationHandler handler;</span><br /><span class="line"><span class="number">13</span>:   </span><br /><span class="line"><span class="number">14</span>:   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bye</span><span class="params">(Object paramObject)</span></span></span><br /><span class="line"><span class="function">15:   </span>{</span><br /><span class="line"><span class="number">16</span>:     Object[] arrayOfObject = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br /><span class="line"><span class="number">17</span>:     arrayOfObject[<span class="number">0</span>] = paramObject;</span><br /><span class="line"><span class="number">18</span>:     Object localObject = <span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, methods[<span class="number">0</span>], arrayOfObject);</span><br /><span class="line"><span class="number">19</span>:   }</span><br /><span class="line"><span class="number">20</span>:   </span><br /><span class="line"><span class="number">21</span>:   <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String paramString)</span></span></span><br /><span class="line"><span class="function">22:   </span>{</span><br /><span class="line"><span class="number">23</span>:     Object[] arrayOfObject = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br /><span class="line"><span class="number">24</span>:     arrayOfObject[<span class="number">0</span>] = paramString;</span><br /><span class="line"><span class="number">25</span>:     Object localObject = <span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, methods[<span class="number">1</span>], arrayOfObject);</span><br /><span class="line"><span class="number">26</span>:     <span class="keyword">return</span> (String)localObject;</span><br /><span class="line"><span class="number">27</span>:   }</span><br /><span class="line"><span class="number">28</span>:   </span><br /><span class="line"><span class="number">29</span>:   <span class="keyword">public</span> Object $echo(Object paramObject)</span><br /><span class="line"><span class="number">30</span>:   {</span><br /><span class="line"><span class="number">31</span>:     Object[] arrayOfObject = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br /><span class="line"><span class="number">32</span>:     arrayOfObject[<span class="number">0</span>] = paramObject;</span><br /><span class="line"><span class="number">33</span>:     Object localObject = <span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, methods[<span class="number">2</span>], arrayOfObject);</span><br /><span class="line"><span class="number">34</span>:     <span class="keyword">return</span> (Object)localObject;</span><br /><span class="line"><span class="number">35</span>:   }</span><br /><span class="line"><span class="number">36</span>:   </span><br /><span class="line"><span class="number">37</span>:   <span class="function"><span class="keyword">public</span> <span class="title">proxy0</span><span class="params">()</span> </span>{}</span><br /><span class="line"><span class="number">38</span>:   </span><br /><span class="line"><span class="number">39</span>:   <span class="function"><span class="keyword">public</span> <span class="title">proxy0</span><span class="params">(InvocationHandler paramInvocationHandler)</span></span></span><br /><span class="line"><span class="function">40:   </span>{</span><br /><span class="line"><span class="number">41</span>:     <span class="keyword">this</span>.handler = paramInvocationHandler;</span><br /><span class="line"><span class="number">42</span>:   }</span><br /><span class="line"><span class="number">43</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>该类通过&nbsp;<code>dubbo-common</code>&nbsp;模块的&nbsp;<code>bytecode</code>&nbsp;模块的&nbsp;<strong>Proxy</strong>&nbsp;类，<strong>自动生成</strong>，使用 Javassist 技术。</li>
<li>生成的&nbsp;<strong>proxy</strong>&nbsp;类会<strong>实现</strong>我们定义的 Service 接口( 例如，此处是 DemoService )。</li>
<li><code>#bye(Object)</code>&nbsp;和&nbsp;<code>#sayHello(Object)</code>&nbsp;方法，是我们定义在 DemoService 的<strong>接口方法</strong>，在生成的&nbsp;<strong>proxy</strong>类中，实现这些定义在接口中的方法，收拢统一调用&nbsp;<code>java.lang.reflect.InvocationHandler#invoke(proxy, method, args)</code>&nbsp;方法。通过这样的方式，可以调用到最终的&nbsp;<code>Invoker#invoke(Invocation)</code>&nbsp;方法，实现 RPC 调用。</li>
<li>注意，此处我们一直用的&nbsp;<strong>proxy</strong>&nbsp;一直是小写的，这是为什么呢？请见下文大写的&nbsp;<strong>Proxy</strong>&nbsp;类。</li>
</ul>
</li>
<li>
<p>在 Provider 中，XXXProtocol 会获得被调用的 Exporter 对象，从而获得到 Invoker 对象。但是呢，Invoker 对象实际和 Service 实现对象，是无法直接调用，需要有中间的一层 Wrapper 来<strong>代理分发</strong>到 Service 对应的方法。下面我们来看一个生成的 Wrapper 代码的示例：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">  <span class="number">1</span>: <span class="keyword">package</span> com.alibaba.dubbo.common.bytecode;</span><br /><span class="line">  <span class="number">2</span>: </span><br /><span class="line">  <span class="number">3</span>: <span class="keyword">import</span> com.alibaba.dubbo.demo.provider.DemoDAO;</span><br /><span class="line">  <span class="number">4</span>: <span class="keyword">import</span> com.alibaba.dubbo.demo.provider.DemoServiceImpl;</span><br /><span class="line">  <span class="number">5</span>: <span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br /><span class="line">  <span class="number">6</span>: <span class="keyword">import</span> java.util.Map;</span><br /><span class="line">  <span class="number">7</span>: </span><br /><span class="line">  <span class="number">8</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper1</span></span></span><br /><span class="line">  9:   extends Wrapper</span><br /><span class="line"> <span class="number">10</span>:   implements ClassGenerator.DC</span><br /><span class="line"> <span class="number">11</span>: {</span><br /><span class="line"> <span class="number">12</span>:   <span class="keyword">public</span> <span class="keyword">static</span> String[] pns;</span><br /><span class="line"> <span class="number">13</span>:   <span class="keyword">public</span> <span class="keyword">static</span> Map pts;</span><br /><span class="line"> <span class="number">14</span>:   <span class="keyword">public</span> <span class="keyword">static</span> String[] mns;</span><br /><span class="line"> <span class="number">15</span>:   <span class="keyword">public</span> <span class="keyword">static</span> String[] dmns;</span><br /><span class="line"> <span class="number">16</span>:   <span class="keyword">public</span> <span class="keyword">static</span> Class[] mts0;</span><br /><span class="line"> <span class="number">17</span>:   <span class="keyword">public</span> <span class="keyword">static</span> Class[] mts1;</span><br /><span class="line"> <span class="number">18</span>:   <span class="keyword">public</span> <span class="keyword">static</span> Class[] mts2;</span><br /><span class="line"> <span class="number">19</span>:   </span><br /><span class="line"> <span class="number">20</span>:   <span class="keyword">public</span> String[] getPropertyNames()</span><br /><span class="line"> <span class="number">21</span>:   {</span><br /><span class="line"> <span class="number">22</span>:     <span class="keyword">return</span> pns;</span><br /><span class="line"> <span class="number">23</span>:   }</span><br /><span class="line"> <span class="number">24</span>:   </span><br /><span class="line"> <span class="number">25</span>:   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasProperty</span><span class="params">(String paramString)</span></span></span><br /><span class="line"><span class="function"> 26:   </span>{</span><br /><span class="line"> <span class="number">27</span>:     <span class="keyword">return</span> pts.containsKey(paramString);</span><br /><span class="line"> <span class="number">28</span>:   }</span><br /><span class="line"> <span class="number">29</span>:   </span><br /><span class="line"> <span class="number">30</span>:   <span class="function"><span class="keyword">public</span> Class <span class="title">getPropertyType</span><span class="params">(String paramString)</span></span></span><br /><span class="line"><span class="function"> 31:   </span>{</span><br /><span class="line"> <span class="number">32</span>:     <span class="keyword">return</span> (Class)pts.get(paramString);</span><br /><span class="line"> <span class="number">33</span>:   }</span><br /><span class="line"> <span class="number">34</span>:   </span><br /><span class="line"> <span class="number">35</span>:   <span class="keyword">public</span> String[] getMethodNames()</span><br /><span class="line"> <span class="number">36</span>:   {</span><br /><span class="line"> <span class="number">37</span>:     <span class="keyword">return</span> mns;</span><br /><span class="line"> <span class="number">38</span>:   }</span><br /><span class="line"> <span class="number">39</span>:   </span><br /><span class="line"> <span class="number">40</span>:   <span class="keyword">public</span> String[] getDeclaredMethodNames()</span><br /><span class="line"> <span class="number">41</span>:   {</span><br /><span class="line"> <span class="number">42</span>:     <span class="keyword">return</span> dmns;</span><br /><span class="line"> <span class="number">43</span>:   }</span><br /><span class="line"> <span class="number">44</span>:   </span><br /><span class="line"> <span class="number">45</span>:   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyValue</span><span class="params">(Object paramObject1, String paramString, Object paramObject2)</span></span></span><br /><span class="line"><span class="function"> 46:   </span>{</span><br /><span class="line"> <span class="number">47</span>:     DemoServiceImpl w;</span><br /><span class="line"> <span class="number">48</span>:     <span class="keyword">try</span></span><br /><span class="line"> <span class="number">49</span>:     {</span><br /><span class="line"> <span class="number">50</span>:       w = (DemoServiceImpl)paramObject1;</span><br /><span class="line"> <span class="number">51</span>:     }</span><br /><span class="line"> <span class="number">52</span>:     <span class="keyword">catch</span> (Throwable localThrowable)</span><br /><span class="line"> <span class="number">53</span>:     {</span><br /><span class="line"> <span class="number">54</span>:       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(localThrowable);</span><br /><span class="line"> <span class="number">55</span>:     }</span><br /><span class="line"> <span class="number">56</span>:     <span class="keyword">if</span> (paramString.equals(<span class="string">"test01"</span>))</span><br /><span class="line"> <span class="number">57</span>:     {</span><br /><span class="line"> <span class="number">58</span>:       w.test01 = ((String)paramObject2);</span><br /><span class="line"> <span class="number">59</span>:       <span class="keyword">return</span>;</span><br /><span class="line"> <span class="number">60</span>:     }</span><br /><span class="line"> <span class="number">61</span>:     <span class="keyword">if</span> (paramString.equals(<span class="string">"demoDAO"</span>))</span><br /><span class="line"> <span class="number">62</span>:     {</span><br /><span class="line"> <span class="number">63</span>:       localDemoServiceImpl.setDemoDAO((DemoDAO)paramObject2);</span><br /><span class="line"> <span class="number">64</span>:       <span class="keyword">return</span>;</span><br /><span class="line"> <span class="number">65</span>:     }</span><br /><span class="line"> <span class="number">66</span>:     <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchPropertyException(<span class="string">"Not found property \""</span> + paramString + <span class="string">"\" filed or setter method in class com.alibaba.dubbo.demo.provider.DemoServiceImpl."</span>);</span><br /><span class="line"> <span class="number">67</span>:   }</span><br /><span class="line"> <span class="number">68</span>:   </span><br /><span class="line"> <span class="number">69</span>:   <span class="function"><span class="keyword">public</span> Object <span class="title">getPropertyValue</span><span class="params">(Object paramObject, String paramString)</span></span></span><br /><span class="line"><span class="function"> 70:   </span>{</span><br /><span class="line"> <span class="number">71</span>:     DemoServiceImpl w;</span><br /><span class="line"> <span class="number">72</span>:     <span class="keyword">try</span></span><br /><span class="line"> <span class="number">73</span>:     {</span><br /><span class="line"> <span class="number">74</span>:       w = (DemoServiceImpl)paramObject;</span><br /><span class="line"> <span class="number">75</span>:     }</span><br /><span class="line"> <span class="number">76</span>:     <span class="keyword">catch</span> (Throwable localThrowable)</span><br /><span class="line"> <span class="number">77</span>:     {</span><br /><span class="line"> <span class="number">78</span>:       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(localThrowable);</span><br /><span class="line"> <span class="number">79</span>:     }</span><br /><span class="line"> <span class="number">80</span>:     <span class="keyword">if</span> (paramString.equals(<span class="string">"test01"</span>)) {</span><br /><span class="line"> <span class="number">81</span>:       <span class="keyword">return</span> localDemoServiceImpl.test01;</span><br /><span class="line"> <span class="number">82</span>:     }</span><br /><span class="line"> <span class="number">83</span>:     <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchPropertyException(<span class="string">"Not found property \""</span> + paramString + <span class="string">"\" filed or setter method in class com.alibaba.dubbo.demo.provider.DemoServiceImpl."</span>);</span><br /><span class="line"> <span class="number">84</span>:   }</span><br /><span class="line"> <span class="number">85</span>:   </span><br /><span class="line"> <span class="number">86</span>:   <span class="function"><span class="keyword">public</span> Object <span class="title">invokeMethod</span><span class="params">(Object paramObject, String paramString, Class[] paramArrayOfClass, Object[] paramArrayOfObject)</span></span></span><br /><span class="line"><span class="function"> 87:     <span class="keyword">throws</span> InvocationTargetException</span></span><br /><span class="line"><span class="function"> 88:   </span>{</span><br /><span class="line"> <span class="number">89</span>:     DemoServiceImpl w;</span><br /><span class="line"> <span class="number">90</span>:     <span class="keyword">try</span></span><br /><span class="line"> <span class="number">91</span>:     {</span><br /><span class="line"> <span class="number">92</span>:       w = (DemoServiceImpl)paramObject;</span><br /><span class="line"> <span class="number">93</span>:     }</span><br /><span class="line"> <span class="number">94</span>:     <span class="keyword">catch</span> (Throwable localThrowable1)</span><br /><span class="line"> <span class="number">95</span>:     {</span><br /><span class="line"> <span class="number">96</span>:       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(localThrowable1);</span><br /><span class="line"> <span class="number">97</span>:     }</span><br /><span class="line"> <span class="number">98</span>:     <span class="keyword">try</span></span><br /><span class="line"> <span class="number">99</span>:     {</span><br /><span class="line"><span class="number">100</span>:       <span class="keyword">if</span> (<span class="string">"sayHello"</span>.equals(paramString) &amp;&amp; paramArrayOfClass.length == <span class="number">1</span>) {</span><br /><span class="line"><span class="number">101</span>:         <span class="keyword">return</span> w.sayHello((String)paramArrayOfObject[<span class="number">0</span>]);</span><br /><span class="line"><span class="number">102</span>:       }</span><br /><span class="line"><span class="number">103</span>:       <span class="keyword">if</span> (<span class="string">"bye"</span>.equals(paramString) &amp;&amp; paramArrayOfClass.length == <span class="number">1</span>)</span><br /><span class="line"><span class="number">104</span>:       {</span><br /><span class="line"><span class="number">105</span>:         w.bye((Object)paramArrayOfObject[<span class="number">0</span>]);</span><br /><span class="line"><span class="number">106</span>:         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line"><span class="number">107</span>:       }</span><br /><span class="line"><span class="number">108</span>:       <span class="keyword">if</span> (<span class="string">"setDemoDAO"</span>.equals(paramString) &amp;&amp; paramArrayOfClass.length == <span class="number">1</span>)</span><br /><span class="line"><span class="number">109</span>:       {</span><br /><span class="line"><span class="number">110</span>:         w.setDemoDAO((DemoDAO)paramArrayOfObject[<span class="number">0</span>]);</span><br /><span class="line"><span class="number">111</span>:         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br /><span class="line"><span class="number">112</span>:       }</span><br /><span class="line"><span class="number">113</span>:     }</span><br /><span class="line"><span class="number">114</span>:     <span class="keyword">catch</span> (Throwable localThrowable2)</span><br /><span class="line"><span class="number">115</span>:     {</span><br /><span class="line"><span class="number">116</span>:       <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(localThrowable2);</span><br /><span class="line"><span class="number">117</span>:     }</span><br /><span class="line"><span class="number">118</span>:     <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(<span class="string">"Not found method \""</span> + paramString + <span class="string">"\" in class com.alibaba.dubbo.demo.provider.DemoServiceImpl."</span>);</span><br /><span class="line"><span class="number">119</span>:   }</span><br /><span class="line"><span class="number">120</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>该类通过&nbsp;<code>dubbo-common</code>&nbsp;模块的&nbsp;<code>bytecode</code>&nbsp;模块的 Wrapper 类，<strong>自动生成</strong>，使用 Javassist 技术。</li>
<li>不同于生成的&nbsp;<strong>proxy</strong>类，不实现 Service 接口类，而是在&nbsp;<code>#invokeMethod(paramObject, paramString, paramArrayOfClass, paramArrayOfObject)</code>&nbsp;方法，提供给&nbsp;<code>Invoker#invoke(invocation)</code>&nbsp;中调用，统一分发请求到 Service 对应的方法。从职能上来看，有一点像硬编码的 Controller 。</li>
<li>一个生成的&nbsp;<strong>Wrapper</strong>类，只对应一个 Service ，从第 75 行的代码，我们也可以看出。</li>
</ul>
</li>
</ul>
<h1 id="4-ProxyFactory">4. ProxyFactory</h1>
<p><a href="https://github.com/YunaiV/dubbo/blob/6de0a069fcc870894e64ffd54a24e334b19dcb36/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/ProxyFactory.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.rpc.ProxyFactory</code></a>&nbsp;，代理工厂接口。</p>
<p>在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/implementation-intro/">《精尽 Dubbo 源码分析 &mdash;&mdash; 核心流程一览》</a>&nbsp;的&nbsp;<a href="http://svip.iocoder.cn/Dubbo/proxy-javassist/">「4.5 ProxyFactory」</a>，已经分享，胖友点击查看。</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_03_01/13.png" alt="ProxyFactory 子类" /></p>
<h2 id="4-1-AbstractProxyFactory">4.1 AbstractProxyFactory</h2>
<p><code>com.alibaba.dubbo.rpc.proxy.AbstractProxyFactory</code>&nbsp;，实现 ProxyFactory 接口，代理工厂抽象类。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProxyFactory</span> <span class="keyword">implements</span> <span class="title">ProxyFactory</span> </span>{</span><br /><span class="line"> <span class="number">2</span>: </span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>{</span><br /><span class="line"> <span class="number">4</span>:         Class&lt;?&gt;[] interfaces = <span class="keyword">null</span>;</span><br /><span class="line"> <span class="number">5</span>:         <span class="comment">// TODO 8022 芋艿</span></span><br /><span class="line"> <span class="number">6</span>:         String config = invoker.getUrl().getParameter(<span class="string">"interfaces"</span>);</span><br /><span class="line"> <span class="number">7</span>:         <span class="keyword">if</span> (config != <span class="keyword">null</span> &amp;&amp; config.length() &gt; <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">8</span>:             String[] types = Constants.COMMA_SPLIT_PATTERN.split(config);</span><br /><span class="line"> <span class="number">9</span>:             <span class="keyword">if</span> (types != <span class="keyword">null</span> &amp;&amp; types.length &gt; <span class="number">0</span>) {</span><br /><span class="line"><span class="number">10</span>:                 interfaces = <span class="keyword">new</span> Class&lt;?&gt;[types.length + <span class="number">2</span>];</span><br /><span class="line"><span class="number">11</span>:                 interfaces[<span class="number">0</span>] = invoker.getInterface();</span><br /><span class="line"><span class="number">12</span>:                 interfaces[<span class="number">1</span>] = EchoService.class;</span><br /><span class="line"><span class="number">13</span>:                 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; types.length; i++) {</span><br /><span class="line"><span class="number">14</span>:                     interfaces[i + <span class="number">1</span>] = ReflectUtils.forName(types[i]);</span><br /><span class="line"><span class="number">15</span>:                 }</span><br /><span class="line"><span class="number">16</span>:             }</span><br /><span class="line"><span class="number">17</span>:         }</span><br /><span class="line"><span class="number">18</span>:         <span class="comment">// 增加 EchoService 接口，用于回生测试。参见文档《回声测试》http://dubbo.apache.org/zh-cn/docs/user/demos/echo-service.html</span></span><br /><span class="line"><span class="number">19</span>:         <span class="keyword">if</span> (interfaces == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">20</span>:             interfaces = <span class="keyword">new</span> Class&lt;?&gt;[]{invoker.getInterface(), EchoService.class};</span><br /><span class="line"><span class="number">21</span>:         }</span><br /><span class="line"><span class="number">22</span>:         <span class="keyword">return</span> getProxy(invoker, interfaces);</span><br /><span class="line"><span class="number">23</span>:     }</span><br /><span class="line"><span class="number">24</span>: </span><br /><span class="line"><span class="number">25</span>:     <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] types)</span></span>;</span><br /><span class="line"><span class="number">26</span>: </span><br /><span class="line"><span class="number">27</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p>可以看到，该抽象类，主要是实现了&nbsp;<code>#getProxy(invoker)</code>&nbsp;方法，获得需要生成代理的接口们。</p>
<ul>
<li>第 5 至 17 行： TODO 8022 芋艿</li>
<li>
<p>第 18 至 21 行：在原有 Invoker 对应<strong>关联</strong>的 Service 接口之上，增加 EchoService 接口。</p>
<blockquote>
<p>FROM&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/echo-service.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 回声测试》</a></p>
<p>回声测试用于检测服务是否可用，回声测试按照正常请求流程执行，能够测试整个调用是否通畅，可用于监控。<br />所有服务自动实现 EchoService 接口，只需将任意服务引用强制转型为 EchoService，即可使用。</p>
</blockquote>
</li>
<li>
<p>第 22 行：调用&nbsp;<code>#getProxy(invoker, types)</code>&nbsp;<strong>抽象</strong>方法，获得 Proxy 对象。</p>
</li>
</ul>
</li>
</ul>
<h2 id="4-2-StubProxyFactoryWrapper">4.2 StubProxyFactoryWrapper</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/afb312f7dce997f5f90ba686345f4354e786534d/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/proxy/wrapper/StubProxyFactoryWrapper.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper</code></a>&nbsp;，实现 ProxyFactory 接口，Stub 代理工厂 Wrapper 实现类，基于 Dubbo SPI Wrapper 机制加载。</p>
<p>🙂 该类，不在本文的范畴内，感兴趣的胖友可以先看下&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; 本地存根》</a>&nbsp;。后续，我们单独开文章分享。</p>
<h2 id="4-3-JavassistProxyFactory">4.3 JavassistProxyFactory</h2>
<p><code>com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory</code>&nbsp;，实现 AbstractProxyFactory 抽象类，基于 Javassist 代理工厂实现类。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavassistProxyFactory</span> <span class="keyword">extends</span> <span class="title">AbstractProxyFactory</span> </span>{</span><br /><span class="line"> <span class="number">2</span>: </span><br /><span class="line"> <span class="number">3</span>:     <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br /><span class="line"> <span class="number">4</span>:     <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces)</span> </span>{</span><br /><span class="line"> <span class="number">5</span>:         <span class="keyword">return</span> (T) Proxy.getProxy(interfaces).newInstance(<span class="keyword">new</span> InvokerInvocationHandler(invoker));</span><br /><span class="line"> <span class="number">6</span>:     }</span><br /><span class="line"> <span class="number">7</span>: </span><br /><span class="line"> <span class="number">8</span>:     <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>{</span><br /><span class="line"> <span class="number">9</span>:         <span class="comment">// TODO Wrapper cannot handle this scenario correctly: the classname contains '$'</span></span><br /><span class="line"><span class="number">10</span>:         <span class="comment">// TODO Wrapper类不能正确处理带$的类名</span></span><br /><span class="line"><span class="number">11</span>:         <span class="keyword">final</span> Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf(<span class="string">'$'</span>) &lt; <span class="number">0</span> ? proxy.getClass() : type);</span><br /><span class="line"><span class="number">12</span>:         <span class="keyword">return</span> <span class="keyword">new</span> AbstractProxyInvoker&lt;T&gt;(proxy, type, url) {</span><br /><span class="line"><span class="number">13</span>:             <span class="meta">@Override</span></span><br /><span class="line"><span class="number">14</span>:             <span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(T proxy, String methodName,</span></span></span><br /><span class="line"><span class="function"><span class="params"><span class="number">15</span>:                                       Class&lt;?&gt;[] parameterTypes,</span></span></span><br /><span class="line"><span class="function"><span class="params"><span class="number">16</span>:                                       Object[] arguments)</span> <span class="keyword">throws</span> Throwable </span>{</span><br /><span class="line"><span class="number">17</span>:                 <span class="keyword">return</span> wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);</span><br /><span class="line"><span class="number">18</span>:             }</span><br /><span class="line"><span class="number">19</span>:         };</span><br /><span class="line"><span class="number">20</span>:     }</span><br /><span class="line"><span class="number">21</span>: </span><br /><span class="line"><span class="number">22</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>#getProxy(invoker, interfaces)</code>&nbsp;方法
<ul>
<li>第 5 行：调用&nbsp;<code>Proxy#getProxy(interface)</code>&nbsp;方法，获得&nbsp;<strong>Proxy</strong>&nbsp;对象。</li>
<li>第 5 行：调用&nbsp;<code>Proxy#newInstance(InvocationHandler)</code>&nbsp;方法，获得&nbsp;<strong>proxy</strong>&nbsp;对象。其中传入的参数是 InvokerInvocationHandler 类，通过这样的方式，让 proxy 和真正的逻辑代码解耦。
<ul>
<li>Proxy 和 proxy ，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/proxy-javassist/">「7.3 Proxy」</a>&nbsp;中，详细解析。</li>
<li>InvokerInvocationHandler ，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/proxy-javassist/">「5. InvokerInvocationHandler」</a>&nbsp;中，详细解析。</li>
</ul>
</li>
</ul>
</li>
<li><code>#getInvoker(proxy, type, url)</code>&nbsp;方法
<ul>
<li>第 11 行：调用&nbsp;<code>Wrapper#getWrapper(Class&lt;?&gt;)</code>&nbsp;方法，获得&nbsp;<strong>Wrapper</strong>&nbsp;对象。
<ul>
<li>Wrapper ，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/proxy-javassist/">「7.4 Wrapper」</a>&nbsp;中，详细解析。</li>
</ul>
</li>
<li>第 12 至 19 行：创建 AbstractProxyInvoker 对象，实现&nbsp;<code>#doInvoke(...)</code>&nbsp;方法。在该方法中，调用&nbsp;<code>Wrapper#invokeMethod(...)</code>&nbsp;方法，从而调用 Service 的方法。
<ul>
<li>AbstractProxyInvoker ，在&nbsp;<a href="http://svip.iocoder.cn/Dubbo/proxy-javassist/">「6. AbstractProxyInvoker」</a>&nbsp;中，详细解析。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="5-InvokerInvocationHandler">5. InvokerInvocationHandler</h1>
<p><code>com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler</code>&nbsp;，实现&nbsp;<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/InvocationHandler.html" target="_blank" rel="external nofollow noopener noreferrer"><code>java.lang.reflect.InvocationHandler</code></a>&nbsp;接口，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br /><span class="line"> <span class="number">2</span>: </span><br /><span class="line"> <span class="number">3</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment"> 4:      * Invoker 对象</span></span><br /><span class="line"><span class="comment"> 5:      */</span></span><br /><span class="line"> <span class="number">6</span>:     <span class="keyword">private</span> <span class="keyword">final</span> Invoker&lt;?&gt; invoker;</span><br /><span class="line"> <span class="number">7</span>: </span><br /><span class="line"> <span class="number">8</span>:     <span class="function"><span class="keyword">public</span> <span class="title">InvokerInvocationHandler</span><span class="params">(Invoker&lt;?&gt; handler)</span> </span>{</span><br /><span class="line"> <span class="number">9</span>:         <span class="keyword">this</span>.invoker = handler;</span><br /><span class="line"><span class="number">10</span>:     }</span><br /><span class="line"><span class="number">11</span>: </span><br /><span class="line"><span class="number">12</span>:     <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br /><span class="line"><span class="number">13</span>:         String methodName = method.getName();</span><br /><span class="line"><span class="number">14</span>:         Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br /><span class="line"><span class="number">15</span>:         <span class="comment">// wait 等方法，直接反射调用</span></span><br /><span class="line"><span class="number">16</span>:         <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) {</span><br /><span class="line"><span class="number">17</span>:             <span class="keyword">return</span> method.invoke(invoker, args);</span><br /><span class="line"><span class="number">18</span>:         }</span><br /><span class="line"><span class="number">19</span>:         <span class="comment">// 基础方法，不使用 RPC 调用</span></span><br /><span class="line"><span class="number">20</span>:         <span class="keyword">if</span> (<span class="string">"toString"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) {</span><br /><span class="line"><span class="number">21</span>:             <span class="keyword">return</span> invoker.toString();</span><br /><span class="line"><span class="number">22</span>:         }</span><br /><span class="line"><span class="number">23</span>:         <span class="keyword">if</span> (<span class="string">"hashCode"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) {</span><br /><span class="line"><span class="number">24</span>:             <span class="keyword">return</span> invoker.hashCode();</span><br /><span class="line"><span class="number">25</span>:         }</span><br /><span class="line"><span class="number">26</span>:         <span class="keyword">if</span> (<span class="string">"equals"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">1</span>) {</span><br /><span class="line"><span class="number">27</span>:             <span class="keyword">return</span> invoker.equals(args[<span class="number">0</span>]);</span><br /><span class="line"><span class="number">28</span>:         }</span><br /><span class="line"><span class="number">29</span>:         <span class="comment">// RPC 调用</span></span><br /><span class="line"><span class="number">30</span>:         <span class="keyword">return</span> invoker.invoke(<span class="keyword">new</span> RpcInvocation(method, args)).recreate();</span><br /><span class="line"><span class="number">31</span>:     }</span><br /><span class="line"><span class="number">32</span>: </span><br /><span class="line"><span class="number">33</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><code>invoker</code>&nbsp;属性，Invoker 对象，用于在&nbsp;<code>#invoke()</code>&nbsp;方法调用。</li>
<li>
<p><code>#invoke(proxy, method, args)</code>&nbsp;<strong>实现</strong>方法，核心逻辑是调用&nbsp;<code>Invoker#invoke(invocation)</code>&nbsp;方法，进行 RPC 调用。</p>
<ul>
<li>第 16 至 18 行：处理&nbsp;<code>#wait()</code>&nbsp;<code>#notify()</code>&nbsp;等方法，进行反射调用。</li>
<li>第 20 至 28 行：处理&nbsp;<code>#toString()</code>&nbsp;<code>#hashCode()</code>&nbsp;等方法，使用 Invoker 对象的方法，不进行 RPC 调用。</li>
<li>第 30 行：调用&nbsp;<code>Invoker#invoke(invocation)</code>&nbsp;方法，<strong>核心逻辑</strong>，进行 RPC 调用。</li>
<li>
<p>第 30 行：调用&nbsp;<code>Result#recreate()</code>&nbsp;方法，回放调用结果。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// RpcResult.java</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">recreate</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>{</span><br /><span class="line">    <span class="comment">// 有异常，抛出异常</span></span><br /><span class="line">    <span class="keyword">if</span> (exception != <span class="keyword">null</span>) {</span><br /><span class="line">        <span class="keyword">throw</span> exception;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="comment">// 无异常，返回结果</span></span><br /><span class="line">    <span class="keyword">return</span> result;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>x</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>🙂 通过 InvokerInvocationHandler ，可以实现 Proxy 和真正的逻辑解耦。</p>
<h1 id="6-AbstractProxyInvoker">6. AbstractProxyInvoker</h1>
<p><code>com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker</code>&nbsp;，实现 Invoker 接口，<strong>代理</strong>&nbsp;Invoker 对象的抽象类。</p>
<h2 id="6-1-属性">6.1 属性</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 代理的对象，一般是 Service 实现对象</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> T proxy;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 接口类型，一般是 Service 接口</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; type;</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * URL 对象，一般是暴露服务的 URL 对象</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> URL url;</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractProxyInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>{</span><br /><span class="line">    <span class="keyword">if</span> (proxy == <span class="keyword">null</span>) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"proxy == null"</span>);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">if</span> (type == <span class="keyword">null</span>) {</span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"interface == null"</span>);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">if</span> (!type.isInstance(proxy)) { <span class="comment">//</span></span><br /><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(proxy.getClass().getName() + <span class="string">" not implement interface "</span> + type);</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">this</span>.proxy = proxy;</span><br /><span class="line">    <span class="keyword">this</span>.type = type;</span><br /><span class="line">    <span class="keyword">this</span>.url = url;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<p>🙂 胖友，请看代码上的注释。</p>
<h2 id="6-2-invoke">6.2 invoke</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="number">1</span>: <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>{</span><br /><span class="line"><span class="number">2</span>:     <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">3</span>:         <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments()));</span><br /><span class="line"><span class="number">4</span>:     } <span class="keyword">catch</span> (InvocationTargetException e) {</span><br /><span class="line"><span class="number">5</span>:         <span class="keyword">return</span> <span class="keyword">new</span> RpcResult(e.getTargetException());</span><br /><span class="line"><span class="number">6</span>:     } <span class="keyword">catch</span> (Throwable e) {</span><br /><span class="line"><span class="number">7</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Failed to invoke remote proxy method "</span> + invocation.getMethodName() + <span class="string">" to "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br /><span class="line"><span class="number">8</span>:     }</span><br /><span class="line"><span class="number">9</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p>第 3 行：调用&nbsp;<code>#doInvoke(..)</code>&nbsp;<strong>抽象</strong>方法，执行调用，返回调用结果。<code>#doInvoke(...)</code>&nbsp;方法，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * 执行调用</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> proxy 代理的对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> methodName 方法名</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameterTypes 方法参数类型数组</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> arguments 方法参数数组</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@return</span> 调用结果</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Throwable 发生异常</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title">doInvoke</span><span class="params">(T proxy, String methodName, Class&lt;?&gt;[] parameterTypes, Object[] arguments)</span> <span class="keyword">throws</span> Throwable</span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p>第 3 行：创建 RpcResult 对象，将结果包装返回。</p>
</li>
<li>第 5 行：发生 InvocationTargetException 异常，创建 RpcResult 对象包装。
<ul>
<li><a href="https://blog.csdn.net/zhangzeyuaaa/article/details/39611467" target="_blank" rel="external nofollow noopener noreferrer">《 Java反射异常处理之InvocationTargetException》</a></li>
</ul>
</li>
</ul>
<h1 id="7-bytecode">7. bytecode</h1>
<p>在&nbsp;<code>dubbo-common</code>&nbsp;模块的&nbsp;<code>bytecode</code>&nbsp;包，基于 Javassit 库，<strong>动态编译</strong>，实现提供了<strong>通用的</strong>的动态代理实现。所以本小节，从<strong>动态编译</strong>的角度上来看，在内容上，和&nbsp;<a href="http://svip.iocoder.cn/Dubbo/compiler-javassist/?self">《精尽 Dubbo 源码分析 &mdash;&mdash; 动态编译（一）之 Javassist》</a>&nbsp;有一定的相似。</p>
<h2 id="7-1-ClassGenerator">7.1 ClassGenerator</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/b5a5adcd965393b374a4f58ecea90264251c3cdb/dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/ClassGenerator.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.common.bytecode.ClassGenerator</code></a>&nbsp;，类生成器，基于&nbsp;<strong>Javassist</strong>&nbsp;实现。</p>
<p>笔者在&nbsp;<a href="http://www.iocoder.cn/TCC-Transaction/dubbo-support/?self" target="_blank" rel="external nofollow noopener noreferrer">《TCC-Transaction 源码分析 &mdash;&mdash; Dubbo 支持》</a>&nbsp;的&nbsp;<a href="http://svip.iocoder.cn/Dubbo/proxy-javassist/">「2.1.3 TccProxy &amp; TccClassGenerator」</a>已经详细分享，基本类似，胖友瞅瞅噢。</p>
<h2 id="7-3-Proxy">7.3 Proxy</h2>
<p><a href="https://github.com/YunaiV/dubbo/blob/b5a5adcd965393b374a4f58ecea90264251c3cdb/dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/Proxy.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.common.bytecode.Proxy</code></a>&nbsp;，代理抽象类，用于创建 Proxy 和 proxy 对象。</p>
<p>笔者在&nbsp;<a href="http://www.iocoder.cn/TCC-Transaction/dubbo-support/?self" target="_blank" rel="external nofollow noopener noreferrer">《TCC-Transaction 源码分析 &mdash;&mdash; Dubbo 支持》</a>&nbsp;的&nbsp;<a href="http://svip.iocoder.cn/Dubbo/proxy-javassist/">「2.1.3 TccProxy &amp; TccClassGenerator」</a>已经详细分享，基本类似，胖友瞅瞅噢。</p>
<hr />
<p>如下是一个生成的&nbsp;<strong>Proxy</strong>&nbsp;代码的示例，代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">ClassGenerator</span>.<span class="title">DC</span> </span>{</span><br />    <br /><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(InvocationHandler paramInvocationHandler)</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> proxy0(paramInvocationHandler);</span><br /><span class="line">    }</span><br />    <br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li><strong>生成的Proxy</strong>&nbsp;实现 Proxy 抽象类，是创建&nbsp;<strong>生成的proxy</strong>&nbsp;的工厂（一一对应）。例如，Proxy0 创建 proxy0 对象。</li>
<li><code>#newInstance(InvocationHandler)</code>&nbsp;方法，创建&nbsp;<strong>生成的proxy</strong>&nbsp;的方法。</li>
</ul>
<h2 id="7-4-Wrapper">7.4 Wrapper</h2>
<p><a href="http://svip.iocoder.cn/Dubbo/proxy-javassist/TODO"><code>com.alibaba.dubbo.common.bytecode.Wrapper</code></a>&nbsp;，Wrapper 抽象类，用于<strong>创建某个对象的方法调用</strong>的包装器，以避免<strong>反射</strong>调用，提高性能。即：</p>
<figure class="highlight">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// 反射</span></span><br /><span class="line">Method#invoke(Object instance, Object[] args)</span><br /><br /><span class="line"><span class="comment">// 优化成===&gt;</span></span><br /><br /><span class="line"><span class="comment">// Wrapper</span></span><br /><span class="line">Wrapper#invokeMethod(Object instance, String mn, Class&lt;?&gt;[] types, Object[] args)</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>为什么会提高性能呢？看到上文的 Wrapper 代理的示例，相信胖友已经明白。</li>
</ul>
<h3 id="7-4-1-抽象方法">7.4.1 抽象方法</h3>
<p>在自动生成 Wrapper 类时，需要实现如下<strong>抽象</strong>方法：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> String[] getPropertyNames();</span><br /><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> Class&lt;?&gt; getPropertyType(String pn);</span><br /><br /><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasProperty</span><span class="params">(String name)</span></span>;</span><br /><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Object <span class="title">getPropertyValue</span><span class="params">(Object instance, String pn)</span> <span class="keyword">throws</span> NoSuchPropertyException, IllegalArgumentException</span>;</span><br /><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyValue</span><span class="params">(Object instance, String pn, Object pv)</span> <span class="keyword">throws</span> NoSuchPropertyException, IllegalArgumentException</span>;</span><br /><br /><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> String[] getMethodNames();</span><br /><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> String[] getDeclaredMethodNames();</span><br /><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * invoke method.</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * 调用方法</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> instance instance.</span></span><br /><span class="line"><span class="comment"> *                 被调用的对象</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> mn       method name.</span></span><br /><span class="line"><span class="comment"> *                 方法名</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> types 参数类型数组</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@param</span> args     argument array.</span></span><br /><span class="line"><span class="comment"> *                 参数数组</span></span><br /><span class="line"><span class="comment"> * <span class="doctag">@return</span> return value.</span></span><br /><span class="line"><span class="comment"> *                  返回值</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Object <span class="title">invokeMethod</span><span class="params">(Object instance, String mn, Class&lt;?&gt;[] types, Object[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException</span>;</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h3 id="7-4-2-getWrapper">7.4.2 getWrapper</h3>
<p><code>#getWrapper(c)</code>&nbsp;方法，根据指定类，获得 Wrapper 对象。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Wrapper <span class="title">getWrapper</span><span class="params">(Class&lt;?&gt; c)</span> </span>{</span><br /><span class="line"> <span class="number">2</span>:     <span class="comment">// 判断是否继承 ClassGenerator.DC.class ，如果是，拿到父类，避免重复包装</span></span><br /><span class="line"> <span class="number">3</span>:     <span class="keyword">while</span> (ClassGenerator.isDynamicClass(c)) <span class="comment">// can not wrapper on dynamic class.</span></span><br /><span class="line"> <span class="number">4</span>:         c = c.getSuperclass();</span><br /><span class="line"> <span class="number">5</span>: </span><br /><span class="line"> <span class="number">6</span>:     <span class="comment">// 指定类为 Object.class</span></span><br /><span class="line"> <span class="number">7</span>:     <span class="keyword">if</span> (c == Object.class)</span><br /><span class="line"> <span class="number">8</span>:         <span class="keyword">return</span> OBJECT_WRAPPER;</span><br /><span class="line"> <span class="number">9</span>: </span><br /><span class="line"><span class="number">10</span>:     <span class="comment">// 从缓存中获得 Wrapper 对象</span></span><br /><span class="line"><span class="number">11</span>:     Wrapper ret = WRAPPER_MAP.get(c);</span><br /><span class="line"><span class="number">12</span>:     <span class="comment">// 创建 Wrapper 对象，并添加到缓存</span></span><br /><span class="line"><span class="number">13</span>:     <span class="keyword">if</span> (ret == <span class="keyword">null</span>) {</span><br /><span class="line"><span class="number">14</span>:         ret = makeWrapper(c);</span><br /><span class="line"><span class="number">15</span>:         WRAPPER_MAP.put(c, ret);</span><br /><span class="line"><span class="number">16</span>:     }</span><br /><span class="line"><span class="number">17</span>:     <span class="keyword">return</span> ret;</span><br /><span class="line"><span class="number">18</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>第 3 至 4 行：判断是否已经继承了&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/91b4862d4aed0f984015b132c3cb426f9c3b0c76/dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/ClassGenerator.java#L382-L386" target="_blank" rel="external nofollow noopener noreferrer">ClassGenerator.DC.class</a>&nbsp;，如果是，拿到父类，避免<strong>重复包装</strong>。</li>
<li>第 7 至 8 行：若指定类为 Object.class ，返回&nbsp;<a href="https://github.com/YunaiV/dubbo/blob/91b4862d4aed0f984015b132c3cb426f9c3b0c76/dubbo-common/src/main/java/com/alibaba/dubbo/common/bytecode/Wrapper.java#L43-L95" target="_blank" rel="external nofollow noopener noreferrer">OBJECT_WRAPPER</a>&nbsp;对象。</li>
<li>
<p>第 11 行：从缓存&nbsp;<code>WRAPPER_MAP</code>&nbsp;中，获得 Wrapper 对象。<code>WRAPPER_MAP</code>&nbsp;代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Wrapper 对象缓存</span></span><br /><span class="line"><span class="comment"> * key ：Wrapper 类。</span></span><br /><span class="line"><span class="comment"> * value ：Proxy 对象</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Wrapper&gt; WRAPPER_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;Class&lt;?&gt;, Wrapper&gt;(); <span class="comment">//class wrapper map</span></span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p>第 13 至 16 行：调用&nbsp;<code>#makeWrapper(Class&lt;?&gt;)</code>&nbsp;方法，创建 Wrapper 对象，并添加到缓存。</p>
</li>
</ul>
<h3 id="7-4-3-makeWrapper">7.4.3 makeWrapper</h3>
<p><code>#makeWrapper(Class&lt;?&gt;)</code>&nbsp;方法，创建 Wrapper 对象。代码如下：</p>
<blockquote>
<p>旁白君：实现上，和 Proxy 差不过的，只生成<strong>一个</strong>&nbsp;Wrapper 类。</p>
</blockquote>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line">  <span class="number">1</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Wrapper <span class="title">makeWrapper</span><span class="params">(Class&lt;?&gt; c)</span> </span>{</span><br /><span class="line">  <span class="number">2</span>:     <span class="comment">// 非私有类</span></span><br /><span class="line">  <span class="number">3</span>:     <span class="keyword">if</span> (c.isPrimitive())</span><br /><span class="line">  <span class="number">4</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Can not create wrapper for primitive type: "</span> + c);</span><br /><span class="line">  <span class="number">5</span>: </span><br /><span class="line">  <span class="number">6</span>:     <span class="comment">// 类名</span></span><br /><span class="line">  <span class="number">7</span>:     String name = c.getName();</span><br /><span class="line">  <span class="number">8</span>:     <span class="comment">// 类加载器</span></span><br /><span class="line">  <span class="number">9</span>:     ClassLoader cl = ClassHelper.getClassLoader(c);</span><br /><span class="line"> <span class="number">10</span>: </span><br /><span class="line"> <span class="number">11</span>:     <span class="comment">// 设置属性方法 `#setPropertyValue(o, n, v)` 的开头的代码</span></span><br /><span class="line"> <span class="number">12</span>:     StringBuilder c1 = <span class="keyword">new</span> StringBuilder(<span class="string">"public void setPropertyValue(Object o, String n, Object v){ "</span>);</span><br /><span class="line"> <span class="number">13</span>:     <span class="comment">// 获得属性方法 `#getPropertyValue(o, n)` 的开头的代码</span></span><br /><span class="line"> <span class="number">14</span>:     StringBuilder c2 = <span class="keyword">new</span> StringBuilder(<span class="string">"public Object getPropertyValue(Object o, String n){ "</span>);</span><br /><span class="line"> <span class="number">15</span>:     <span class="comment">// 调用方法 `#invokeMethod(o, n, p, v)` 的开头的代码</span></span><br /><span class="line"> <span class="number">16</span>:     StringBuilder c3 = <span class="keyword">new</span> StringBuilder(<span class="string">"public Object invokeMethod(Object o, String n, Class[] p, Object[] v) throws "</span> + InvocationTargetException.class.getName() + <span class="string">"{ "</span>);</span><br /><span class="line"> <span class="number">17</span>: </span><br /><span class="line"> <span class="number">18</span>:     <span class="comment">// 添加每个方法的，被调用对象的类型转换的代码</span></span><br /><span class="line"> <span class="number">19</span>:     c1.append(name).append(<span class="string">" w; try{ w = (("</span>).append(name).append(<span class="string">")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }"</span>);</span><br /><span class="line"> <span class="number">20</span>:     c2.append(name).append(<span class="string">" w; try{ w = (("</span>).append(name).append(<span class="string">")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }"</span>);</span><br /><span class="line"> <span class="number">21</span>:     c3.append(name).append(<span class="string">" w; try{ w = (("</span>).append(name).append(<span class="string">")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }"</span>);</span><br /><span class="line"> <span class="number">22</span>: </span><br /><span class="line"> <span class="number">23</span>:     <span class="comment">// 属性名与属性名的集合，用于 `#hasProperty(...)` `#setPropertyValue(...)` `getPropertyValue(...)` 方法。</span></span><br /><span class="line"> <span class="number">24</span>:     Map&lt;String, Class&lt;?&gt;&gt; pts = <span class="keyword">new</span> HashMap&lt;String, Class&lt;?&gt;&gt;(); <span class="comment">// &lt;property name, property types&gt;</span></span><br /><span class="line"> <span class="number">25</span>:     <span class="comment">// 方法签名与方法对象的集合，用于 `#invokeMethod(..)` 方法。</span></span><br /><span class="line"> <span class="number">26</span>:     Map&lt;String, Method&gt; ms = <span class="keyword">new</span> LinkedHashMap&lt;String, Method&gt;(); <span class="comment">// &lt;method desc, Method instance&gt;</span></span><br /><span class="line"> <span class="number">27</span>:     <span class="comment">// 方法名数组用于 `#getMethodNames()` 方法。</span></span><br /><span class="line"> <span class="number">28</span>:     List&lt;String&gt; mns = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">// method names.</span></span><br /><span class="line"> <span class="number">29</span>:     <span class="comment">// 定义的方法名数组，用于 `#getDeclaredMethodNames()` 方法。</span></span><br /><span class="line"> <span class="number">30</span>:     List&lt;String&gt; dmns = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">// declaring method names.</span></span><br /><span class="line"> <span class="number">31</span>: </span><br /><span class="line"> <span class="number">32</span>:     <span class="comment">// 循环 public 属性，添加每个属性的设置和获得分别到 `#setPropertyValue(o, n, v)` 和 `#getPropertyValue(o, n)` 的代码</span></span><br /><span class="line"> <span class="number">33</span>:     <span class="comment">// get all public field.</span></span><br /><span class="line"> <span class="number">34</span>:     <span class="keyword">for</span> (Field f : c.getFields()) {</span><br /><span class="line"> <span class="number">35</span>:         String fn = f.getName();</span><br /><span class="line"> <span class="number">36</span>:         Class&lt;?&gt; ft = f.getType();</span><br /><span class="line"> <span class="number">37</span>:         <span class="keyword">if</span> (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers())) <span class="comment">// 排除 static 和 transient</span></span><br /><span class="line"> <span class="number">38</span>:             <span class="keyword">continue</span>;</span><br /><span class="line"> <span class="number">39</span>: </span><br /><span class="line"> <span class="number">40</span>:         c1.append(<span class="string">" if( $2.equals(\""</span>).append(fn).append(<span class="string">"\") ){ w."</span>).append(fn).append(<span class="string">"="</span>).append(arg(ft, <span class="string">"$3"</span>)).append(<span class="string">"; return; }"</span>);</span><br /><span class="line"> <span class="number">41</span>:         c2.append(<span class="string">" if( $2.equals(\""</span>).append(fn).append(<span class="string">"\") ){ return ($w)w."</span>).append(fn).append(<span class="string">"; }"</span>);</span><br /><span class="line"> <span class="number">42</span>:         <span class="comment">// 添加到 `pts` 中</span></span><br /><span class="line"> <span class="number">43</span>:         pts.put(fn, ft);</span><br /><span class="line"> <span class="number">44</span>:     }</span><br /><span class="line"> <span class="number">45</span>: </span><br /><span class="line"> <span class="number">46</span>:     Method[] methods = c.getMethods();</span><br /><span class="line"> <span class="number">47</span>:     <span class="comment">// 如果有方法，添加 `#invokeMethod(o, n, p, v)` 的 try 的代码</span></span><br /><span class="line"> <span class="number">48</span>:     <span class="comment">// get all public method.</span></span><br /><span class="line"> <span class="number">49</span>:     <span class="keyword">boolean</span> hasMethod = hasMethods(methods);</span><br /><span class="line"> <span class="number">50</span>:     <span class="keyword">if</span> (hasMethod) {</span><br /><span class="line"> <span class="number">51</span>:         c3.append(<span class="string">" try{"</span>);</span><br /><span class="line"> <span class="number">52</span>:     }</span><br /><span class="line"> <span class="number">53</span>:     <span class="keyword">for</span> (Method m : methods) {</span><br /><span class="line"> <span class="number">54</span>:         <span class="comment">// 跳过来自 Object 的内置方法</span></span><br /><span class="line"> <span class="number">55</span>:         <span class="keyword">if</span> (m.getDeclaringClass() == Object.class) <span class="comment">//ignore Object's method.</span></span><br /><span class="line"> <span class="number">56</span>:             <span class="keyword">continue</span>;</span><br /><span class="line"> <span class="number">57</span>: </span><br /><span class="line"> <span class="number">58</span>:         String mn = m.getName(); <span class="comment">// 方法名</span></span><br /><span class="line"> <span class="number">59</span>:         <span class="comment">// 使用方法名 + 方法参数长度来判断</span></span><br /><span class="line"> <span class="number">60</span>:         c3.append(<span class="string">" if( \""</span>).append(mn).append(<span class="string">"\".equals( $2 ) "</span>);</span><br /><span class="line"> <span class="number">61</span>:         <span class="keyword">int</span> len = m.getParameterTypes().length;</span><br /><span class="line"> <span class="number">62</span>:         c3.append(<span class="string">" &amp;&amp; "</span>).append(<span class="string">" $3.length == "</span>).append(len);</span><br /><span class="line"> <span class="number">63</span>: </span><br /><span class="line"> <span class="number">64</span>:         <span class="comment">// 若相同方法名存在多个，增加参数类型数组的比较判断</span></span><br /><span class="line"> <span class="number">65</span>:         <span class="keyword">boolean</span> override = <span class="keyword">false</span>;</span><br /><span class="line"> <span class="number">66</span>:         <span class="keyword">for</span> (Method m2 : methods) {</span><br /><span class="line"> <span class="number">67</span>:             <span class="keyword">if</span> (m != m2 &amp;&amp; m.getName().equals(m2.getName())) {</span><br /><span class="line"> <span class="number">68</span>:                 override = <span class="keyword">true</span>;</span><br /><span class="line"> <span class="number">69</span>:                 <span class="keyword">break</span>;</span><br /><span class="line"> <span class="number">70</span>:             }</span><br /><span class="line"> <span class="number">71</span>:         }</span><br /><span class="line"> <span class="number">72</span>:         <span class="keyword">if</span> (override) {</span><br /><span class="line"> <span class="number">73</span>:             <span class="keyword">if</span> (len &gt; <span class="number">0</span>) {</span><br /><span class="line"> <span class="number">74</span>:                 <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; len; l++) {</span><br /><span class="line"> <span class="number">75</span>:                     c3.append(<span class="string">" &amp;&amp; "</span>).append(<span class="string">" $3["</span>).append(l).append(<span class="string">"].getName().equals(\""</span>)</span><br /><span class="line"> <span class="number">76</span>:                             .append(m.getParameterTypes()[l].getName()).append(<span class="string">"\")"</span>);</span><br /><span class="line"> <span class="number">77</span>:                 }</span><br /><span class="line"> <span class="number">78</span>:             }</span><br /><span class="line"> <span class="number">79</span>:         }</span><br /><span class="line"> <span class="number">80</span>: </span><br /><span class="line"> <span class="number">81</span>:         c3.append(<span class="string">" ) { "</span>);</span><br /><span class="line"> <span class="number">82</span>: </span><br /><span class="line"> <span class="number">83</span>:         <span class="comment">// 添加调用对象的对应方法的代码</span></span><br /><span class="line"> <span class="number">84</span>:         <span class="keyword">if</span> (m.getReturnType() == Void.TYPE)</span><br /><span class="line"> <span class="number">85</span>:             c3.append(<span class="string">" w."</span>).append(mn).append(<span class="string">'('</span>).append(args(m.getParameterTypes(), <span class="string">"$4"</span>)).append(<span class="string">");"</span>).append(<span class="string">" return null;"</span>);</span><br /><span class="line"> <span class="number">86</span>:         <span class="keyword">else</span></span><br /><span class="line"> <span class="number">87</span>:             c3.append(<span class="string">" return ($w)w."</span>).append(mn).append(<span class="string">'('</span>).append(args(m.getParameterTypes(), <span class="string">"$4"</span>)).append(<span class="string">");"</span>);</span><br /><span class="line"> <span class="number">88</span>: </span><br /><span class="line"> <span class="number">89</span>:         c3.append(<span class="string">" }"</span>);</span><br /><span class="line"> <span class="number">90</span>: </span><br /><span class="line"> <span class="number">91</span>:         <span class="comment">// 添加到 `mns` 中</span></span><br /><span class="line"> <span class="number">92</span>:         mns.add(mn);</span><br /><span class="line"> <span class="number">93</span>:         <span class="comment">// 添加到 `dmns` 中</span></span><br /><span class="line"> <span class="number">94</span>:         <span class="keyword">if</span> (m.getDeclaringClass() == c)</span><br /><span class="line"> <span class="number">95</span>:             dmns.add(mn);</span><br /><span class="line"> <span class="number">96</span>:         <span class="comment">// 添加到 `ms` 中</span></span><br /><span class="line"> <span class="number">97</span>:         ms.put(ReflectUtils.getDesc(m), m);</span><br /><span class="line"> <span class="number">98</span>:     }</span><br /><span class="line"> <span class="number">99</span>:     <span class="comment">// 如果有方法，添加 `#invokeMethod(o, n, p, v)` 的 catch 的代码</span></span><br /><span class="line"><span class="number">100</span>:     <span class="keyword">if</span> (hasMethod) {</span><br /><span class="line"><span class="number">101</span>:         c3.append(<span class="string">" } catch(Throwable e) { "</span>);</span><br /><span class="line"><span class="number">102</span>:         c3.append(<span class="string">"     throw new java.lang.reflect.InvocationTargetException(e); "</span>);</span><br /><span class="line"><span class="number">103</span>:         c3.append(<span class="string">" }"</span>);</span><br /><span class="line"><span class="number">104</span>:     }</span><br /><span class="line"><span class="number">105</span>:     <span class="comment">// 添加 `#invokeMethod(o, n, p, v)` 的未匹配到方法的代码</span></span><br /><span class="line"><span class="number">106</span>:     c3.append(<span class="string">" throw new "</span> + NoSuchMethodException.class.getName() + <span class="string">"(\"Not found method \\\"\"+$2+\"\\\" in class "</span> + c.getName() + <span class="string">".\"); }"</span>);</span><br /><span class="line"><span class="number">107</span>: </span><br /><span class="line"><span class="number">108</span>:     <span class="comment">// 循环 setting/getting 方法，添加每个属性的设置和获得分别到 `#setPropertyValue(o, n, v)` 和 `#getPropertyValue(o, n)` 的代码</span></span><br /><span class="line"><span class="number">109</span>:     <span class="comment">// deal with get/set method.</span></span><br /><span class="line"><span class="number">110</span>:     Matcher matcher;</span><br /><span class="line"><span class="number">111</span>:     <span class="keyword">for</span> (Map.Entry&lt;String, Method&gt; entry : ms.entrySet()) {</span><br /><span class="line"><span class="number">112</span>:         String md = entry.getKey();</span><br /><span class="line"><span class="number">113</span>:         Method method = entry.getValue();</span><br /><span class="line"><span class="number">114</span>:         <span class="keyword">if</span> ((matcher = ReflectUtils.GETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {</span><br /><span class="line"><span class="number">115</span>:             String pn = propertyName(matcher.group(<span class="number">1</span>));</span><br /><span class="line"><span class="number">116</span>:             c2.append(<span class="string">" if( $2.equals(\""</span>).append(pn).append(<span class="string">"\") ){ return ($w)w."</span>).append(method.getName()).append(<span class="string">"(); }"</span>);</span><br /><span class="line"><span class="number">117</span>:             <span class="comment">// 添加到 `pts` 中</span></span><br /><span class="line"><span class="number">118</span>:             pts.put(pn, method.getReturnType());</span><br /><span class="line"><span class="number">119</span>:         } <span class="keyword">else</span> <span class="keyword">if</span> ((matcher = ReflectUtils.IS_HAS_CAN_METHOD_DESC_PATTERN.matcher(md)).matches()) {</span><br /><span class="line"><span class="number">120</span>:             String pn = propertyName(matcher.group(<span class="number">1</span>));</span><br /><span class="line"><span class="number">121</span>:             c2.append(<span class="string">" if( $2.equals(\""</span>).append(pn).append(<span class="string">"\") ){ return ($w)w."</span>).append(method.getName()).append(<span class="string">"(); }"</span>);</span><br /><span class="line"><span class="number">122</span>:             <span class="comment">// 添加到 `pts` 中</span></span><br /><span class="line"><span class="number">123</span>:             pts.put(pn, method.getReturnType());</span><br /><span class="line"><span class="number">124</span>:         } <span class="keyword">else</span> <span class="keyword">if</span> ((matcher = ReflectUtils.SETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) { <span class="comment">// 不支持 public T setName(String name) { this.name = name; return this;} 这种返回 this 的形式。</span></span><br /><span class="line"><span class="number">125</span>:             Class&lt;?&gt; pt = method.getParameterTypes()[<span class="number">0</span>];</span><br /><span class="line"><span class="number">126</span>:             String pn = propertyName(matcher.group(<span class="number">1</span>));</span><br /><span class="line"><span class="number">127</span>:             c1.append(<span class="string">" if( $2.equals(\""</span>).append(pn).append(<span class="string">"\") ){ w."</span>).append(method.getName()).append(<span class="string">"("</span>).append(arg(pt, <span class="string">"$3"</span>)).append(<span class="string">"); return; }"</span>);</span><br /><span class="line"><span class="number">128</span>:             <span class="comment">// 添加到 `pts` 中</span></span><br /><span class="line"><span class="number">129</span>:             pts.put(pn, pt);</span><br /><span class="line"><span class="number">130</span>:         }</span><br /><span class="line"><span class="number">131</span>:     }</span><br /><span class="line"><span class="number">132</span>:     c1.append(<span class="string">" throw new "</span> + NoSuchPropertyException.class.getName() + <span class="string">"(\"Not found property \\\"\"+$2+\"\\\" filed or setter method in class "</span> + c.getName() + <span class="string">".\"); }"</span>);</span><br /><span class="line"><span class="number">133</span>:     c2.append(<span class="string">" throw new "</span> + NoSuchPropertyException.class.getName() + <span class="string">"(\"Not found property \\\"\"+$2+\"\\\" filed or setter method in class "</span> + c.getName() + <span class="string">".\"); }"</span>);</span><br /><span class="line"><span class="number">134</span>: </span><br /><span class="line"><span class="number">135</span>:     <span class="comment">// make class</span></span><br /><span class="line"><span class="number">136</span>:     <span class="keyword">long</span> id = WRAPPER_CLASS_COUNTER.getAndIncrement();</span><br /><span class="line"><span class="number">137</span>:     <span class="comment">// 创建 ClassGenerator 对象</span></span><br /><span class="line"><span class="number">138</span>:     ClassGenerator cc = ClassGenerator.newInstance(cl);</span><br /><span class="line"><span class="number">139</span>:     <span class="comment">// 设置类名</span></span><br /><span class="line"><span class="number">140</span>:     cc.setClassName((Modifier.isPublic(c.getModifiers()) ? Wrapper.class.getName() : c.getName() + <span class="string">"$sw"</span>) + id);</span><br /><span class="line"><span class="number">141</span>:     <span class="comment">// 设置父类为 Wrapper.class</span></span><br /><span class="line"><span class="number">142</span>:     cc.setSuperClass(Wrapper.class);</span><br /><span class="line"><span class="number">143</span>: </span><br /><span class="line"><span class="number">144</span>:     <span class="comment">// 添加构造方法，参数 空</span></span><br /><span class="line"><span class="number">145</span>:     cc.addDefaultConstructor();</span><br /><span class="line"><span class="number">146</span>:     <span class="comment">// 添加静态属性 `pns` 的代码</span></span><br /><span class="line"><span class="number">147</span>:     cc.addField(<span class="string">"public static String[] pns;"</span>); <span class="comment">// property name array.</span></span><br /><span class="line"><span class="number">148</span>:     <span class="comment">// 添加静态属性 `pts` 的代码</span></span><br /><span class="line"><span class="number">149</span>:     cc.addField(<span class="string">"public static "</span> + Map.class.getName() + <span class="string">" pts;"</span>); <span class="comment">// property type map.</span></span><br /><span class="line"><span class="number">150</span>:     <span class="comment">// 添加静态属性 `pts` 的代码</span></span><br /><span class="line"><span class="number">151</span>:     cc.addField(<span class="string">"public static String[] mns;"</span>); <span class="comment">// all method name array.</span></span><br /><span class="line"><span class="number">152</span>:     <span class="comment">// 添加静态属性 `dmns` 的代码</span></span><br /><span class="line"><span class="number">153</span>:     cc.addField(<span class="string">"public static String[] dmns;"</span>); <span class="comment">// declared method name array.</span></span><br /><span class="line"><span class="number">154</span>:     <span class="comment">// 添加静态属性 `mts` 的代码。每个方法的参数数组。</span></span><br /><span class="line"><span class="number">155</span>:     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = ms.size(); i &lt; len; i++)</span><br /><span class="line"><span class="number">156</span>:         cc.addField(<span class="string">"public static Class[] mts"</span> + i + <span class="string">";"</span>);</span><br /><span class="line"><span class="number">157</span>: </span><br /><span class="line"><span class="number">158</span>:     <span class="comment">// ======= 添加抽象方法的实现，到 `cc` 中</span></span><br /><span class="line"><span class="number">159</span>:     <span class="comment">// 添加 `#getPropertyNames()` 的代码到 `cc`</span></span><br /><span class="line"><span class="number">160</span>:     cc.addMethod(<span class="string">"public String[] getPropertyNames(){ return pns; }"</span>);</span><br /><span class="line"><span class="number">161</span>:     <span class="comment">// 添加 `#hasProperty(n)` 的代码到 `cc`</span></span><br /><span class="line"><span class="number">162</span>:     cc.addMethod(<span class="string">"public boolean hasProperty(String n){ return pts.containsKey($1); }"</span>);</span><br /><span class="line"><span class="number">163</span>:     <span class="comment">// 添加 `#getPropertyType(n)` 的代码到 `cc`</span></span><br /><span class="line"><span class="number">164</span>:     cc.addMethod(<span class="string">"public Class getPropertyType(String n){ return (Class)pts.get($1); }"</span>);</span><br /><span class="line"><span class="number">165</span>:     <span class="comment">// 添加 `#getMethodNames()` 的代码到 `cc`</span></span><br /><span class="line"><span class="number">166</span>:     cc.addMethod(<span class="string">"public String[] getMethodNames(){ return mns; }"</span>);</span><br /><span class="line"><span class="number">167</span>:     <span class="comment">// 添加 `#getDeclaredMethodNames()` 的代码到 `cc`</span></span><br /><span class="line"><span class="number">168</span>:     cc.addMethod(<span class="string">"public String[] getDeclaredMethodNames(){ return dmns; }"</span>);</span><br /><span class="line"><span class="number">169</span>:     <span class="comment">// 添加 `#setPropertyValue(o, n, v)` 的代码到 `cc`</span></span><br /><span class="line"><span class="number">170</span>:     cc.addMethod(c1.toString());</span><br /><span class="line"><span class="number">171</span>:     <span class="comment">// 添加 `#getPropertyValue(o, n)` 的代码到 `cc`</span></span><br /><span class="line"><span class="number">172</span>:     cc.addMethod(c2.toString());</span><br /><span class="line"><span class="number">173</span>:     <span class="comment">// 添加 `#invokeMethod(o, n, p, v)` 的代码到 `cc`</span></span><br /><span class="line"><span class="number">174</span>:     cc.addMethod(c3.toString());</span><br /><span class="line"><span class="number">175</span>: </span><br /><span class="line"><span class="number">176</span>:     <span class="keyword">try</span> {</span><br /><span class="line"><span class="number">177</span>:         <span class="comment">// 生成类</span></span><br /><span class="line"><span class="number">178</span>:         Class&lt;?&gt; wc = cc.toClass();</span><br /><span class="line"><span class="number">179</span>:         <span class="comment">// 反射，设置静态变量的值</span></span><br /><span class="line"><span class="number">180</span>:         <span class="comment">// setup static field.</span></span><br /><span class="line"><span class="number">181</span>:         wc.getField(<span class="string">"pts"</span>).set(<span class="keyword">null</span>, pts);</span><br /><span class="line"><span class="number">182</span>:         wc.getField(<span class="string">"pns"</span>).set(<span class="keyword">null</span>, pts.keySet().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br /><span class="line"><span class="number">183</span>:         wc.getField(<span class="string">"mns"</span>).set(<span class="keyword">null</span>, mns.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br /><span class="line"><span class="number">184</span>:         wc.getField(<span class="string">"dmns"</span>).set(<span class="keyword">null</span>, dmns.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br /><span class="line"><span class="number">185</span>:         <span class="keyword">int</span> ix = <span class="number">0</span>;</span><br /><span class="line"><span class="number">186</span>:         <span class="keyword">for</span> (Method m : ms.values())</span><br /><span class="line"><span class="number">187</span>:             wc.getField(<span class="string">"mts"</span> + ix++).set(<span class="keyword">null</span>, m.getParameterTypes());</span><br /><span class="line"><span class="number">188</span>:         <span class="comment">// 创建对象</span></span><br /><span class="line"><span class="number">189</span>:         <span class="keyword">return</span> (Wrapper) wc.newInstance();</span><br /><span class="line"><span class="number">190</span>:     } <span class="keyword">catch</span> (RuntimeException e) {</span><br /><span class="line"><span class="number">191</span>:         <span class="keyword">throw</span> e;</span><br /><span class="line"><span class="number">192</span>:     } <span class="keyword">catch</span> (Throwable e) {</span><br /><span class="line"><span class="number">193</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br /><span class="line"><span class="number">194</span>:     } <span class="keyword">finally</span> {</span><br /><span class="line"><span class="number">195</span>:         <span class="comment">// 释放资源</span></span><br /><span class="line"><span class="number">196</span>:         cc.release();</span><br /><span class="line"><span class="number">197</span>:         ms.clear();</span><br /><span class="line"><span class="number">198</span>:         mns.clear();</span><br /><span class="line"><span class="number">199</span>:         dmns.clear();</span><br /><span class="line"><span class="number">200</span>:     }</span><br /><span class="line"><span class="number">201</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p>上文生成的 Wrapper1 的代码，对应的 DempServiceImpl 的代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>{</span><br /><span class="line"> <span class="number">2</span>: </span><br /><span class="line"> <span class="number">3</span>:     <span class="comment">/**</span></span><br /><span class="line"><span class="comment"> 4:      * 测试属性，{<span class="doctag">@link</span> com.alibaba.dubbo.common.bytecode.Wrapper}</span></span><br /><span class="line"><span class="comment"> 5:      */</span></span><br /><span class="line"> <span class="number">6</span>:     <span class="keyword">public</span> String test01;</span><br /><span class="line"> <span class="number">7</span>: </span><br /><span class="line"> <span class="number">8</span>:     <span class="keyword">private</span> DemoDAO demoDAO;</span><br /><span class="line"> <span class="number">9</span>: </span><br /><span class="line"><span class="number">10</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>{</span><br /><span class="line"><span class="number">11</span>:         System.out.println(<span class="string">"["</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()) + <span class="string">"] Hello "</span> + name + <span class="string">", request from consumer: "</span> + RpcContext.getContext().getRemoteAddress());</span><br /><span class="line"><span class="number">12</span>:         <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">", response form provider: "</span> + RpcContext.getContext().getLocalAddress();</span><br /><span class="line"><span class="number">13</span>:     }</span><br /><span class="line"><span class="number">14</span>: </span><br /><span class="line"><span class="number">15</span>:     <span class="meta">@Override</span></span><br /><span class="line"><span class="number">16</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bye</span><span class="params">(Object o)</span> </span>{</span><br /><span class="line"><span class="number">17</span>:         System.out.println(JSON.toJSONString(o));</span><br /><span class="line"><span class="number">18</span>:         System.out.println(o.getClass());</span><br /><span class="line"><span class="number">19</span>:     }</span><br /><span class="line"><span class="number">20</span>: </span><br /><span class="line"><span class="number">21</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoDAO</span><span class="params">(DemoDAO demoDAO)</span> </span>{</span><br /><span class="line"><span class="number">22</span>:         <span class="keyword">this</span>.demoDAO = demoDAO;</span><br /><span class="line"><span class="number">23</span>:     }</span><br /><span class="line"><span class="number">24</span>: </span><br /><span class="line"><span class="number">25</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>下面，我们的解析，会结合这个类一起讲。</li>
</ul>
<ul>
<li>========== 生成代码 ==========</li>
</ul>
</li>
<li>第 11 至 16 行：创建方法的<strong>开头</strong>的代码：
<ul>
<li><code>#setPropertyValue(o, n, v)</code>&nbsp;的【Wrapper1 第 45 至 46 行】</li>
<li><code>#getPropertyValue(o, n)</code>&nbsp;的【Wrapper1 第 69 至 70 行】</li>
<li><code>#invokeMethod(o, n, p, v)</code>&nbsp;的【Wrapper1 第 86 至 88 行】</li>
</ul>
</li>
<li>第 19 至 21 行：设置方法的<strong>被调用对象的类型转换</strong>的代码：
<ul>
<li><code>#setPropertyValue(o, n, v)</code>&nbsp;的【Wrapper1 第 47 至 55 行】
<ul>
<li><code>#getPropertyValue(o, n)</code>&nbsp;的【Wrapper1 第 71 至 79 行】</li>
<li><code>#invokeMethod(o, n, p, v)</code>&nbsp;的【Wrapper1 第 89 至 97 行】</li>
</ul>
</li>
</ul>
</li>
<li>第 23 至 30 行：声明&nbsp;<code>pts</code>&nbsp;<code>ms</code>&nbsp;<code>mn</code>&nbsp;<code>dmns</code>&nbsp;变量。🙂 每个变量的用途，已经添加到代码的注释上。</li>
<li>第 32 至 44 行：循环&nbsp;<strong>public</strong>&nbsp;属性，添加每个属性的设置和获得分别代码：
<ul>
<li>【DemoServiceImpl 第 6 行】</li>
<li><code>#setPropertyValue(o, n, v)</code>&nbsp;的【Wrapper1 第 56 至 60 行】</li>
<li><code>#getPropertyValue(o, n)</code>&nbsp;的【Wrapper1 第 80 至 62 行】</li>
</ul>
</li>
<li>第 46 至 106 行：设置方法&nbsp;<code>#invokeMethod(o, n, p, v)</code>&nbsp;的调用代码：
<ul>
<li>【DemoServiceImpl 第 10 至 23 行】</li>
<li>【Wrapper1 第 98 至 119 行】</li>
</ul>
</li>
<li>第 108 至 131 行：循环&nbsp;<strong>setting / getting</strong>&nbsp;属性，添加每个属性的设置和获得分别代码：
<ul>
<li><code>#setPropertyValue(o, n, v)</code>
<ul>
<li>【DemoServiceImpl 第 21 至 23 行】【DemoServiceImpl 第 8 行】</li>
<li>【Wrapper1 第 61 至 62 行】</li>
</ul>
</li>
<li>🙂&nbsp;<code>#getPropertyValue(o, n)</code>&nbsp;没举例子，胖友自己看代码脑补。</li>
</ul>
</li>
<li>========== 生成类 ==========</li>
<li>第 138 行：创建 ClassGenerator 对象。</li>
<li>第 140 行：设置类名。</li>
<li>第 142 行：设置父类为 Wrapper.class</li>
<li>第 145 行：添加构造方法，参数为空</li>
<li>第 146 至 156 行：添加<strong>静态属性</strong>&nbsp;<code>pns</code>&nbsp;<code>pts</code>&nbsp;<code>mns</code>&nbsp;<code>dmns</code>&nbsp;<code>mts</code>&nbsp;。</li>
<li>第 158 至 174 行：添加<strong>抽象方法</strong>的实现。</li>
<li>第 178 行：生成类。</li>
<li>========== 创建对象 ==========</li>
<li>第 179 至 187 行：反射，设置<strong>静态属性</strong>的值。</li>
<li>第 189 行：创建 Wrapper 对象。</li>
<li>========== 释放 ==========</li>
<li>第 195 至 199 行：释放资源。</li>
</ul>
</div>