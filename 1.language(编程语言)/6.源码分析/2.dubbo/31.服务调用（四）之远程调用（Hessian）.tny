<header class="article-header">
<h1 class="article-title">服务调用（四）之远程调用（Hessian）</h1>
</header>
<div class="article-entry">
<blockquote>
<p>本文基于 Dubbo 2.6.1 版本，望知悉。</p>
</blockquote>
<h1 id="1-概述">1. 概述</h1>
<p>本文，我们分享&nbsp;<code>hessian://</code>&nbsp;协议的远程调用，主要分成<strong>三个部分</strong>：</p>
<ul>
<li>服务暴露</li>
<li>服务引用</li>
<li>服务调用</li>
</ul>
<p>对应项目为&nbsp;<code>dubbo-rpc-hessian</code>&nbsp;。</p>
<p>对应文档为&nbsp;<a href="http://dubbo.apache.org/zh-cn/docs/user/references/protocol/hessian.html" target="_blank" rel="external nofollow noopener noreferrer">《Dubbo 用户指南 &mdash;&mdash; hessian://》</a>&nbsp;。定义如下：</p>
<blockquote>
<p>Hessian 协议用于集成 Hessian 的服务，Hessian 底层采用 Http 通讯，采用 Servlet 暴露服务，Dubbo 缺省内嵌 Jetty 作为服务器实现。</p>
</blockquote>
<blockquote>
<p>Dubbo 的 Hessian 协议可以和原生 Hessian 服务互操作，即：</p>
<ul>
<li>提供者用 Dubbo 的 Hessian 协议暴露服务，消费者直接用标准 Hessian 接口调用</li>
<li>或者提供方用标准 Hessian 暴露服务，消费方用 Dubbo 的 Hessian 协议调用。</li>
</ul>
</blockquote>
<p>本文涉及类图（红圈部分）如下：</p>
<p><img src="http://static2.iocoder.cn/images/Dubbo/2018_10_13/01.png" alt="类图" /></p>
<blockquote>
<p>旁白君：整体实现和&nbsp;<code>dubbo-rpc-http</code>&nbsp;一致，所以内容上和&nbsp;<a href="http://svip.iocoder.cn/Dubbo/rpc-http/?self">《精尽 Dubbo 源码分析 &mdash;&mdash; 服务调用（三）之远程调用（HTTP）》</a>&nbsp;差不多。</p>
</blockquote>
<h1 id="2-HttpClientConnection">2. HttpClientConnection</h1>
<p><code>com.alibaba.dubbo.rpc.protocol.hessian.HttpClientConnection</code>&nbsp;，实现 HessianConnection 接口，HttpClient 连接器实现类。</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientConnection</span> <span class="keyword">implements</span> <span class="title">HessianConnection</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * Apache HttpClient</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpClient httpClient;</span><br /><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ByteArrayOutputStream output;</span><br /><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpPost request;</span><br /><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> HttpResponse response;</span><br /><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpClientConnection</span><span class="params">(HttpClient httpClient, URL url)</span> </span>{</span><br /><span class="line">        <span class="keyword">this</span>.httpClient = httpClient;</span><br /><span class="line">        <span class="keyword">this</span>.output = <span class="keyword">new</span> ByteArrayOutputStream();</span><br /><span class="line">        <span class="keyword">this</span>.request = <span class="keyword">new</span> HttpPost(url.toString());</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String key, String value)</span> </span>{</span><br /><span class="line">        request.addHeader(<span class="keyword">new</span> BasicHeader(key, value));</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> OutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        <span class="keyword">return</span> output;</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        request.setEntity(<span class="keyword">new</span> ByteArrayEntity(output.toByteArray()));</span><br /><span class="line">        <span class="keyword">this</span>.response = httpClient.execute(request);</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatusCode</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> response == <span class="keyword">null</span> || response.getStatusLine() == <span class="keyword">null</span> ? <span class="number">0</span> : response.getStatusLine().getStatusCode();</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStatusMessage</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> response == <span class="keyword">null</span> || response.getStatusLine() == <span class="keyword">null</span> ? <span class="keyword">null</span> : response.getStatusLine().getReasonPhrase();</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentEncoding</span><span class="params">()</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> (response == <span class="keyword">null</span> || response.getEntity() == <span class="keyword">null</span> || response.getEntity().getContentEncoding() == <span class="keyword">null</span>) ? <span class="keyword">null</span> : response.getEntity().getContentEncoding().getValue();</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        <span class="keyword">return</span> response == <span class="keyword">null</span> || response.getEntity() == <span class="keyword">null</span> ? <span class="keyword">null</span> : response.getEntity().getContent();</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">        HttpPost request = <span class="keyword">this</span>.request;</span><br /><span class="line">        <span class="keyword">if</span> (request != <span class="keyword">null</span>) {</span><br /><span class="line">            request.abort();</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>基于&nbsp;<strong>Apache HttpClient</strong>&nbsp;封装。</li>
</ul>
<h2 id="2-1-HttpClientConnectionFactory">2.1 HttpClientConnectionFactory</h2>
<p><code>com.alibaba.dubbo.rpc.protocol.hessian.HttpClientConnectionFactory</code>&nbsp;，实现 HessianConnectionFactory 接口，创建 HttpClientConnection 的工厂。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientConnectionFactory</span> <span class="keyword">implements</span> <span class="title">HessianConnectionFactory</span> </span>{</span><br /><br /><span class="line">    <span class="comment">/**</span></span><br /><span class="line"><span class="comment">     * Apache HttpClient</span></span><br /><span class="line"><span class="comment">     */</span></span><br /><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHessianProxyFactory</span><span class="params">(HessianProxyFactory factory)</span> </span>{</span><br /><span class="line">        HttpConnectionParams.setConnectionTimeout(httpClient.getParams(), (<span class="keyword">int</span>) factory.getConnectTimeout());</span><br /><span class="line">        HttpConnectionParams.setSoTimeout(httpClient.getParams(), (<span class="keyword">int</span>) factory.getReadTimeout());</span><br /><span class="line">    }</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> HessianConnection <span class="title">open</span><span class="params">(URL url)</span> </span>{</span><br /><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpClientConnection(httpClient, url); <span class="comment">// HttpClientConnection</span></span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h1 id="3-HessianProtocol">3. HessianProtocol</h1>
<p><a href="https://github.com/YunaiV/dubbo/blob/master/dubbo-rpc/dubbo-rpc-hessian/src/main/java/com/alibaba/dubbo/rpc/protocol/hessian/HessianProtocol.java" target="_blank" rel="external nofollow noopener noreferrer"><code>com.alibaba.dubbo.rpc.protocol.hessian.HessianProtocol</code></a>&nbsp;，实现 AbstractProxyProtocol 抽象类，<code>hessian://</code>&nbsp;协议实现类。</p>
<h2 id="3-1-构造方法">3.1 构造方法</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Http 服务器集合</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * key：ip:port</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, HttpServer&gt; serverMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, HttpServer&gt;();</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * Spring HttpInvokerServiceExporter 集合</span></span><br /><span class="line"><span class="comment"> *</span></span><br /><span class="line"><span class="comment"> * key：path 服务名</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, HessianSkeleton&gt; skeletonMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, HessianSkeleton&gt;();</span><br /><span class="line"><span class="comment">/**</span></span><br /><span class="line"><span class="comment"> * HttpBinder$Adaptive 对象</span></span><br /><span class="line"><span class="comment"> */</span></span><br /><span class="line"><span class="keyword">private</span> HttpBinder httpBinder;</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HessianProtocol</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="keyword">super</span>(HessianException.class);</span><br /><span class="line">}</span><br /><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttpBinder</span><span class="params">(HttpBinder httpBinder)</span> </span>{</span><br /><span class="line">    <span class="keyword">this</span>.httpBinder = httpBinder;</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>
<p><code>serverMap</code>&nbsp;属性，HttpServer 集合。键为&nbsp;<code>ip:port</code>&nbsp;，通过&nbsp;<code>#getAddr(url)</code>&nbsp;方法，计算。代码如下：</p>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="comment">// AbstractProxyProtocol.java</span></span><br /><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getAddr</span><span class="params">(URL url)</span> </span>{</span><br /><span class="line">    String bindIp = url.getParameter(Constants.BIND_IP_KEY, url.getHost());</span><br /><span class="line">    <span class="keyword">if</span> (url.getParameter(Constants.ANYHOST_KEY, <span class="keyword">false</span>)) {</span><br /><span class="line">        bindIp = Constants.ANYHOST_VALUE;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> NetUtils.getIpByHost(bindIp) + <span class="string">":"</span> + url.getParameter(Constants.BIND_PORT_KEY, url.getPort());</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
</li>
<li>
<p><code>skeletonMap</code>&nbsp;属性，<code>com.caucho.hessian.server.HessianSkeleton</code>&nbsp;集合。请求处理过程为&nbsp;<code>HttpServer =&gt; DispatcherServlet =&gt; HessianHandler =&gt; HessianSkeleton</code>&nbsp;。</p>
</li>
<li><code>httpBinder</code>&nbsp;属性，HttpBinder$Adaptive 对象，通过&nbsp;<code>#setHttpBinder(httpBinder)</code>&nbsp;方法，Dubbo SPI 调用设置。</li>
<li><code>rpcExceptions = HessianException.class</code>&nbsp;。</li>
</ul>
<h2 id="3-2-doExport">3.2 doExport</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="keyword">protected</span> &lt;T&gt; <span class="function">Runnable <span class="title">doExport</span><span class="params">(T impl, Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>{</span><br /><span class="line"> <span class="number">3</span>:     <span class="comment">// 获得服务器地址</span></span><br /><span class="line"> <span class="number">4</span>:     String addr = getAddr(url);</span><br /><span class="line"> <span class="number">5</span>:     <span class="comment">// 获得 HttpServer 对象。若不存在，进行创建。</span></span><br /><span class="line"> <span class="number">6</span>:     HttpServer server = serverMap.get(addr);</span><br /><span class="line"> <span class="number">7</span>:     <span class="keyword">if</span> (server == <span class="keyword">null</span>) {</span><br /><span class="line"> <span class="number">8</span>:         server = httpBinder.bind(url, <span class="keyword">new</span> HessianHandler()); <span class="comment">// HessianHandler</span></span><br /><span class="line"> <span class="number">9</span>:         serverMap.put(addr, server);</span><br /><span class="line"><span class="number">10</span>:     }</span><br /><span class="line"><span class="number">11</span>:     <span class="comment">// 添加到 skeletonMap 中</span></span><br /><span class="line"><span class="number">12</span>:     <span class="keyword">final</span> String path = url.getAbsolutePath();</span><br /><span class="line"><span class="number">13</span>:     HessianSkeleton skeleton = <span class="keyword">new</span> HessianSkeleton(impl, type);</span><br /><span class="line"><span class="number">14</span>:     skeletonMap.put(path, skeleton);</span><br /><span class="line"><span class="number">15</span>:     <span class="comment">// 返回取消暴露的回调 Runnable</span></span><br /><span class="line"><span class="number">16</span>:     <span class="keyword">return</span> <span class="keyword">new</span> Runnable() {</span><br /><span class="line"><span class="number">17</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br /><span class="line"><span class="number">18</span>:             skeletonMap.remove(path);</span><br /><span class="line"><span class="number">19</span>:         }</span><br /><span class="line"><span class="number">20</span>:     };</span><br /><span class="line"><span class="number">21</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>基于&nbsp;<code>dubbo-remoting-http</code>&nbsp;项目，作为<strong>通信服务器</strong>。</li>
<li>第 4 行：调用&nbsp;<code>#getAddr(url)</code>&nbsp;方法，获得服务器地址。</li>
<li>第 5 至 10 行：从&nbsp;<code>serverMap</code>&nbsp;中，获得 HttpServer 对象。若不存在，调用&nbsp;<code>HttpBinder#bind(url, handler)</code>&nbsp;方法，创建 HttpServer 对象。此处使用的 HessianHandler ，下文详细解析。</li>
<li>第 11 至 14 行：创建 HessianSkeleton 对象，添加到&nbsp;<code>skeletonMap</code>&nbsp;集合中。</li>
<li>第 15 至 20 行：返回取消暴露的回调 Runnable 对象。</li>
</ul>
<h3 id="3-2-1-HessianHandler">3.2.1 HessianHandler</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HessianHandler</span> <span class="keyword">implements</span> <span class="title">HttpHandler</span> </span>{</span><br /><br /><span class="line">    <span class="meta">@Override</span></span><br /><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br /><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>{</span><br /><span class="line">        String uri = request.getRequestURI();</span><br /><span class="line">        <span class="comment">// 获得 HessianSkeleton 对象</span></span><br /><span class="line">        HessianSkeleton skeleton = skeletonMap.get(uri);</span><br /><span class="line">        <span class="comment">// 必须是 POST 请求</span></span><br /><span class="line">        <span class="keyword">if</span> (!request.getMethod().equalsIgnoreCase(<span class="string">"POST"</span>)) {</span><br /><span class="line">            response.setStatus(<span class="number">500</span>);</span><br /><span class="line">        <span class="comment">// 执行调用</span></span><br /><span class="line">        } <span class="keyword">else</span> {</span><br /><span class="line">            RpcContext.getContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());</span><br /><span class="line">            <span class="keyword">try</span> {</span><br /><span class="line">                skeleton.invoke(request.getInputStream(), response.getOutputStream());</span><br /><span class="line">            } <span class="keyword">catch</span> (Throwable e) {</span><br /><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(e);</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<h2 id="3-3-doRefer">3.3 doRefer</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"> <span class="number">1</span>: <span class="meta">@Override</span></span><br /><span class="line"> <span class="number">2</span>: <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br /><span class="line"> <span class="number">3</span>: <span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doRefer</span><span class="params">(Class&lt;T&gt; serviceType, URL url)</span> <span class="keyword">throws</span> RpcException </span>{</span><br /><span class="line"> <span class="number">4</span>:     <span class="comment">// 创建 HessianProxyFactory 对象</span></span><br /><span class="line"> <span class="number">5</span>:     HessianProxyFactory hessianProxyFactory = <span class="keyword">new</span> HessianProxyFactory();</span><br /><span class="line"> <span class="number">6</span>:     <span class="comment">// 创建连接器工厂为 HttpClientConnectionFactory 对象，即 Apache HttpClient</span></span><br /><span class="line"> <span class="number">7</span>:     String client = url.getParameter(Constants.CLIENT_KEY, Constants.DEFAULT_HTTP_CLIENT);</span><br /><span class="line"> <span class="number">8</span>:     <span class="keyword">if</span> (<span class="string">"httpclient"</span>.equals(client)) {</span><br /><span class="line"> <span class="number">9</span>:         hessianProxyFactory.setConnectionFactory(<span class="keyword">new</span> HttpClientConnectionFactory());</span><br /><span class="line"><span class="number">10</span>:     } <span class="keyword">else</span> <span class="keyword">if</span> (client != <span class="keyword">null</span> &amp;&amp; client.length() &gt; <span class="number">0</span> &amp;&amp; !Constants.DEFAULT_HTTP_CLIENT.equals(client)) {</span><br /><span class="line"><span class="number">11</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unsupported http protocol client=\""</span> + client + <span class="string">"\"!"</span>);</span><br /><span class="line"><span class="number">12</span>:     }</span><br /><span class="line"><span class="number">13</span>:     <span class="comment">// 设置超时时间</span></span><br /><span class="line"><span class="number">14</span>:     <span class="keyword">int</span> timeout = url.getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);</span><br /><span class="line"><span class="number">15</span>:     hessianProxyFactory.setConnectTimeout(timeout);</span><br /><span class="line"><span class="number">16</span>:     hessianProxyFactory.setReadTimeout(timeout);</span><br /><span class="line"><span class="number">17</span>:     <span class="comment">// 创建 Service Proxy 对象</span></span><br /><span class="line"><span class="number">18</span>:     <span class="keyword">return</span> (T) hessianProxyFactory.create(serviceType, url.setProtocol(<span class="string">"http"</span>).toJavaURL(), Thread.currentThread().getContextClassLoader());</span><br /><span class="line"><span class="number">19</span>: }</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>基于 HttpClient ，作为<strong>通信客户端</strong>。</li>
<li>第 5 行：创建&nbsp;<code>com.caucho.hessian.client.HessianProxyFactory</code>&nbsp;对象。</li>
<li>第 6 至 12 行：创建<strong>连接器工厂</strong>为&nbsp;<code>com.alibaba.dubbo.rpc.protocol.hessian.HttpClientConnectionFactory</code>&nbsp;。</li>
<li>第 13 至 16 行：设置超时时间。</li>
<li>第 18 行：调用&nbsp;<code>HessianProxyFactory#create(Class&lt;?&gt; api, URL url, ClassLoader loader)</code>&nbsp;方法，生成 Service Proxy 对象。</li>
</ul>
<h3 id="3-3-1-getErrorCode">3.3.1 getErrorCode</h3>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getErrorCode</span><span class="params">(Throwable e)</span> </span>{</span><br /><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> HessianConnectionException) {</span><br /><span class="line">        <span class="keyword">if</span> (e.getCause() != <span class="keyword">null</span>) {</span><br /><span class="line">            Class&lt;?&gt; cls = e.getCause().getClass();</span><br /><span class="line">            <span class="keyword">if</span> (SocketTimeoutException.class.equals(cls)) {</span><br /><span class="line">                <span class="keyword">return</span> RpcException.TIMEOUT_EXCEPTION;</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">        <span class="keyword">return</span> RpcException.NETWORK_EXCEPTION;</span><br /><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> HessianMethodSerializationException) {</span><br /><span class="line">        <span class="keyword">return</span> RpcException.SERIALIZATION_EXCEPTION;</span><br /><span class="line">    }</span><br /><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getErrorCode(e);</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>将异常，翻译成 Dubbo 异常码。</li>
</ul>
<h2 id="3-4-destroy">3.4 destroy</h2>
<figure class="highlight java">
<table>
<tbody>
<tr>
<td class="code">
<pre><span class="line"><span class="meta">@Override</span></span><br /><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br /><span class="line">    <span class="comment">// 销毁</span></span><br /><span class="line">    <span class="keyword">super</span>.destroy();</span><br /><span class="line">    <span class="comment">// 销毁 HttpServer</span></span><br /><span class="line">    <span class="keyword">for</span> (String key : <span class="keyword">new</span> ArrayList&lt;String&gt;(serverMap.keySet())) {</span><br /><span class="line">        HttpServer server = serverMap.remove(key);</span><br /><span class="line">        <span class="keyword">if</span> (server != <span class="keyword">null</span>) {</span><br /><span class="line">            <span class="keyword">try</span> {</span><br /><span class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) {</span><br /><span class="line">                    logger.info(<span class="string">"Close hessian server "</span> + server.getUrl());</span><br /><span class="line">                }</span><br /><span class="line">                server.close();</span><br /><span class="line">            } <span class="keyword">catch</span> (Throwable t) {</span><br /><span class="line">                logger.warn(t.getMessage(), t);</span><br /><span class="line">            }</span><br /><span class="line">        }</span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
</td>
</tr>
</tbody>
</table>
</figure>
<ul>
<li>这部分是&nbsp;<code>dubbo-rpc-http</code>&nbsp;所缺失的。</li>
</ul>
</div>