<div class="para-title level-2">
<h2 class="title-text">1. 简介</h2>
</div>
<div class="para-title level-3">
<h3 class="title-text">1.1 定义</h3>
</div>
<div class="para">&nbsp; &nbsp;线性表<em>（linear list）</em>是<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450" target="_blank" rel="noopener" data-lemmaid="1450">数据结构</a>的一种，一个线性表是n个具有相同特性的数据元素的有限序列。数据元素是一个抽象的符号，其具体含义在不同的情况下一般不同。</div>
<div class="para">在稍复杂的线性表中，一个数据元素可由多个数据项<em>（item）</em>组成，此种情况下常把数据元素称为<a href="https://baike.baidu.com/item/%E8%AE%B0%E5%BD%95/14312145" target="_blank" rel="noopener" data-lemmaid="14312145">记录</a><em>（record）</em>，含有大量记录的线性表又称<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6/6270998" target="_blank" rel="noopener" data-lemmaid="6270998">文件</a><em>（file）</em>。</div>
<div class="para">线性表中的个数n定义为线性表的长度，n=0时称为空表。在非空表中每个数据元素都有一个确定的位置，如用a<sub>i</sub>表示数据元素，则i称为数据元素a<sub>i</sub>在线性表中的位序。</div>
<div class="para">线性表的相邻元素之间存在着序偶关系。如用（a<sub>1</sub>，&hellip;，a<sub>i-1</sub>，a<sub>i</sub>，a<sub>i+1</sub>，&hellip;，a<sub>n</sub>）表示一个顺序表，则表中a<sub>i-1</sub>领先于a<sub>i</sub><sub>，</sub>a<sub>i</sub>领先于a<sub>i+1</sub>，称a<sub>i-1</sub>是a<sub>i</sub>的直接前驱元素，a<sub>i+1</sub>是a<sub>i</sub>的直接后继元素。当i=1,2，&hellip;，n-1时，a<sub>i</sub>有且仅有一个直接后继，当i=2，3，&hellip;，n时，a<sub>i</sub>有且仅有一个直接前驱<sup class="sup--normal" data-sup="1" data-ctrmap=":1,">&nbsp;[1]。</sup><a class="sup-anchor" name="ref_[1]_178622"></a></div>
<div class="para-title level-3">
<h3 class="title-text">1.2 分类</h3>
</div>
<div class="para">&nbsp; 我们说&ldquo;线性&rdquo;和&ldquo;非线性&rdquo;，只在逻辑层次上讨论，而不考虑存储层次，所以双向链表和循环链表依旧是线性表。</div>
<div class="para">在数据结构逻辑层次上细分，线性表可分为一般线性表和受限线性表。一般线性表也就是我们通常所说的&ldquo;线性表&rdquo;，可以自由的删除或添加结点。受限线性表主要包括栈和队列，受限表示对结点的操作受限制。</div>
<div class="para-title level-3">
<h3 class="title-text">1.3 优点</h3>
</div>
<div class="para">线性表的<a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84/9663235" target="_blank" rel="noopener" data-lemmaid="9663235">逻辑结构</a>简单，便于实现和操作。因此，线性表这种数据结构在实际应用中是广泛采用的一种数据结构。</div>
<div class="para-title level-2">
<h2 class="title-text">2. 特征</h2>
</div>
<div class="para">1．集合中必存在唯一的一个&ldquo;第一元素&rdquo;。</div>
<div class="para">2．集合中必存在唯一的一个 &ldquo;最后元素&rdquo; 。</div>
<div class="para">3．除最后一个元素之外，均有唯一的后继(后件)。</div>
<div class="para">4．除第一个元素之外，均有唯一的前驱(前件)。</div>
<div class="para-title level-2">
<h2 class="title-text">3.基本操作</h2>
</div>
<div class="para">1）MakeEmpty(L) 这是一个将L变为空表的方法</div>
<div class="para">2）Length（L） 返回表L的长度，即表中元素个数</div>
<div class="para">3）Get（L，i） 这是一个函数，函数值为L中位置i处的元素（1&le;i&le;n）</div>
<div class="para">4）Prior（L，i） 取i的前驱元素</div>
<div class="para">5）Next（L，i） 取i的后继元素</div>
<div class="para">6）Locate（L，x） 这是一个函数，函数值为元素x在L中的位置</div>
<div class="para">7）Insert（L，i，x）在表L的位置i处插入元素x，将原占据位置i的元素及后面的元素都向后推一个位置</div>
<div class="para">8）Delete（L，p） 从表L中删除位置p处的元素</div>
<div class="para">9）IsEmpty(L) 如果表L为空表(长度为0)则返回true，否则返回false</div>
<div class="para">10）Clear（L）清除所有元素</div>
<div class="para">11）Init（L）同第一个，初始化线性表为空</div>
<div class="para">12）Traverse（L）遍历输出所有元素</div>
<div class="para">13）Find（L，x）查找并返回元素</div>
<div class="para">14）Update（L，x）修改元素</div>
<div class="para">15）Sort（L）对所有元素重新按给定的条件排序</div>
<div class="para">16) strstr(string1,string2)用于字符数组的求string1中出现string2的首地址</div>
<div class="para-title level-2">
<h2 class="title-text">4.存储结构</h2>
</div>
<div class="para">&nbsp;&nbsp;&nbsp;线性表主要由顺序表示或链式表示。在实际应用中，常以<a href="https://baike.baidu.com/item/%E6%A0%88/12808149" target="_blank" rel="noopener" data-lemmaid="12808149">栈</a>、<a href="https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481" target="_blank" rel="noopener" data-lemmaid="14580481">队列</a>、<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E4%B8%B2" target="_blank" rel="noopener">字符串</a>等特殊形式使用。</div>
<div class="para">&nbsp;</div>
<div class="para">
<h3 class="title-text">4.1 顺序存储</h3>
</div>
<div class="para">&nbsp;&nbsp;&nbsp;顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素，称为线性表的顺序存储结构或顺序映像<em>（sequential mapping）</em>。它以&ldquo;物理位置相邻&rdquo;来表示线性表中数据元素间的逻辑关系，可随机存取表中任一元素。</div>
<div class="para">
<div>&nbsp;&nbsp;&nbsp;线性表顺序存储结构的优缺点</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;优点：</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a、无须为表示表中元素之间的逻辑关系而增加额外的存储空间。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b、可以快速地存取表中任一位置的元素。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;缺点：</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a、插入和删除操作需要移动大量元素。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b、当线性表长度变化较大时，难以确定存储空间的容量。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c、造成存储空间的&ldquo;碎片&rdquo;。</div>
</div>
<div class="para">
<h3 class="title-text">4.2 链式存储</h3>
&nbsp;&nbsp;&nbsp;链式表示指的是用一组任意的存储单元存储线性表中的数据元素，称为线性表的链式存储结构。它的存储单元可以是连续的，也可以是不连续的。在表示数据元素之间的逻辑关系时，除了存储其本身的信息之外，还需存储一个指示其直接后继的信息<em>（即直接后继的存储位置）</em>，这两部分信息组成数据元素的存储映像，称为结点<em>（node）</em>。它包括两个域；存储数据元素信息的域称为数据域；存储直接后继存储位置的域称为指针域。指针域中存储的信息称为指针或链<sup class="sup--normal" data-sup="1" data-ctrmap=":1,">&nbsp;[1]</sup><a class="sup-anchor" name="ref_[1]_178622"></a>。</div>
<div class="anchor-list">&nbsp;</div>
<div class="para-title level-2">
<div>&nbsp;&nbsp;&nbsp;线性表链式存储结构的优缺点</div>
<div>&nbsp;&nbsp;&nbsp;优点：</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a、插入、删除操作方便，不会导致元素的移动，因为元素增减，只需要调整指针。&nbsp;</div>
<div>&nbsp;&nbsp;&nbsp;缺点：</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a、顺序查找，查找复杂度为o(n)</div>
<h2 class="title-text">5.结构特点</h2>
</div>
<div class="para">1.均匀性：虽然不同数据表的数据元素可以是各种各样的，但对于同一线性表的各数据元素必定具有相同的数据类型和长度。</div>
<div class="para">2.有序性：各数据元素在线性表中的位置只取决于它们的序号，数据元素之前的相对位置是线性的，即存在唯一的&ldquo;第一个&ldquo;和&ldquo;最后一个&rdquo;的数据元素，除了第一个和最后一个外，其它元素前面均只有一个数据元素(直接前驱)和后面均只有一个数据元素（直接后继）。</div>
<div class="anchor-list"><a class="lemma-anchor para-title" name="6"></a><a class="lemma-anchor " name="sub178622_6"></a><a class="lemma-anchor " name="线性表的推广"></a></div>
<div class="para-title level-2">
<h2 class="title-text">6.线性表的推广</h2>
<a class="edit-icon j-edit-link" data-edit-dl="6">编辑</a></div>
<div class="para">时间有序表、排序表、和频率有序表都可以看做是线性表的推广。如果按照结点到达结构的时间先后，作为确定结点之间关系的，这样一种线性结构称之为时间有序表。例如，在红灯前停下的一长串汽车，最先到达的为首结点，最后到达的为尾结点；在离开时最先到达的汽车将最先离开，最后到达的将最后离开。这些汽车构成理一个队列，实际上就是一个时间有序表。栈和队列都是时间有序表。频率有序表是按照结点的使用频率确定它们之间的相互关系的，而排序表是根据结点的关键字值来加以确定的。<sup class="sup--normal" data-sup="2" data-ctrmap=":2,">&nbsp;[2]</sup><a class="sup-anchor" name="ref_[2]_178622"></a>&nbsp;</div>
<p>参考：</p>
<p><a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8/3228081?fr=aladdin">https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8/3228081?fr=aladdin</a></p>
<dl class="lemma-reference collapse nslog-area log-set-param" data-nslog-type="2">
<dd class="reference-list-wrap">
<ul class="reference-list">
<li id="reference-[1]-178622-wrap" class="reference-item reference-item--type2 "><a id="refIndex_1_178622" class="gotop anchor" title="向上跳转" href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8/3228081?fr=aladdin#ref_[1]_178622" name="refIndex_1_178622"></a></li>
<li id="reference-[2]-178622-wrap" class="reference-item reference-item--type3 "><a id="refIndex_2_178622" class="gotop anchor" title="向上跳转" href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8/3228081?fr=aladdin#ref_[2]_178622" name="refIndex_2_178622"></a></li>
</ul>
</dd>
</dl>